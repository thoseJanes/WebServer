<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1462.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1445" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1445" > </text>
<g id="frames">
<g >
<title>webserver::ConnBuffer::writerBegin (2,855,243 samples, 0.01%)</title><rect x="543.7" y="949" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="546.68" y="959.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_noprof (1,889,801 samples, 0.01%)</title><rect x="815.5" y="757" width="0.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="818.46" y="767.5" ></text>
</g>
<g >
<title>malloc (3,949,884 samples, 0.02%)</title><rect x="517.5" y="837" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="520.46" y="847.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (143,225,625 samples, 0.74%)</title><rect x="230.8" y="933" width="8.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="233.83" y="943.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::setTime (3,976,707 samples, 0.02%)</title><rect x="568.7" y="965" width="0.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="571.75" y="975.5" ></text>
</g>
<g >
<title>int&amp;&amp; std::forward&lt;int&gt; (2,985,176 samples, 0.02%)</title><rect x="57.1" y="1045" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="60.07" y="1055.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (29,007,904 samples, 0.15%)</title><rect x="93.3" y="933" width="1.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="96.25" y="943.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (3,199,248,541 samples, 16.47%)</title><rect x="56.5" y="1077" width="194.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="59.54" y="1087.5" >void std::__invoke_impl&lt;v..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (6,867,730 samples, 0.04%)</title><rect x="554.4" y="901" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="557.41" y="911.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (2,897,903 samples, 0.01%)</title><rect x="119.5" y="661" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="122.48" y="671.5" ></text>
</g>
<g >
<title>__GI___setsockopt (7,864,485 samples, 0.04%)</title><rect x="107.3" y="917" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="110.31" y="927.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::~TcpConnection (4,860,073 samples, 0.03%)</title><rect x="1019.8" y="1045" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1022.77" y="1055.5" ></text>
</g>
<g >
<title>__fdget_pos (13,072,717 samples, 0.07%)</title><rect x="348.4" y="1029" width="0.7" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="351.35" y="1039.5" ></text>
</g>
<g >
<title>do_softirq.part.0 (2,036,081 samples, 0.01%)</title><rect x="1158.9" y="789" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1161.90" y="799.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (2,978,612 samples, 0.02%)</title><rect x="968.9" y="805" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="971.87" y="815.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::swap (3,054,509 samples, 0.02%)</title><rect x="569.1" y="965" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="572.05" y="975.5" ></text>
</g>
<g >
<title>security_sk_free (3,957,765 samples, 0.02%)</title><rect x="996.9" y="789" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="999.85" y="799.5" ></text>
</g>
<g >
<title>evm_file_release (5,196,445 samples, 0.03%)</title><rect x="957.0" y="901" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="960.01" y="911.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (173,392,206 samples, 0.89%)</title><rect x="1060.4" y="1077" width="10.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1063.43" y="1087.5" ></text>
</g>
<g >
<title>ip_local_deliver (709,455,193 samples, 3.65%)</title><rect x="1107.8" y="629" width="43.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1110.84" y="639.5" >ip_l..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,669,281 samples, 0.01%)</title><rect x="111.7" y="757" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="114.67" y="767.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (15,594,609 samples, 0.08%)</title><rect x="885.6" y="1221" width="0.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="888.58" y="1231.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::unique_ptr&lt;std::default_delete&lt;webserver::Channel&gt;, void&gt; (24,435,588 samples, 0.13%)</title><rect x="199.2" y="965" width="1.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="202.23" y="975.5" ></text>
</g>
<g >
<title>__tcp_cleanup_rbuf (3,960,894 samples, 0.02%)</title><rect x="367.3" y="917" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="370.30" y="927.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::~holder (14,101,004 samples, 0.07%)</title><rect x="1006.2" y="981" width="0.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1009.20" y="991.5" ></text>
</g>
<g >
<title>webserver::sockets::accept (8,611,504 samples, 0.04%)</title><rect x="336.8" y="1109" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="339.76" y="1119.5" ></text>
</g>
<g >
<title>skb_network_protocol (3,039,826 samples, 0.02%)</title><rect x="735.5" y="69" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="738.50" y="79.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (2,000,069 samples, 0.01%)</title><rect x="473.0" y="533" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="475.98" y="543.5" ></text>
</g>
<g >
<title>lock_timer_base (8,545,052 samples, 0.04%)</title><rect x="187.0" y="741" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="189.99" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (4,775,744 samples, 0.02%)</title><rect x="582.7" y="933" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="585.69" y="943.5" ></text>
</g>
<g >
<title>security_inode_alloc (47,037,232 samples, 0.24%)</title><rect x="291.1" y="933" width="2.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="294.06" y="943.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (684,779,721 samples, 3.53%)</title><rect x="441.7" y="709" width="41.6" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="444.65" y="719.5" >fil..</text>
</g>
<g >
<title>ip_send_check (1,974,608 samples, 0.01%)</title><rect x="1096.0" y="869" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1099.04" y="879.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::_Tuple_impl (3,040,431 samples, 0.02%)</title><rect x="199.6" y="917" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="202.64" y="927.5" ></text>
</g>
<g >
<title>__memset (1,908,179 samples, 0.01%)</title><rect x="139.5" y="517" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="142.53" y="527.5" ></text>
</g>
<g >
<title>__call_rcu_common (16,435,502 samples, 0.08%)</title><rect x="949.4" y="757" width="1.0" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="952.41" y="767.5" ></text>
</g>
<g >
<title>available_idle_cpu (10,897,361 samples, 0.06%)</title><rect x="752.3" y="133" width="0.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="755.28" y="143.5" ></text>
</g>
<g >
<title>fsnotify_grab_connector (8,017,910 samples, 0.04%)</title><rect x="947.1" y="757" width="0.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="950.13" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;&amp; std::__get_helper&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt;&gt; (3,758,586 samples, 0.02%)</title><rect x="170.4" y="869" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="173.36" y="879.5" ></text>
</g>
<g >
<title>__inet_lookup_established (5,851,298 samples, 0.03%)</title><rect x="695.8" y="357" width="0.4" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="698.81" y="367.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (21,048,897 samples, 0.11%)</title><rect x="245.2" y="901" width="1.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="248.19" y="911.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (1,937,463 samples, 0.01%)</title><rect x="776.0" y="389" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="779.05" y="399.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (67,566,530 samples, 0.35%)</title><rect x="755.7" y="181" width="4.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="758.75" y="191.5" ></text>
</g>
<g >
<title>kthread_is_per_cpu (7,785,803 samples, 0.04%)</title><rect x="467.8" y="501" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="470.83" y="511.5" ></text>
</g>
<g >
<title>refill_stock (49,959,346 samples, 0.26%)</title><rect x="768.6" y="213" width="3.0" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="771.57" y="223.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (3,914,694 samples, 0.02%)</title><rect x="103.9" y="885" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="106.94" y="895.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (15,571,498 samples, 0.08%)</title><rect x="129.2" y="741" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="132.21" y="751.5" ></text>
</g>
<g >
<title>update_process_times (1,946,370 samples, 0.01%)</title><rect x="270.1" y="869" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="273.15" y="879.5" ></text>
</g>
<g >
<title>page_counter_uncharge (23,682,874 samples, 0.12%)</title><rect x="769.9" y="165" width="1.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="772.93" y="175.5" ></text>
</g>
<g >
<title>wake_up_bit (4,993,379 samples, 0.03%)</title><rect x="955.0" y="837" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="958.04" y="847.5" ></text>
</g>
<g >
<title>tty_write_room (5,937,941 samples, 0.03%)</title><rect x="478.9" y="661" width="0.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="481.87" y="671.5" ></text>
</g>
<g >
<title>webserver::EventLoop::queueInLoop (141,475,009 samples, 0.73%)</title><rect x="828.5" y="965" width="8.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="831.48" y="975.5" ></text>
</g>
<g >
<title>_raw_spin_lock (3,854,263 samples, 0.02%)</title><rect x="1001.0" y="933" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1004.02" y="943.5" ></text>
</g>
<g >
<title>dentry_free (3,865,480 samples, 0.02%)</title><rect x="955.9" y="885" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="958.87" y="895.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (1,994,839 samples, 0.01%)</title><rect x="432.3" y="885" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="435.33" y="895.5" ></text>
</g>
<g >
<title>std::ostream::flush (14,422,064 samples, 0.07%)</title><rect x="491.3" y="901" width="0.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="494.31" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_valptr (1,935,856 samples, 0.01%)</title><rect x="92.2" y="901" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="95.24" y="911.5" ></text>
</g>
<g >
<title>__x64_sys_write (767,530,647 samples, 3.95%)</title><rect x="436.9" y="773" width="46.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="439.91" y="783.5" >__x6..</text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; (3,947,512 samples, 0.02%)</title><rect x="923.8" y="1045" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="926.76" y="1055.5" ></text>
</g>
<g >
<title>epoll_ctl (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1205" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="13.89" y="1215.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (2,012,400 samples, 0.01%)</title><rect x="124.3" y="693" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="127.32" y="703.5" ></text>
</g>
<g >
<title>ip_output (2,011,882 samples, 0.01%)</title><rect x="793.1" y="677" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="796.08" y="687.5" ></text>
</g>
<g >
<title>add_wait_queue (10,483,317 samples, 0.05%)</title><rect x="143.5" y="453" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="146.53" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (2,998,159 samples, 0.02%)</title><rect x="74.5" y="965" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="77.49" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;void  (18,695,980 samples, 0.10%)</title><rect x="204.9" y="949" width="1.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="207.93" y="959.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (3,008,760 samples, 0.02%)</title><rect x="367.1" y="917" width="0.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="370.12" y="927.5" ></text>
</g>
<g >
<title>std::_Bind_helper&lt;std::__or_&lt;std::is_integral&lt;std::decay&lt;void  (9,764,226 samples, 0.05%)</title><rect x="1022.9" y="1093" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1025.90" y="1103.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,853,142 samples, 0.01%)</title><rect x="597.1" y="869" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="600.06" y="879.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,922,851 samples, 0.01%)</title><rect x="339.1" y="1109" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="342.14" y="1119.5" ></text>
</g>
<g >
<title>inet_release (549,644,253 samples, 2.83%)</title><rect x="964.5" y="869" width="33.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="967.48" y="879.5" >in..</text>
</g>
<g >
<title>handle_softirqs (2,989,351 samples, 0.02%)</title><rect x="476.3" y="533" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="479.31" y="543.5" ></text>
</g>
<g >
<title>page_counter_uncharge (2,002,319 samples, 0.01%)</title><rect x="771.4" y="181" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="774.43" y="191.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (170,452,376 samples, 0.88%)</title><rect x="910.9" y="869" width="10.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="913.94" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, void&gt; (6,797,096 samples, 0.03%)</title><rect x="578.7" y="965" width="0.4" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="581.71" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_get_insert_unique_pos (36,026,382 samples, 0.19%)</title><rect x="161.8" y="581" width="2.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="164.77" y="591.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::readerBegin (6,740,901 samples, 0.03%)</title><rect x="540.1" y="949" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="543.06" y="959.5" ></text>
</g>
<g >
<title>tcp_rcv_sne_update (3,973,431 samples, 0.02%)</title><rect x="762.4" y="293" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="765.42" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (1,966,476 samples, 0.01%)</title><rect x="574.0" y="933" width="0.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="577.01" y="943.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;char const  (8,706,810 samples, 0.04%)</title><rect x="597.6" y="965" width="0.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="600.59" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (2,738,731 samples, 0.01%)</title><rect x="1047.7" y="901" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1050.67" y="911.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (25,556,970 samples, 0.13%)</title><rect x="195.5" y="933" width="1.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="198.46" y="943.5" ></text>
</g>
<g >
<title>consume_stock (2,035,775 samples, 0.01%)</title><rect x="1144.9" y="437" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1147.95" y="447.5" ></text>
</g>
<g >
<title>webserver::TcpConnection*&amp; std::forward&lt;webserver::TcpConnection*&amp;&gt; (1,940,969 samples, 0.01%)</title><rect x="861.1" y="1157" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="864.11" y="1167.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2,913,646 samples, 0.02%)</title><rect x="927.9" y="1029" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="930.92" y="1039.5" ></text>
</g>
<g >
<title>kmem_cache_free (13,642,951 samples, 0.07%)</title><rect x="651.9" y="677" width="0.8" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="654.87" y="687.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::readFromFd (4,988,854 samples, 0.03%)</title><rect x="337.6" y="1141" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="340.64" y="1151.5" ></text>
</g>
<g >
<title>_copy_to_user (4,891,716 samples, 0.03%)</title><rect x="225.9" y="837" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="228.86" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_valptr (1,888,657 samples, 0.01%)</title><rect x="97.6" y="885" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="100.64" y="895.5" ></text>
</g>
<g >
<title>skb_do_copy_data_nocache (33,947,998 samples, 0.17%)</title><rect x="663.1" y="773" width="2.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="666.07" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (4,906,782 samples, 0.03%)</title><rect x="551.1" y="885" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="554.09" y="895.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,023,175 samples, 0.01%)</title><rect x="779.1" y="421" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="782.13" y="431.5" ></text>
</g>
<g >
<title>__queue_work (2,896,717 samples, 0.01%)</title><rect x="340.3" y="805" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="343.31" y="815.5" ></text>
</g>
<g >
<title>std::_Bind_helper&lt;std::__or_&lt;std::is_integral&lt;std::decay&lt;void  (3,808,259 samples, 0.02%)</title><rect x="846.9" y="1109" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="849.94" y="1119.5" ></text>
</g>
<g >
<title>operator new (1,926,172 samples, 0.01%)</title><rect x="851.6" y="1029" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="854.62" y="1039.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3,510,853 samples, 0.02%)</title><rect x="46.4" y="1221" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="49.39" y="1231.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,944,017 samples, 0.01%)</title><rect x="1150.5" y="597" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1153.53" y="607.5" ></text>
</g>
<g >
<title>security_socket_shutdown (34,408,671 samples, 0.18%)</title><rect x="1174.6" y="1029" width="2.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1177.61" y="1039.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;char*&gt; (1,805,495 samples, 0.01%)</title><rect x="1019.1" y="981" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1022.14" y="991.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (8,743,292 samples, 0.05%)</title><rect x="411.6" y="981" width="0.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="414.65" y="991.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_M_check_len (33,953,542 samples, 0.17%)</title><rect x="874.0" y="1253" width="2.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="877.00" y="1263.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;void&gt;::lock (9,601,413 samples, 0.05%)</title><rect x="43.1" y="1285" width="0.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="46.07" y="1295.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::EventThreadPool, std::default_delete&lt;webserver::EventThreadPool&gt; &gt;::_M_ptr (7,735,403 samples, 0.04%)</title><rect x="104.8" y="933" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="107.85" y="943.5" ></text>
</g>
<g >
<title>page_counter_try_charge (3,862,775 samples, 0.02%)</title><rect x="1143.8" y="453" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1146.75" y="463.5" ></text>
</g>
<g >
<title>inet_csk_reset_keepalive_timer (35,758,339 samples, 0.18%)</title><rect x="185.5" y="805" width="2.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="188.52" y="815.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (9,823,477 samples, 0.05%)</title><rect x="517.2" y="869" width="0.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="520.17" y="879.5" ></text>
</g>
<g >
<title>_IO_fwrite (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="1077" width="0.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1183.50" y="1087.5" ></text>
</g>
<g >
<title>ip_skb_dst_mtu (2,915,875 samples, 0.02%)</title><rect x="1160.8" y="837" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1163.81" y="847.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, webserver::Channel*&gt;::_Tuple_impl&lt;webserver::Channel*&amp;&gt; (1,986,374 samples, 0.01%)</title><rect x="128.4" y="709" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="131.43" y="719.5" ></text>
</g>
<g >
<title>__wake_up_common (229,205,908 samples, 1.18%)</title><rect x="746.0" y="245" width="13.9" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="748.98" y="255.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::ConnBuffer (169,087,317 samples, 0.87%)</title><rect x="208.8" y="965" width="10.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="211.81" y="975.5" ></text>
</g>
<g >
<title>apparmor_socket_getpeername (7,902,514 samples, 0.04%)</title><rect x="234.4" y="853" width="0.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="237.42" y="863.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;void,  (5,941,962 samples, 0.03%)</title><rect x="1015.2" y="949" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1018.18" y="959.5" ></text>
</g>
<g >
<title>nf_hook_slow (6,859,616 samples, 0.04%)</title><rect x="792.7" y="661" width="0.4" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="795.67" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::_Iter_equals_iter (3,011,643 samples, 0.02%)</title><rect x="535.0" y="901" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="538.02" y="911.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (4,921,002 samples, 0.03%)</title><rect x="1048.0" y="933" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1050.95" y="943.5" ></text>
</g>
<g >
<title>inet_csk_clear_xmit_timers (2,019,707 samples, 0.01%)</title><rect x="773.6" y="261" width="0.1" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="776.58" y="271.5" ></text>
</g>
<g >
<title>_raw_spin_lock (8,799,112 samples, 0.05%)</title><rect x="696.3" y="357" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="699.29" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_head (4,926,403 samples, 0.03%)</title><rect x="1010.8" y="965" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1013.82" y="975.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (6,866,489 samples, 0.04%)</title><rect x="1074.7" y="1077" width="0.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1077.68" y="1087.5" ></text>
</g>
<g >
<title>sk_reset_timer (5,527,155 samples, 0.03%)</title><rect x="1170.5" y="933" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1173.53" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (2,938,761 samples, 0.02%)</title><rect x="849.3" y="1077" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="852.31" y="1087.5" ></text>
</g>
<g >
<title>tcp_v4_fill_cb (5,933,638 samples, 0.03%)</title><rect x="699.4" y="357" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="702.36" y="367.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (3,716,509 samples, 0.02%)</title><rect x="339.4" y="1077" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="342.43" y="1087.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2,635,253 samples, 0.01%)</title><rect x="105.7" y="981" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="108.68" y="991.5" ></text>
</g>
<g >
<title>tcp_reset (7,710,879 samples, 0.04%)</title><rect x="656.1" y="709" width="0.5" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="659.10" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt;::size (2,935,015 samples, 0.02%)</title><rect x="868.8" y="1285" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="871.82" y="1295.5" ></text>
</g>
<g >
<title>destroy_inode (1,814,058 samples, 0.01%)</title><rect x="943.0" y="837" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="946.00" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (21,277,534 samples, 0.11%)</title><rect x="596.1" y="933" width="1.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="599.05" y="943.5" ></text>
</g>
<g >
<title>skb_free_head (3,875,807 samples, 0.02%)</title><rect x="781.6" y="469" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="784.55" y="479.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::handleError (24,131,248 samples, 0.12%)</title><rect x="339.1" y="1141" width="1.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="342.14" y="1151.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_noprof (8,796,141 samples, 0.05%)</title><rect x="1088.0" y="949" width="0.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1090.98" y="959.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::Poller*, false&gt;::_M_head (1,854,703 samples, 0.01%)</title><rect x="1054.1" y="949" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1057.12" y="959.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_ptr (3,928,342 samples, 0.02%)</title><rect x="842.0" y="1077" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="844.96" y="1087.5" ></text>
</g>
<g >
<title>tcp_stream_alloc_skb (2,016,263 samples, 0.01%)</title><rect x="821.3" y="789" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="824.29" y="799.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;long&gt; &gt;, std::is_move_constructible&lt;long&gt;, std::is_move_assignable&lt;long&gt; &gt;::value, void&gt;::type std::swap&lt;long&gt; (2,025,008 samples, 0.01%)</title><rect x="568.9" y="933" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="571.87" y="943.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr&lt;webserver::TcpConnection, void&gt; (11,749,349 samples, 0.06%)</title><rect x="892.0" y="1125" width="0.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="895.05" y="1135.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (2,929,100 samples, 0.02%)</title><rect x="834.9" y="885" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="837.95" y="895.5" ></text>
</g>
<g >
<title>select_idle_sibling (1,881,910 samples, 0.01%)</title><rect x="750.7" y="165" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="753.69" y="175.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (172,372,322 samples, 0.89%)</title><rect x="1060.5" y="1061" width="10.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1063.49" y="1071.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::allocate (3,907,545 samples, 0.02%)</title><rect x="96.8" y="885" width="0.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="99.83" y="895.5" ></text>
</g>
<g >
<title>_int_free (4,019,207 samples, 0.02%)</title><rect x="575.9" y="837" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="578.86" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (16,767,224 samples, 0.09%)</title><rect x="549.5" y="901" width="1.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="552.47" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (3,980,380 samples, 0.02%)</title><rect x="601.7" y="949" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="604.67" y="959.5" ></text>
</g>
<g >
<title>file_close_fd (4,978,122 samples, 0.03%)</title><rect x="1003.7" y="949" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1006.72" y="959.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::EventThreadPool, std::default_delete&lt;webserver::EventThreadPool&gt; &gt;::_M_ptr (1,913,514 samples, 0.01%)</title><rect x="104.7" y="949" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="107.67" y="959.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,014,377 samples, 0.01%)</title><rect x="1168.1" y="869" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1171.11" y="879.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (2,975,722 samples, 0.02%)</title><rect x="1184.7" y="1253" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.74" y="1263.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; const*, std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt; &gt; (3,607,588 samples, 0.02%)</title><rect x="172.6" y="949" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="175.58" y="959.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (5,883,477 samples, 0.03%)</title><rect x="1046.1" y="933" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1049.06" y="943.5" ></text>
</g>
<g >
<title>__dentry_kill (311,939,529 samples, 1.61%)</title><rect x="936.6" y="885" width="19.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="939.63" y="895.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_addr (6,626,712 samples, 0.03%)</title><rect x="1050.4" y="837" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1053.43" y="847.5" ></text>
</g>
<g >
<title>sk_reset_timer (4,908,744 samples, 0.03%)</title><rect x="799.0" y="693" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="801.99" y="703.5" ></text>
</g>
<g >
<title>webserver::Channel::Channel (12,823,110 samples, 0.07%)</title><rect x="200.9" y="965" width="0.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="203.93" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (2,013,276 samples, 0.01%)</title><rect x="610.3" y="901" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="613.27" y="911.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (3,022,088 samples, 0.02%)</title><rect x="684.4" y="501" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="687.45" y="511.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (26,501,756 samples, 0.14%)</title><rect x="599.5" y="933" width="1.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="602.53" y="943.5" ></text>
</g>
<g >
<title>std::function&lt;void  (24,215,500 samples, 0.12%)</title><rect x="826.3" y="965" width="1.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="829.30" y="975.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;3ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; &gt;::type&amp; std::get&lt;3ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (4,891,935 samples, 0.03%)</title><rect x="840.1" y="1029" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="843.14" y="1039.5" ></text>
</g>
<g >
<title>operator new (1,950,118 samples, 0.01%)</title><rect x="213.2" y="901" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="216.18" y="911.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~map (4,945,120 samples, 0.03%)</title><rect x="121.0" y="645" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="124.03" y="655.5" ></text>
</g>
<g >
<title>boost::any::placeholder::~placeholder (1,882,281 samples, 0.01%)</title><rect x="1006.2" y="965" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1009.20" y="975.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Poller*, webserver::Channel*&gt;::_M_head (2,909,403 samples, 0.01%)</title><rect x="1070.7" y="965" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1073.73" y="975.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (4,837,102 samples, 0.02%)</title><rect x="611.3" y="949" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="614.32" y="959.5" ></text>
</g>
<g >
<title>loopback_xmit (4,800,610 samples, 0.02%)</title><rect x="734.5" y="101" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="737.50" y="111.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (16,681,683 samples, 0.09%)</title><rect x="803.3" y="725" width="1.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="806.32" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (2,972,775 samples, 0.02%)</title><rect x="51.2" y="1141" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="54.21" y="1151.5" ></text>
</g>
<g >
<title>webserver::Channel::setREvent (2,000,764 samples, 0.01%)</title><rect x="861.6" y="1301" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="864.58" y="1311.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,907,657 samples, 0.01%)</title><rect x="991.6" y="709" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="994.61" y="719.5" ></text>
</g>
<g >
<title>move_addr_to_user (14,516,275 samples, 0.07%)</title><rect x="236.6" y="853" width="0.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="239.60" y="863.5" ></text>
</g>
<g >
<title>ip_queue_xmit (1,122,740,221 samples, 5.78%)</title><rect x="1094.1" y="933" width="68.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1097.13" y="943.5" >ip_queu..</text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt;, false&gt;::~_Head_base (5,812,420 samples, 0.03%)</title><rect x="906.7" y="853" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="909.70" y="863.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (3,958,629 samples, 0.02%)</title><rect x="1072.2" y="1077" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1075.17" y="1087.5" ></text>
</g>
<g >
<title>sk_reset_timer (3,930,244 samples, 0.02%)</title><rect x="1119.6" y="517" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1122.62" y="527.5" ></text>
</g>
<g >
<title>std::operator== (1,966,305 samples, 0.01%)</title><rect x="560.1" y="933" width="0.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="563.07" y="943.5" ></text>
</g>
<g >
<title>apparmor_file_permission (15,772,588 samples, 0.08%)</title><rect x="391.8" y="997" width="1.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="394.81" y="1007.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (5,708,321 samples, 0.03%)</title><rect x="579.2" y="965" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="582.19" y="975.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (2,011,685 samples, 0.01%)</title><rect x="89.4" y="917" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="92.45" y="927.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::_M_ptr (6,918,594 samples, 0.04%)</title><rect x="130.3" y="757" width="0.5" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="133.33" y="767.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;webserver::TcpConnection,  (2,043,842 samples, 0.01%)</title><rect x="193.1" y="949" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="196.08" y="959.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3,901,163 samples, 0.02%)</title><rect x="196.8" y="885" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="199.77" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (7,961,477 samples, 0.04%)</title><rect x="1064.2" y="901" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1067.19" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (3,933,401 samples, 0.02%)</title><rect x="499.6" y="837" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="502.61" y="847.5" ></text>
</g>
<g >
<title>std::operator!= (2,001,001 samples, 0.01%)</title><rect x="597.3" y="965" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="600.35" y="975.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2,882,351 samples, 0.01%)</title><rect x="565.9" y="917" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="568.93" y="927.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::holder (9,464,708 samples, 0.05%)</title><rect x="122.4" y="613" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="125.38" y="623.5" ></text>
</g>
<g >
<title>refill_stock (1,915,887 samples, 0.01%)</title><rect x="322.2" y="869" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="325.18" y="879.5" ></text>
</g>
<g >
<title>rw_verify_area (10,698,249 samples, 0.06%)</title><rect x="349.8" y="1029" width="0.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="352.84" y="1039.5" ></text>
</g>
<g >
<title>ip_finish_output2 (114,375,999 samples, 0.59%)</title><rect x="729.0" y="149" width="7.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="732.04" y="159.5" ></text>
</g>
<g >
<title>__printf_buffer (1,975,449 samples, 0.01%)</title><rect x="1180.3" y="1045" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1183.27" y="1055.5" ></text>
</g>
<g >
<title>do_output_char (36,315,867 samples, 0.19%)</title><rect x="452.2" y="661" width="2.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="455.25" y="671.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (4,865,820 samples, 0.03%)</title><rect x="1105.5" y="693" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1108.54" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (42,317,241 samples, 0.22%)</title><rect x="549.1" y="917" width="2.6" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="552.12" y="927.5" ></text>
</g>
<g >
<title>security_file_permission (11,208,188 samples, 0.06%)</title><rect x="440.9" y="709" width="0.7" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="443.91" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::operator++ (4,740,986 samples, 0.02%)</title><rect x="15.5" y="1301" width="0.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="18.50" y="1311.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (4,942,684 samples, 0.03%)</title><rect x="1056.7" y="1093" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1059.67" y="1103.5" ></text>
</g>
<g >
<title>boost::any::type (5,967,053 samples, 0.03%)</title><rect x="528.1" y="965" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="531.11" y="975.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (3,818,298 samples, 0.02%)</title><rect x="504.1" y="789" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="507.14" y="799.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::swap (3,777,871 samples, 0.02%)</title><rect x="573.4" y="949" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="576.42" y="959.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~_Tuple_impl (6,866,137 samples, 0.04%)</title><rect x="84.6" y="869" width="0.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="87.63" y="879.5" ></text>
</g>
<g >
<title> (3,918,644 samples, 0.02%)</title><rect x="119.1" y="661" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="122.06" y="671.5" ></text>
</g>
<g >
<title>webserver::TcpServer::newConnection (7,819,441 samples, 0.04%)</title><rect x="249.4" y="1013" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="252.38" y="1023.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (90,340,092 samples, 0.47%)</title><rect x="730.4" y="117" width="5.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="733.44" y="127.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::function&lt;void  (3,870,407 samples, 0.02%)</title><rect x="833.6" y="869" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="836.56" y="879.5" ></text>
</g>
<g >
<title>void std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; (14,352,566 samples, 0.07%)</title><rect x="166.6" y="533" width="0.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="169.61" y="543.5" ></text>
</g>
<g >
<title>boost::any::any&lt;webserver::HttpParser&gt; (33,715,787 samples, 0.17%)</title><rect x="115.2" y="677" width="2.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="118.23" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (4,897,856 samples, 0.03%)</title><rect x="890.1" y="1157" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="893.08" y="1167.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_drop_node (11,512,232 samples, 0.06%)</title><rect x="613.3" y="917" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="616.28" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (2,017,085 samples, 0.01%)</title><rect x="413.1" y="965" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="416.07" y="975.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (42,004,869 samples, 0.22%)</title><rect x="1165.7" y="949" width="2.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1168.74" y="959.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1,877,849 samples, 0.01%)</title><rect x="218.7" y="901" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="221.66" y="911.5" ></text>
</g>
<g >
<title>std::operator== (2,820,079 samples, 0.01%)</title><rect x="868.5" y="1269" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="871.53" y="1279.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, bool&gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; (162,992,679 samples, 0.84%)</title><rect x="90.0" y="965" width="9.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="92.99" y="975.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (4,949,415 samples, 0.03%)</title><rect x="55.3" y="1077" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="58.34" y="1087.5" ></text>
</g>
<g >
<title>webserver::Channel* const&amp; std::__get_helper&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (1,885,052 samples, 0.01%)</title><rect x="126.4" y="741" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="129.42" y="751.5" ></text>
</g>
<g >
<title>try_to_wake_up (111,833,854 samples, 0.58%)</title><rect x="1133.2" y="421" width="6.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1136.19" y="431.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr (6,997,043 samples, 0.04%)</title><rect x="899.9" y="1013" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="902.92" y="1023.5" ></text>
</g>
<g >
<title>malloc (1,965,574 samples, 0.01%)</title><rect x="848.3" y="1045" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="851.31" y="1055.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_right (2,047,021 samples, 0.01%)</title><rect x="867.6" y="1221" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="870.57" y="1231.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (3,019,295 samples, 0.02%)</title><rect x="627.9" y="757" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="630.92" y="767.5" ></text>
</g>
<g >
<title>kmem_cache_free (72,624,648 samples, 0.37%)</title><rect x="1033.3" y="837" width="4.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1036.33" y="847.5" ></text>
</g>
<g >
<title>__printf_buffer (58,949,125 samples, 0.30%)</title><rect x="66.2" y="949" width="3.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="69.20" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (7,736,602 samples, 0.04%)</title><rect x="826.4" y="917" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="829.42" y="927.5" ></text>
</g>
<g >
<title>apparmor_socket_accept (11,824,527 samples, 0.06%)</title><rect x="286.0" y="981" width="0.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="289.04" y="991.5" ></text>
</g>
<g >
<title>kfree_skbmem (13,642,951 samples, 0.07%)</title><rect x="651.9" y="693" width="0.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="654.87" y="703.5" ></text>
</g>
<g >
<title>apparmor_socket_setsockopt (7,586,653 samples, 0.04%)</title><rect x="180.2" y="837" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="183.21" y="847.5" ></text>
</g>
<g >
<title>do_syscall_64 (337,390,441 samples, 1.74%)</title><rect x="132.5" y="597" width="20.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="135.46" y="607.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (2,080,389 samples, 0.01%)</title><rect x="1139.8" y="373" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1142.80" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_getsockname (123,755,561 samples, 0.64%)</title><rect x="221.7" y="885" width="7.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="224.65" y="895.5" ></text>
</g>
<g >
<title>_raw_spin_lock (5,912,169 samples, 0.03%)</title><rect x="801.7" y="645" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="804.75" y="655.5" ></text>
</g>
<g >
<title>wake_affine (6,888,167 samples, 0.04%)</title><rect x="469.6" y="485" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="472.58" y="495.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (1,462,094,806 samples, 7.53%)</title><rect x="690.4" y="437" width="88.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="693.42" y="447.5" >__netif_re..</text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::~vector (25,433,912 samples, 0.13%)</title><rect x="38.5" y="1301" width="1.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="41.48" y="1311.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::deallocate (2,852,936 samples, 0.01%)</title><rect x="1063.2" y="869" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1066.24" y="879.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;2ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; &gt;::type&amp; std::get&lt;2ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (2,875,651 samples, 0.01%)</title><rect x="840.0" y="1029" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="842.96" y="1039.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~_Tuple_impl (3,922,536 samples, 0.02%)</title><rect x="902.3" y="949" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="905.29" y="959.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (1,562,384,945 samples, 8.04%)</title><rect x="925.4" y="1125" width="95.0" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="928.43" y="1135.5" >std::__shar..</text>
</g>
<g >
<title>__radix_tree_lookup (2,000,241 samples, 0.01%)</title><rect x="463.6" y="549" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="466.57" y="559.5" ></text>
</g>
<g >
<title>tcp_rtt_estimator (11,763,717 samples, 0.06%)</title><rect x="648.5" y="677" width="0.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="651.49" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (22,623,104 samples, 0.12%)</title><rect x="586.2" y="965" width="1.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="589.23" y="975.5" ></text>
</g>
<g >
<title>srso_alias_untrain_ret (1,905,007 samples, 0.01%)</title><rect x="239.8" y="933" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="242.81" y="943.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (15,238,598 samples, 0.08%)</title><rect x="1188.2" y="1173" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1191.19" y="1183.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (1,961,899 samples, 0.01%)</title><rect x="121.2" y="613" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="124.21" y="623.5" ></text>
</g>
<g >
<title>ep_poll_callback (25,022,080 samples, 0.13%)</title><rect x="1080.8" y="965" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1083.81" y="975.5" ></text>
</g>
<g >
<title>lock_sock_nested (8,730,782 samples, 0.04%)</title><rect x="627.6" y="789" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="630.62" y="799.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;&amp;&amp; std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; (2,989,190 samples, 0.02%)</title><rect x="98.9" y="933" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="101.94" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1,993,307 samples, 0.01%)</title><rect x="611.0" y="885" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="613.97" y="895.5" ></text>
</g>
<g >
<title>tcp_update_skb_after_send (2,929,534 samples, 0.02%)</title><rect x="1163.6" y="933" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1166.59" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_Rb_tree_iterator (2,994,556 samples, 0.02%)</title><rect x="917.9" y="789" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="920.90" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::equal_range (52,245,229 samples, 0.27%)</title><rect x="1065.8" y="917" width="3.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1068.78" y="927.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (3,693,089 samples, 0.02%)</title><rect x="188.9" y="869" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="191.89" y="879.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (1,830,050 samples, 0.01%)</title><rect x="367.9" y="917" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="370.89" y="927.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (2,985,170 samples, 0.02%)</title><rect x="916.1" y="821" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="919.09" y="831.5" ></text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (1,897,431 samples, 0.01%)</title><rect x="295.1" y="933" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="298.15" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (2,892,564 samples, 0.01%)</title><rect x="593.5" y="933" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="596.53" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (6,807,536 samples, 0.04%)</title><rect x="215.7" y="901" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="218.66" y="911.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::handleClose (165,875,616 samples, 0.85%)</title><rect x="846.8" y="1125" width="10.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="849.76" y="1135.5" ></text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (59,293,995 samples, 0.31%)</title><rect x="318.7" y="917" width="3.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="321.69" y="927.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (6,019,559 samples, 0.03%)</title><rect x="77.6" y="965" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="80.59" y="975.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (188,151,193 samples, 0.97%)</title><rect x="725.3" y="229" width="11.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="728.32" y="239.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (8,541,106 samples, 0.04%)</title><rect x="570.3" y="949" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="573.26" y="959.5" ></text>
</g>
<g >
<title>__pm_relax (1,701,003 samples, 0.01%)</title><rect x="26.1" y="1173" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="29.06" y="1183.5" ></text>
</g>
<g >
<title>malloc (2,962,286 samples, 0.02%)</title><rect x="830.5" y="869" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="833.53" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_const_iterator (4,956,766 samples, 0.03%)</title><rect x="1063.6" y="901" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1066.60" y="911.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::shutdownWrite (192,710,982 samples, 0.99%)</title><rect x="825.4" y="981" width="11.7" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="828.42" y="991.5" ></text>
</g>
<g >
<title>lockref_mark_dead (2,915,592 samples, 0.02%)</title><rect x="956.6" y="885" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="959.59" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (4,786,282 samples, 0.02%)</title><rect x="553.4" y="869" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="556.41" y="879.5" ></text>
</g>
<g >
<title>__rcu_read_lock (6,858,344 samples, 0.04%)</title><rect x="305.3" y="917" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="308.27" y="927.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (1,933,894 samples, 0.01%)</title><rect x="72.6" y="901" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="75.62" y="911.5" ></text>
</g>
<g >
<title>ktime_get (3,789,107 samples, 0.02%)</title><rect x="653.9" y="709" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="656.94" y="719.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1333" width="0.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="13.89" y="1343.5" ></text>
</g>
<g >
<title>apparmor_socket_shutdown (18,810,435 samples, 0.10%)</title><rect x="1175.6" y="1013" width="1.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1178.56" y="1023.5" ></text>
</g>
<g >
<title>tcp_cwnd_validate (8,716,832 samples, 0.04%)</title><rect x="797.4" y="725" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="800.38" y="735.5" ></text>
</g>
<g >
<title>evm_inode_alloc_security (4,833,311 samples, 0.02%)</title><rect x="290.3" y="933" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="293.29" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (4,022,525 samples, 0.02%)</title><rect x="627.9" y="773" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="630.86" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_get_node (11,876,965 samples, 0.06%)</title><rect x="165.5" y="533" width="0.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="168.54" y="543.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (560,388,113 samples, 2.89%)</title><rect x="1116.1" y="565" width="34.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1119.13" y="575.5" >tc..</text>
</g>
<g >
<title>tcp_rack_update_reo_wnd (1,868,298 samples, 0.01%)</title><rect x="650.0" y="709" width="0.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="652.99" y="719.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (2,852,928 samples, 0.01%)</title><rect x="466.2" y="517" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="469.17" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (271,645,465 samples, 1.40%)</title><rect x="18.1" y="1269" width="16.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="21.14" y="1279.5" ></text>
</g>
<g >
<title>__sk_free (245,829,627 samples, 1.27%)</title><rect x="982.5" y="821" width="15.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="985.52" y="831.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (5,707,252 samples, 0.03%)</title><rect x="580.5" y="917" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="583.47" y="927.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (1,906,872 samples, 0.01%)</title><rect x="155.6" y="565" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="158.57" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt;::tuple&lt;true, true&gt; (3,756,060 samples, 0.02%)</title><rect x="897.0" y="1045" width="0.3" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="900.03" y="1055.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2,836,754 samples, 0.01%)</title><rect x="942.5" y="837" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="945.53" y="847.5" ></text>
</g>
<g >
<title>webserver::Socket::~Socket (2,806,950 samples, 0.01%)</title><rect x="928.8" y="1029" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="931.81" y="1039.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_noprof (86,872,517 samples, 0.45%)</title><rect x="146.5" y="517" width="5.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="149.51" y="527.5" ></text>
</g>
<g >
<title>mem_cgroup_charge_skmem (9,546,275 samples, 0.05%)</title><rect x="815.6" y="757" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="818.57" y="767.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,062,946,276 samples, 5.47%)</title><rect x="106.6" y="949" width="64.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="109.61" y="959.5" >std::_F..</text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (2,023,332 samples, 0.01%)</title><rect x="607.6" y="885" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="610.61" y="895.5" ></text>
</g>
<g >
<title>ip_local_out (2,963,434 samples, 0.02%)</title><rect x="793.6" y="693" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="796.62" y="703.5" ></text>
</g>
<g >
<title>webserver::Channel::isWritingEnabled (4,734,114 samples, 0.02%)</title><rect x="828.2" y="965" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="831.19" y="975.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::HttpRequest (2,864,295 samples, 0.01%)</title><rect x="576.7" y="981" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="579.69" y="991.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (157,509,777 samples, 0.81%)</title><rect x="114.2" y="709" width="9.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="117.16" y="719.5" ></text>
</g>
<g >
<title>webserver::HttpResponse*&amp;&amp; std::forward&lt;webserver::HttpResponse*&gt; (1,984,462 samples, 0.01%)</title><rect x="523.8" y="949" width="0.1" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="526.79" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (10,764,582 samples, 0.06%)</title><rect x="567.8" y="901" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="570.79" y="911.5" ></text>
</g>
<g >
<title>std::function&lt;void  (3,023,491 samples, 0.02%)</title><rect x="899.7" y="1013" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="902.74" y="1023.5" ></text>
</g>
<g >
<title>int&amp;&amp; std::forward&lt;int&gt; (1,987,109 samples, 0.01%)</title><rect x="54.6" y="1093" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="57.57" y="1103.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (61,573,805 samples, 0.32%)</title><rect x="579.5" y="965" width="3.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="582.53" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (2,909,020 samples, 0.01%)</title><rect x="595.0" y="917" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="598.03" y="927.5" ></text>
</g>
<g >
<title>tcp_ack (24,309,986 samples, 0.13%)</title><rect x="1124.2" y="533" width="1.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1127.18" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (16,160,301 samples, 0.08%)</title><rect x="1188.1" y="1189" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1191.13" y="1199.5" ></text>
</g>
<g >
<title>do_sock_setsockopt (149,428,992 samples, 0.77%)</title><rect x="179.3" y="869" width="9.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="182.27" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_check_len (1,865,827 samples, 0.01%)</title><rect x="209.9" y="933" width="0.1" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="212.88" y="943.5" ></text>
</g>
<g >
<title>iterate_tty_write (11,314,586 samples, 0.06%)</title><rect x="1180.6" y="885" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1183.56" y="895.5" ></text>
</g>
<g >
<title>x64_sys_call (2,582,394 samples, 0.01%)</title><rect x="483.8" y="805" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="486.78" y="815.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,918,266,597 samples, 25.32%)</title><rect x="884.4" y="1269" width="298.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="887.44" y="1279.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>void std::_Bind&lt;void  (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1253" width="0.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="13.89" y="1263.5" ></text>
</g>
<g >
<title>operator delete (2,882,686 samples, 0.01%)</title><rect x="913.7" y="757" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="916.75" y="767.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::retrieve (3,867,832 samples, 0.02%)</title><rect x="543.3" y="949" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="546.33" y="959.5" ></text>
</g>
<g >
<title>__mod_memcg_state (11,577,570 samples, 0.06%)</title><rect x="1143.1" y="437" width="0.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1146.05" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (40,985,283 samples, 0.21%)</title><rect x="422.1" y="885" width="2.5" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="425.12" y="895.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (4,818,168,420 samples, 24.81%)</title><rect x="888.9" y="1173" width="292.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="891.88" y="1183.5" >void std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>tcp_validate_incoming (8,657,240 samples, 0.04%)</title><rect x="656.0" y="725" width="0.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="659.04" y="735.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,913,522 samples, 0.01%)</title><rect x="895.5" y="1093" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="898.49" y="1103.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,951,747 samples, 0.02%)</title><rect x="34.6" y="1269" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="37.64" y="1279.5" ></text>
</g>
<g >
<title>tcp_close (1,953,631 samples, 0.01%)</title><rect x="998.1" y="869" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1001.10" y="879.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp;&amp; std::forward&lt;webserver::ConnBuffer*&gt; (1,859,159 samples, 0.01%)</title><rect x="840.7" y="1045" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="843.68" y="1055.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5,646,161 samples, 0.03%)</title><rect x="428.1" y="869" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="431.10" y="879.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (461,083,942 samples, 2.37%)</title><rect x="1027.2" y="997" width="28.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1030.18" y="1007.5" >v..</text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~map (45,939,362 samples, 0.24%)</title><rect x="573.9" y="949" width="2.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="576.89" y="959.5" ></text>
</g>
<g >
<title>__x64_sys_getsockopt (1,922,851 samples, 0.01%)</title><rect x="339.1" y="1061" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="342.14" y="1071.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; (3,945,303 samples, 0.02%)</title><rect x="124.5" y="725" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="127.50" y="735.5" ></text>
</g>
<g >
<title>inet_label_sock_perm (1,976,669 samples, 0.01%)</title><rect x="1176.5" y="981" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1179.46" y="991.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::base (1,994,780 samples, 0.01%)</title><rect x="15.2" y="1301" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="18.20" y="1311.5" ></text>
</g>
<g >
<title>webserver::InetAddress::InetAddress (6,992,185 samples, 0.04%)</title><rect x="338.0" y="1141" width="0.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="341.00" y="1151.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::_Tuple_impl (2,833,324 samples, 0.01%)</title><rect x="200.2" y="901" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="203.25" y="911.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,896,625 samples, 0.01%)</title><rect x="583.1" y="901" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="586.10" y="911.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (7,867,303 samples, 0.04%)</title><rect x="892.3" y="1077" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="895.28" y="1087.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (6,569,264 samples, 0.03%)</title><rect x="206.6" y="869" width="0.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="209.64" y="879.5" ></text>
</g>
<g >
<title>__queue_work (1,926,682 samples, 0.01%)</title><rect x="458.9" y="613" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="461.89" y="623.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (633,341,184 samples, 3.26%)</title><rect x="131.0" y="709" width="38.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="133.98" y="719.5" >voi..</text>
</g>
<g >
<title>__x64_sys_epoll_ctl (264,094,755 samples, 1.36%)</title><rect x="1029.8" y="885" width="16.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1032.84" y="895.5" ></text>
</g>
<g >
<title>__sk_mem_schedule (2,028,257 samples, 0.01%)</title><rect x="742.0" y="293" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="745.03" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_left (1,992,392 samples, 0.01%)</title><rect x="867.5" y="1221" width="0.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="870.45" y="1231.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4,002,159 samples, 0.02%)</title><rect x="192.7" y="965" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="195.66" y="975.5" ></text>
</g>
<g >
<title>tcp_send_fin (5,901,032 samples, 0.03%)</title><rect x="1082.9" y="1013" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1085.91" y="1023.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7,739,730 samples, 0.04%)</title><rect x="1023.8" y="1061" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1026.85" y="1071.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1,869,769 samples, 0.01%)</title><rect x="527.4" y="933" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="530.35" y="943.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1,798,096 samples, 0.01%)</title><rect x="190.4" y="949" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="193.41" y="959.5" ></text>
</g>
<g >
<title>skb_attempt_defer_free (28,587,768 samples, 0.15%)</title><rect x="368.1" y="917" width="1.7" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="371.06" y="927.5" ></text>
</g>
<g >
<title>ipv4_dst_check (3,015,486 samples, 0.02%)</title><rect x="630.9" y="741" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="633.87" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (3,894,787 samples, 0.02%)</title><rect x="493.7" y="869" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="496.72" y="879.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,730,664,678 samples, 8.91%)</title><rect x="1073.1" y="1093" width="105.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1076.13" y="1103.5" >do_syscall_64</text>
</g>
<g >
<title>enqueue_timer (1,976,363 samples, 0.01%)</title><rect x="1123.3" y="469" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1126.28" y="479.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;void  (1,938,632 samples, 0.01%)</title><rect x="204.3" y="917" width="0.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="207.27" y="927.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::find (23,360,869 samples, 0.12%)</title><rect x="1057.0" y="1093" width="1.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1059.97" y="1103.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3,737,053 samples, 0.02%)</title><rect x="1024.6" y="1061" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1027.55" y="1071.5" ></text>
</g>
<g >
<title>vfs_write (10,781,732 samples, 0.06%)</title><rect x="339.8" y="949" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="342.83" y="959.5" ></text>
</g>
<g >
<title>tcp_data_ready (305,419,512 samples, 1.57%)</title><rect x="742.7" y="293" width="18.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="745.67" y="303.5" ></text>
</g>
<g >
<title>tcp_fastopen_active_disable_ofo_check (5,955,168 samples, 0.03%)</title><rect x="972.8" y="805" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="975.81" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::erase[abi:cxx11] (3,039,356 samples, 0.02%)</title><rect x="912.4" y="837" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="915.45" y="847.5" ></text>
</g>
<g >
<title>validate_xmit_skb (14,706,527 samples, 0.08%)</title><rect x="735.0" y="101" width="0.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="738.03" y="111.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2,968,044 samples, 0.02%)</title><rect x="408.6" y="965" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="411.64" y="975.5" ></text>
</g>
<g >
<title>webserver::EventLoop::isInLoopThread (1,803,112 samples, 0.01%)</title><rect x="173.6" y="949" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="176.57" y="959.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt;::_M_head (2,920,010 samples, 0.02%)</title><rect x="124.6" y="693" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="127.56" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (2,022,660 samples, 0.01%)</title><rect x="594.0" y="917" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="596.99" y="927.5" ></text>
</g>
<g >
<title>__rcu_read_lock (4,983,772 samples, 0.03%)</title><rect x="1037.3" y="821" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1040.27" y="831.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (3,972,907 samples, 0.02%)</title><rect x="53.3" y="1125" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="56.29" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_right (1,995,961 samples, 0.01%)</title><rect x="163.3" y="565" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="166.31" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::find (61,338,724 samples, 0.32%)</title><rect x="916.6" y="821" width="3.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="919.57" y="831.5" ></text>
</g>
<g >
<title>init_file (1,907,340 samples, 0.01%)</title><rect x="327.2" y="965" width="0.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="330.21" y="975.5" ></text>
</g>
<g >
<title>__sk_dst_check (4,931,440 samples, 0.03%)</title><rect x="726.3" y="213" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="729.32" y="223.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::TimeStamp (4,813,496 samples, 0.02%)</title><rect x="506.5" y="885" width="0.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="509.47" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_S_max_size (4,946,544 samples, 0.03%)</title><rect x="215.4" y="885" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="218.36" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::max_size (12,338,208 samples, 0.06%)</title><rect x="217.0" y="917" width="0.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="220.03" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::EventThreadPool*, std::default_delete&lt;webserver::EventThreadPool&gt; &gt;::_M_head (2,794,201 samples, 0.01%)</title><rect x="105.0" y="901" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="108.03" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2,030,657 samples, 0.01%)</title><rect x="575.3" y="869" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="578.26" y="879.5" ></text>
</g>
<g >
<title>apparmor_ip_postroute (2,906,949 samples, 0.01%)</title><rect x="727.9" y="181" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="730.91" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;, true&gt; (12,888,781 samples, 0.07%)</title><rect x="100.3" y="981" width="0.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="103.31" y="991.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (5,588,443 samples, 0.03%)</title><rect x="1169.1" y="949" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1172.06" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_node (2,828,918 samples, 0.01%)</title><rect x="596.5" y="885" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="599.53" y="895.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_ptr (5,955,228 samples, 0.03%)</title><rect x="1072.0" y="1093" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1075.04" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (2,863,989 samples, 0.01%)</title><rect x="163.1" y="549" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="166.07" y="559.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInChannelHandling (1,912,106 samples, 0.01%)</title><rect x="106.1" y="981" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="109.14" y="991.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (6,867,751 samples, 0.04%)</title><rect x="1058.7" y="1093" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1061.68" y="1103.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;bool  (4,797,859 samples, 0.02%)</title><rect x="203.3" y="917" width="0.3" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="206.34" y="927.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,039,842 samples, 0.01%)</title><rect x="1011.4" y="981" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1014.40" y="991.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (1,971,214 samples, 0.01%)</title><rect x="419.2" y="885" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="422.23" y="895.5" ></text>
</g>
<g >
<title>operator delete (2,011,524 samples, 0.01%)</title><rect x="1008.8" y="949" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1011.82" y="959.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::updateChannel (115,208,819 samples, 0.59%)</title><rect x="1046.8" y="949" width="7.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1049.83" y="959.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,841,769 samples, 0.01%)</title><rect x="263.7" y="981" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="266.70" y="991.5" ></text>
</g>
<g >
<title>webserver::Channel::setErrorCallback (18,695,980 samples, 0.10%)</title><rect x="204.9" y="965" width="1.2" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="207.93" y="975.5" ></text>
</g>
<g >
<title>map_id_range_down (4,954,109 samples, 0.03%)</title><rect x="290.6" y="917" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="293.64" y="927.5" ></text>
</g>
<g >
<title>check_heap_object (14,670,796 samples, 0.08%)</title><rect x="445.3" y="645" width="0.9" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="448.27" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_Node_allocator (1,988,748 samples, 0.01%)</title><rect x="614.3" y="869" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="617.29" y="879.5" ></text>
</g>
<g >
<title>char const  (4,640,545 samples, 0.02%)</title><rect x="584.3" y="965" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="587.28" y="975.5" ></text>
</g>
<g >
<title>operator new (2,953,805 samples, 0.02%)</title><rect x="102.2" y="917" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="105.23" y="927.5" ></text>
</g>
<g >
<title>__wake_up (43,651,293 samples, 0.22%)</title><rect x="1080.0" y="997" width="2.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1083.03" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (10,324,504 samples, 0.05%)</title><rect x="496.1" y="869" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="499.12" y="879.5" ></text>
</g>
<g >
<title>apparmor_socket_shutdown (5,882,878 samples, 0.03%)</title><rect x="1076.2" y="1029" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1079.23" y="1039.5" ></text>
</g>
<g >
<title>available_idle_cpu (5,899,905 samples, 0.03%)</title><rect x="469.6" y="469" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="472.64" y="479.5" ></text>
</g>
<g >
<title>__GI___snprintf (2,864,291 samples, 0.01%)</title><rect x="1180.3" y="1077" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1183.27" y="1087.5" ></text>
</g>
<g >
<title>__offtime (2,931,062 samples, 0.02%)</title><rect x="514.6" y="885" width="0.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="517.64" y="895.5" ></text>
</g>
<g >
<title>webserver::TcpServer::removeConnection (2,914,719 samples, 0.02%)</title><rect x="922.9" y="1029" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="925.94" y="1039.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::Poller*, webserver::Channel*&gt;::tuple&lt;webserver::Poller*, webserver::Channel*&amp;, true&gt; (5,923,955 samples, 0.03%)</title><rect x="1058.7" y="1077" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1061.74" y="1087.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (5,517,347 samples, 0.03%)</title><rect x="187.2" y="725" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="190.18" y="735.5" ></text>
</g>
<g >
<title>sock_alloc_inode (182,020,264 samples, 0.94%)</title><rect x="294.7" y="949" width="11.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="297.74" y="959.5" ></text>
</g>
<g >
<title>__sk_free (5,895,544 samples, 0.03%)</title><rect x="966.5" y="837" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="969.52" y="847.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3,843,117 samples, 0.02%)</title><rect x="851.9" y="1029" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="854.92" y="1039.5" ></text>
</g>
<g >
<title>[[vdso]] (29,539,458 samples, 0.15%)</title><rect x="857.1" y="1109" width="1.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="860.07" y="1119.5" ></text>
</g>
<g >
<title>__netif_rx (12,513,537 samples, 0.06%)</title><rect x="732.9" y="69" width="0.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="735.92" y="79.5" ></text>
</g>
<g >
<title>__sk_dst_check (3,971,667 samples, 0.02%)</title><rect x="1162.0" y="917" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1165.05" y="927.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (4,611,532 samples, 0.02%)</title><rect x="239.5" y="933" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="242.53" y="943.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="901" width="0.8" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1183.50" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (5,930,553 samples, 0.03%)</title><rect x="827.8" y="965" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="830.77" y="975.5" ></text>
</g>
<g >
<title>mod_memcg_state (10,752,214 samples, 0.06%)</title><rect x="643.5" y="645" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="646.45" y="655.5" ></text>
</g>
<g >
<title>try_charge_memcg (50,527,911 samples, 0.26%)</title><rect x="817.9" y="725" width="3.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="820.87" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (1,895,812 samples, 0.01%)</title><rect x="575.1" y="853" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="578.14" y="863.5" ></text>
</g>
<g >
<title>__printf_buffer (18,531,720 samples, 0.10%)</title><rect x="599.5" y="917" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="602.53" y="927.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::function&lt;void  (1,895,387 samples, 0.01%)</title><rect x="1187.2" y="1253" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.22" y="1263.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (2,000,143 samples, 0.01%)</title><rect x="476.2" y="565" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="479.18" y="575.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,946,932 samples, 0.02%)</title><rect x="955.3" y="853" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="958.34" y="863.5" ></text>
</g>
<g >
<title>malloc (3,061,566 samples, 0.02%)</title><rect x="872.9" y="1221" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="875.87" y="1231.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;&amp; std::__get_helper&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt;&gt; (4,929,035 samples, 0.03%)</title><rect x="170.8" y="853" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="173.77" y="863.5" ></text>
</g>
<g >
<title>std::function&lt;void  (38,639,311 samples, 0.20%)</title><rect x="202.5" y="933" width="2.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="205.52" y="943.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3,009,415 samples, 0.02%)</title><rect x="130.2" y="725" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="133.15" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7,736,602 samples, 0.04%)</title><rect x="826.4" y="933" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="829.42" y="943.5" ></text>
</g>
<g >
<title>std::function&lt;void  (35,441,164 samples, 0.18%)</title><rect x="832.5" y="901" width="2.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="835.49" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_Alloc_node&gt; (53,337,801 samples, 0.27%)</title><rect x="95.9" y="949" width="3.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="98.88" y="959.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (1,968,131 samples, 0.01%)</title><rect x="1067.7" y="885" width="0.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1070.72" y="895.5" ></text>
</g>
<g >
<title>tcp_rate_skb_sent (2,915,323 samples, 0.02%)</title><rect x="1163.4" y="933" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1166.42" y="943.5" ></text>
</g>
<g >
<title>aa_inet_msg_perm (20,681,787 samples, 0.11%)</title><rect x="388.2" y="933" width="1.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="391.18" y="943.5" ></text>
</g>
<g >
<title>tcp_small_queue_check.isra.0 (2,994,397 samples, 0.02%)</title><rect x="806.2" y="725" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="809.25" y="735.5" ></text>
</g>
<g >
<title> (6,968,868 samples, 0.04%)</title><rect x="126.2" y="805" width="0.4" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="129.16" y="815.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2,787,588 samples, 0.01%)</title><rect x="248.7" y="933" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="251.67" y="943.5" ></text>
</g>
<g >
<title>__mod_timer (3,845,230 samples, 0.02%)</title><rect x="1170.6" y="901" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1173.63" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (108,912,349 samples, 0.56%)</title><rect x="829.0" y="949" width="6.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="831.99" y="959.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7,303,001,626 samples, 37.60%)</title><rect x="397.7" y="1109" width="443.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="400.74" y="1119.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>operator delete (2,941,565 samples, 0.02%)</title><rect x="575.4" y="869" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="578.44" y="879.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe.part.0 (2,950,660 samples, 0.02%)</title><rect x="650.2" y="709" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="653.22" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (3,977,729 samples, 0.02%)</title><rect x="501.7" y="837" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="504.71" y="847.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (13,399,495,089 samples, 68.99%)</title><rect x="47.3" y="1205" width="814.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="50.32" y="1215.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (859,467,036 samples, 4.43%)</title><rect x="344.2" y="1109" width="52.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="347.23" y="1119.5" >entry..</text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (2,877,284 samples, 0.01%)</title><rect x="72.6" y="917" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="75.56" y="927.5" ></text>
</g>
<g >
<title>page_counter_cancel (16,953,690 samples, 0.09%)</title><rect x="645.8" y="581" width="1.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="648.82" y="591.5" ></text>
</g>
<g >
<title>ip_output (1,977,405 samples, 0.01%)</title><rect x="1161.6" y="901" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1164.58" y="911.5" ></text>
</g>
<g >
<title>webserver::HttpServer*&amp; std::__get_helper&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; (1,902,908 samples, 0.01%)</title><rect x="924.4" y="1045" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="927.41" y="1055.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (4,910,017 samples, 0.03%)</title><rect x="497.7" y="837" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="500.75" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_put_node (11,833,421 samples, 0.06%)</title><rect x="575.4" y="885" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="578.38" y="895.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (6,787,986 samples, 0.03%)</title><rect x="1122.5" y="421" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1125.50" y="431.5" ></text>
</g>
<g >
<title>__d_alloc (103,540,310 samples, 0.53%)</title><rect x="316.2" y="949" width="6.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="319.19" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_begin (2,038,016 samples, 0.01%)</title><rect x="916.4" y="821" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="919.39" y="831.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,948,924 samples, 0.03%)</title><rect x="76.7" y="965" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="79.69" y="975.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpConnection*&gt;::tuple (1,942,907 samples, 0.01%)</title><rect x="198.4" y="901" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="201.36" y="911.5" ></text>
</g>
<g >
<title>sock_def_readable (301,480,521 samples, 1.55%)</title><rect x="742.9" y="277" width="18.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="745.91" y="287.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (17,423,200 samples, 0.09%)</title><rect x="197.4" y="933" width="1.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="200.42" y="943.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; (4,959,487 samples, 0.03%)</title><rect x="130.4" y="741" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="133.39" y="751.5" ></text>
</g>
<g >
<title>ipv4_dst_check (1,985,191 samples, 0.01%)</title><rect x="726.5" y="197" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="729.50" y="207.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (1,007,665,800 samples, 5.19%)</title><rect x="109.0" y="853" width="61.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="112.03" y="863.5" >void s..</text>
</g>
<g >
<title>clear_pending_if_disabled (8,867,847 samples, 0.05%)</title><rect x="460.4" y="613" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="463.36" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt; (4,031,442 samples, 0.02%)</title><rect x="871.9" y="1253" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="874.91" y="1263.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;void,  (1,960,203 samples, 0.01%)</title><rect x="1012.1" y="965" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1015.06" y="975.5" ></text>
</g>
<g >
<title>sock_poll (13,650,360 samples, 0.07%)</title><rect x="33.1" y="1173" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.05" y="1183.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (6,974,796 samples, 0.04%)</title><rect x="567.2" y="917" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="570.19" y="927.5" ></text>
</g>
<g >
<title>webserver::Channel::run (1,989,850 samples, 0.01%)</title><rect x="13.8" y="1317" width="0.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="16.82" y="1327.5" ></text>
</g>
<g >
<title>_copy_from_iter (4,898,585 samples, 0.03%)</title><rect x="447.3" y="677" width="0.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="450.28" y="687.5" ></text>
</g>
<g >
<title>security_socket_accept (24,367,398 samples, 0.13%)</title><rect x="285.3" y="997" width="1.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="288.28" y="1007.5" ></text>
</g>
<g >
<title>__memcg_slab_free_hook (6,754,847 samples, 0.03%)</title><rect x="652.3" y="661" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="655.29" y="671.5" ></text>
</g>
<g >
<title>x64_sys_call (3,361,456,502 samples, 17.31%)</title><rect x="619.2" y="901" width="204.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="622.21" y="911.5" >x64_sys_call</text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::~_Vector_base (20,652,472 samples, 0.11%)</title><rect x="1017.9" y="981" width="1.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1020.88" y="991.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (19,374,306,767 samples, 99.75%)</title><rect x="12.9" y="1365" width="1177.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="15.87" y="1375.5" >__libc_start_main@@GLIBC_2.34</text>
</g>
<g >
<title>void  (1,910,479 samples, 0.01%)</title><rect x="826.1" y="949" width="0.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="829.12" y="959.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,946,525 samples, 0.01%)</title><rect x="1176.6" y="997" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1179.58" y="1007.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4,875,659 samples, 0.03%)</title><rect x="546.3" y="933" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="549.31" y="943.5" ></text>
</g>
<g >
<title>std::tuple&lt;int&amp;&amp;&gt;::tuple&lt;int, true, true&gt; (15,000,446 samples, 0.08%)</title><rect x="57.6" y="1029" width="0.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="60.55" y="1039.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::toString[abi:cxx11] (472,294,805 samples, 2.43%)</title><rect x="583.8" y="981" width="28.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="586.75" y="991.5" >we..</text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; (2,317,423 samples, 0.01%)</title><rect x="1060.2" y="1077" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1063.17" y="1087.5" ></text>
</g>
<g >
<title>apparmor_inode_free_security (9,955,182 samples, 0.05%)</title><rect x="947.7" y="789" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="950.73" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_write (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="1029" width="0.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1183.50" y="1039.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (6,770,722 samples, 0.03%)</title><rect x="379.4" y="837" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="382.40" y="847.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (25,277,628 samples, 0.13%)</title><rect x="1008.6" y="965" width="1.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1011.58" y="975.5" ></text>
</g>
<g >
<title> (1,814,440 samples, 0.01%)</title><rect x="525.0" y="965" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="528.02" y="975.5" ></text>
</g>
<g >
<title>epoll_ctl (10,675,641 samples, 0.05%)</title><rect x="928.2" y="965" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="931.16" y="975.5" ></text>
</g>
<g >
<title>tcp_send_fin (1,481,930,693 samples, 7.63%)</title><rect x="1084.1" y="997" width="90.0" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1087.10" y="1007.5" >tcp_send_fin</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Rb_tree (2,020,361 samples, 0.01%)</title><rect x="118.7" y="581" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="121.70" y="591.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (2,885,437 samples, 0.01%)</title><rect x="1161.9" y="917" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1164.87" y="927.5" ></text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.2.5 (5,790,995 samples, 0.03%)</title><rect x="488.2" y="853" width="0.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="491.17" y="863.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (4,755,226 samples, 0.02%)</title><rect x="588.0" y="965" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="590.96" y="975.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (3,935,843 samples, 0.02%)</title><rect x="1170.2" y="933" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1173.23" y="943.5" ></text>
</g>
<g >
<title>file_init_path (2,022,818 samples, 0.01%)</title><rect x="328.3" y="981" width="0.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="331.33" y="991.5" ></text>
</g>
<g >
<title>std::operator== (1,995,314 samples, 0.01%)</title><rect x="597.5" y="965" width="0.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="600.47" y="975.5" ></text>
</g>
<g >
<title>ip_finish_output (1,906,972,096 samples, 9.82%)</title><rect x="676.6" y="645" width="115.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="679.58" y="655.5" >ip_finish_output</text>
</g>
<g >
<title>srso_alias_safe_ret (2,969,228 samples, 0.02%)</title><rect x="648.1" y="693" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="651.08" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output2 (1,027,907,043 samples, 5.29%)</title><rect x="1098.4" y="837" width="62.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1101.36" y="847.5" >ip_fin..</text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_base (5,924,444 samples, 0.03%)</title><rect x="38.1" y="1285" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="41.06" y="1295.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (10,813,204 samples, 0.06%)</title><rect x="116.0" y="613" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="119.00" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,014,326 samples, 0.01%)</title><rect x="892.1" y="1109" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="895.10" y="1119.5" ></text>
</g>
<g >
<title>d_alloc_pseudo (109,376,711 samples, 0.56%)</title><rect x="316.1" y="965" width="6.6" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="319.08" y="975.5" ></text>
</g>
<g >
<title>__printf_buffer (3,716,509 samples, 0.02%)</title><rect x="339.4" y="1061" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="342.43" y="1071.5" ></text>
</g>
<g >
<title>inet_ehashfn (3,752,667 samples, 0.02%)</title><rect x="710.9" y="341" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="713.87" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (7,165,955,542 samples, 36.90%)</title><rect x="402.4" y="1029" width="435.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="405.37" y="1039.5" >std::__invoke_result&lt;void </text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,010,338 samples, 0.01%)</title><rect x="539.9" y="869" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="542.94" y="879.5" ></text>
</g>
<g >
<title>__sock_wfree (7,419,691 samples, 0.04%)</title><rect x="731.5" y="85" width="0.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="734.51" y="95.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (4,775,211 samples, 0.02%)</title><rect x="554.1" y="885" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="557.06" y="895.5" ></text>
</g>
<g >
<title>__mod_timer (3,907,736 samples, 0.02%)</title><rect x="805.9" y="677" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="808.89" y="687.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (1,925,778 samples, 0.01%)</title><rect x="938.0" y="869" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="941.00" y="879.5" ></text>
</g>
<g >
<title>webserver::MutexLockGuard::MutexLockGuard (20,324,230 samples, 0.10%)</title><rect x="835.7" y="949" width="1.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="838.66" y="959.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (2,843,433 samples, 0.01%)</title><rect x="849.7" y="1061" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="852.67" y="1071.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::retrieveTo (24,269,956 samples, 0.12%)</title><rect x="542.4" y="965" width="1.5" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="545.38" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,985,063 samples, 0.01%)</title><rect x="853.5" y="1029" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="856.46" y="1039.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,909,139 samples, 0.01%)</title><rect x="886.3" y="1205" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="889.35" y="1215.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt;::_M_head (1,978,993 samples, 0.01%)</title><rect x="923.9" y="1013" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="926.88" y="1023.5" ></text>
</g>
<g >
<title>aa_inet_accept_perm (3,539,055 samples, 0.02%)</title><rect x="285.8" y="981" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="288.83" y="991.5" ></text>
</g>
<g >
<title>vfs_readv (741,463,655 samples, 3.82%)</title><rect x="350.6" y="1029" width="45.0" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="353.59" y="1039.5" >vfs_..</text>
</g>
<g >
<title>std::function&lt;void  (1,836,938,872 samples, 9.46%)</title><rect x="412.4" y="981" width="111.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="415.37" y="991.5" >std::function..</text>
</g>
<g >
<title>__memset (4,979,713 samples, 0.03%)</title><rect x="317.0" y="933" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="320.03" y="943.5" ></text>
</g>
<g >
<title>tcp_recvmsg_locked (8,657,453 samples, 0.04%)</title><rect x="387.2" y="949" width="0.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="390.16" y="959.5" ></text>
</g>
<g >
<title>__strlen_avx2 (7,898,412 samples, 0.04%)</title><rect x="577.9" y="949" width="0.5" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="580.88" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (3,868,475 samples, 0.02%)</title><rect x="587.7" y="965" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="590.72" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (26,514,870 samples, 0.14%)</title><rect x="552.7" y="901" width="1.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="555.74" y="911.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (3,011,009 samples, 0.02%)</title><rect x="1079.4" y="981" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1082.37" y="991.5" ></text>
</g>
<g >
<title>skb_csum_hwoffload_help (3,903,756 samples, 0.02%)</title><rect x="790.3" y="565" width="0.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="793.32" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_write (1,736,971 samples, 0.01%)</title><rect x="436.3" y="789" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="439.26" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (14,679,954 samples, 0.08%)</title><rect x="1020.9" y="1141" width="0.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1023.90" y="1151.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::_Any_data&amp;&gt;::type&amp;&amp; std::move&lt;std::_Any_data&amp;&gt; (3,943,569 samples, 0.02%)</title><rect x="208.5" y="901" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="211.51" y="911.5" ></text>
</g>
<g >
<title>skb_release_data (3,990,437 samples, 0.02%)</title><rect x="783.7" y="485" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="786.74" y="495.5" ></text>
</g>
<g >
<title>netif_skb_features (6,785,187 samples, 0.03%)</title><rect x="735.3" y="85" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="738.27" y="95.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt;::tuple&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; const&amp;, true&gt; (1,960,465 samples, 0.01%)</title><rect x="74.7" y="965" width="0.1" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="77.67" y="975.5" ></text>
</g>
<g >
<title>ksys_write (10,781,732 samples, 0.06%)</title><rect x="339.8" y="965" width="0.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="342.83" y="975.5" ></text>
</g>
<g >
<title>alloc_inode (306,981,736 samples, 1.58%)</title><rect x="287.4" y="965" width="18.6" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="290.39" y="975.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (1,991,434 samples, 0.01%)</title><rect x="923.6" y="1013" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="926.64" y="1023.5" ></text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.2.5 (10,781,732 samples, 0.06%)</title><rect x="339.8" y="1061" width="0.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="342.83" y="1071.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, bool, true&gt; (2,009,158 samples, 0.01%)</title><rect x="504.7" y="853" width="0.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="507.72" y="863.5" ></text>
</g>
<g >
<title>char const* std::__find_if&lt;char const*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (23,603,725 samples, 0.12%)</title><rect x="562.6" y="933" width="1.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="565.59" y="943.5" ></text>
</g>
<g >
<title>_IO_fwrite (12,700,790 samples, 0.07%)</title><rect x="339.8" y="1093" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="342.77" y="1103.5" ></text>
</g>
<g >
<title>sock_def_wakeup (166,118,140 samples, 0.86%)</title><rect x="1131.2" y="501" width="10.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1134.16" y="511.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (7,032,049 samples, 0.04%)</title><rect x="779.5" y="453" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="782.49" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,035,057 samples, 0.02%)</title><rect x="911.6" y="805" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="914.59" y="815.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::operator[] (90,654,038 samples, 0.47%)</title><rect x="863.2" y="1285" width="5.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="866.19" y="1295.5" ></text>
</g>
<g >
<title>evict (191,403,333 samples, 0.99%)</title><rect x="943.1" y="837" width="11.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="946.11" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,599,488 samples, 0.05%)</title><rect x="76.0" y="981" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="78.99" y="991.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (3,774,570 samples, 0.02%)</title><rect x="580.6" y="885" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="583.59" y="895.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,028,482 samples, 0.01%)</title><rect x="665.4" y="773" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="668.37" y="783.5" ></text>
</g>
<g >
<title>inet_sock_destruct (2,911,879 samples, 0.01%)</title><rect x="996.2" y="789" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="999.21" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::_Iter_equals_iter (4,821,769 samples, 0.02%)</title><rect x="535.2" y="917" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="538.20" y="927.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,013,605 samples, 0.01%)</title><rect x="1078.2" y="1013" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1081.19" y="1023.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,015,305 samples, 0.01%)</title><rect x="550.3" y="853" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="553.25" y="863.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (9,819,422 samples, 0.05%)</title><rect x="851.1" y="1061" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="854.14" y="1071.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (1,809,753 samples, 0.01%)</title><rect x="1083.7" y="997" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1086.75" y="1007.5" ></text>
</g>
<g >
<title>webserver::Channel* const&amp; std::forward&lt;webserver::Channel* const&amp;&gt; (4,724,182 samples, 0.02%)</title><rect x="879.2" y="1253" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="882.21" y="1263.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (3,959,832 samples, 0.02%)</title><rect x="1056.7" y="1061" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1059.67" y="1071.5" ></text>
</g>
<g >
<title>__fdget (2,834,884 samples, 0.01%)</title><rect x="188.9" y="853" width="0.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="191.89" y="863.5" ></text>
</g>
<g >
<title>char const* std::__find_if&lt;char const*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (17,576,687 samples, 0.09%)</title><rect x="563.0" y="917" width="1.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="565.95" y="927.5" ></text>
</g>
<g >
<title>__tz_convert (21,326,665 samples, 0.11%)</title><rect x="514.8" y="885" width="1.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="517.81" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::equal_range (4,735,553 samples, 0.02%)</title><rect x="1061.7" y="933" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1064.67" y="943.5" ></text>
</g>
<g >
<title>drain_stock (4,501,872 samples, 0.02%)</title><rect x="304.9" y="837" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="307.88" y="847.5" ></text>
</g>
<g >
<title>xas_load (17,484,179 samples, 0.09%)</title><rect x="301.6" y="869" width="1.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="304.62" y="879.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (9,678,173 samples, 0.05%)</title><rect x="928.2" y="949" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="931.16" y="959.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (28,402,499 samples, 0.15%)</title><rect x="383.0" y="917" width="1.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="386.02" y="927.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::get (6,918,594 samples, 0.04%)</title><rect x="130.3" y="773" width="0.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="133.33" y="783.5" ></text>
</g>
<g >
<title> (14,679,954 samples, 0.08%)</title><rect x="1020.9" y="1125" width="0.9" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1023.90" y="1135.5" ></text>
</g>
<g >
<title>select_idle_core.isra.0 (2,016,477 samples, 0.01%)</title><rect x="469.5" y="453" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="472.46" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (2,973,146 samples, 0.02%)</title><rect x="1057.6" y="1045" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1060.63" y="1055.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (15,746,834 samples, 0.08%)</title><rect x="953.2" y="821" width="0.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="956.18" y="831.5" ></text>
</g>
<g >
<title>operator delete (1,905,606 samples, 0.01%)</title><rect x="423.0" y="869" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="426.01" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1,871,979 samples, 0.01%)</title><rect x="427.7" y="885" width="0.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="430.75" y="895.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl::_Vector_impl (2,926,486 samples, 0.02%)</title><rect x="879.8" y="1253" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="882.80" y="1263.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (49,627,150 samples, 0.26%)</title><rect x="608.2" y="949" width="3.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="611.25" y="959.5" ></text>
</g>
<g >
<title>char const* std::__find_if&lt;char const*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (11,858,749 samples, 0.06%)</title><rect x="545.2" y="917" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="548.18" y="927.5" ></text>
</g>
<g >
<title>operator new (5,690,687 samples, 0.03%)</title><rect x="60.0" y="997" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="62.96" y="1007.5" ></text>
</g>
<g >
<title>webserver::MutexLockGuard::~MutexLockGuard (5,925,355 samples, 0.03%)</title><rect x="1189.3" y="1285" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1192.29" y="1295.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (11,539,840 samples, 0.06%)</title><rect x="596.5" y="901" width="0.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="599.53" y="911.5" ></text>
</g>
<g >
<title>__check_object_size.part.0 (39,579,960 samples, 0.20%)</title><rect x="372.4" y="853" width="2.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="375.41" y="863.5" ></text>
</g>
<g >
<title>__d_instantiate (6,013,122 samples, 0.03%)</title><rect x="323.4" y="949" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="326.37" y="959.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,946,370 samples, 0.01%)</title><rect x="270.1" y="965" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="273.15" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (5,946,718 samples, 0.03%)</title><rect x="569.4" y="965" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="572.36" y="975.5" ></text>
</g>
<g >
<title>mod_memcg_state (13,510,450 samples, 0.07%)</title><rect x="272.2" y="949" width="0.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="275.22" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (12,573,622 samples, 0.06%)</title><rect x="129.4" y="709" width="0.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="132.39" y="719.5" ></text>
</g>
<g >
<title>ep_ptable_queue_proc (50,815,715 samples, 0.26%)</title><rect x="143.1" y="469" width="3.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="146.12" y="479.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInLoopThread (1,968,529 samples, 0.01%)</title><rect x="106.3" y="981" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="109.25" y="991.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp;&amp; std::forward&lt;webserver::ConnBuffer*&gt; (3,885,755 samples, 0.02%)</title><rect x="401.1" y="1013" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="404.14" y="1023.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (3,865,832 samples, 0.02%)</title><rect x="826.7" y="885" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="829.65" y="895.5" ></text>
</g>
<g >
<title>mntput (1,855,432 samples, 0.01%)</title><rect x="993.8" y="741" width="0.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="996.76" y="751.5" ></text>
</g>
<g >
<title>process_output_block (363,929,719 samples, 1.87%)</title><rect x="455.8" y="661" width="22.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="458.75" y="671.5" >p..</text>
</g>
<g >
<title>x64_sys_call (2,907,645 samples, 0.01%)</title><rect x="34.9" y="1269" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="37.88" y="1279.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_noprof (16,453,233 samples, 0.08%)</title><rect x="814.2" y="741" width="1.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="817.24" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (3,031,719 samples, 0.02%)</title><rect x="577.6" y="965" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="580.57" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;void  (84,708,815 samples, 0.44%)</title><rect x="193.3" y="965" width="5.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="196.33" y="975.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (14,478,278 samples, 0.07%)</title><rect x="826.9" y="949" width="0.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="829.89" y="959.5" ></text>
</g>
<g >
<title>release_sock (2,028,099 samples, 0.01%)</title><rect x="1174.5" y="1029" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1177.49" y="1039.5" ></text>
</g>
<g >
<title>try_charge_memcg (71,420,682 samples, 0.37%)</title><rect x="1144.0" y="453" width="4.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1147.05" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, bool, true&gt; (2,017,410 samples, 0.01%)</title><rect x="168.1" y="581" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="171.08" y="591.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (6,787,986 samples, 0.03%)</title><rect x="1122.5" y="437" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1125.50" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (11,735,129 samples, 0.06%)</title><rect x="831.0" y="901" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="834.00" y="911.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (3,924,166 samples, 0.02%)</title><rect x="1041.8" y="853" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1044.76" y="863.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (9,875,988 samples, 0.05%)</title><rect x="1133.4" y="405" width="0.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1136.44" y="415.5" ></text>
</g>
<g >
<title>tcp_write_queue_purge (2,925,732 samples, 0.02%)</title><rect x="656.4" y="677" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="659.39" y="687.5" ></text>
</g>
<g >
<title>sock_setsockopt (3,982,213 samples, 0.02%)</title><rect x="188.7" y="869" width="0.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="191.65" y="879.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,893,515 samples, 0.01%)</title><rect x="929.9" y="997" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="932.95" y="1007.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runPendingFunctions (5,085,718,501 samples, 26.18%)</title><rect x="880.7" y="1301" width="309.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="883.67" y="1311.5" >webserver::EventLoop::runPendingFunctions</text>
</g>
<g >
<title>srso_alias_safe_ret (1,896,228 samples, 0.01%)</title><rect x="190.3" y="949" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="193.30" y="959.5" ></text>
</g>
<g >
<title>tcp_current_mss (12,488,079 samples, 0.06%)</title><rect x="1173.2" y="981" width="0.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1176.19" y="991.5" ></text>
</g>
<g >
<title>char const* std::__find_if&lt;char const*, __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; &gt; (69,213,081 samples, 0.36%)</title><rect x="535.9" y="901" width="4.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="538.86" y="911.5" ></text>
</g>
<g >
<title>webserver::TcpServer*&amp;&amp; std::forward&lt;webserver::TcpServer*&gt; (3,005,521 samples, 0.02%)</title><rect x="922.5" y="997" width="0.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="925.46" y="1007.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (16,535,481 samples, 0.09%)</title><rect x="1185.5" y="1253" width="1.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.50" y="1263.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (4,984,634 samples, 0.03%)</title><rect x="594.1" y="933" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="597.12" y="943.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (1,955,948 samples, 0.01%)</title><rect x="78.9" y="981" width="0.2" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="81.94" y="991.5" ></text>
</g>
<g >
<title>int&amp;&amp; std::forward&lt;int&gt; (2,032,763 samples, 0.01%)</title><rect x="57.7" y="1013" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="60.73" y="1023.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_S_relocate (10,746,535 samples, 0.06%)</title><rect x="216.4" y="917" width="0.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="219.38" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3,010,271 samples, 0.02%)</title><rect x="112.1" y="805" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="115.07" y="815.5" ></text>
</g>
<g >
<title>inet_getname (3,803,590 samples, 0.02%)</title><rect x="228.6" y="869" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="231.57" y="879.5" ></text>
</g>
<g >
<title>std::_Bind_helper&lt;std::__or_&lt;std::is_integral&lt;std::decay&lt;void  (6,475,563 samples, 0.03%)</title><rect x="825.8" y="965" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="828.84" y="975.5" ></text>
</g>
<g >
<title>napi_consume_skb (51,377,790 samples, 0.26%)</title><rect x="780.4" y="485" width="3.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="783.37" y="495.5" ></text>
</g>
<g >
<title>__slab_free (5,967,306 samples, 0.03%)</title><rect x="271.7" y="949" width="0.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="274.68" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_node (1,984,060 samples, 0.01%)</title><rect x="555.9" y="869" width="0.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="558.88" y="879.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,977,179 samples, 0.02%)</title><rect x="1124.0" y="533" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1127.00" y="543.5" ></text>
</g>
<g >
<title>kmem_cache_free (11,454,377 samples, 0.06%)</title><rect x="782.7" y="437" width="0.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="785.68" y="447.5" ></text>
</g>
<g >
<title>__memset (6,753,303 samples, 0.03%)</title><rect x="1087.6" y="949" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1090.57" y="959.5" ></text>
</g>
<g >
<title>mod_timer (30,875,341 samples, 0.16%)</title><rect x="185.8" y="773" width="1.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="188.82" y="783.5" ></text>
</g>
<g >
<title>tcp_established_options (2,028,035 samples, 0.01%)</title><rect x="1163.2" y="933" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1166.23" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::push_back (175,769,169 samples, 0.90%)</title><rect x="869.0" y="1285" width="10.7" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="872.00" y="1295.5" ></text>
</g>
<g >
<title>sock_recvmsg (571,198,170 samples, 2.94%)</title><rect x="354.8" y="981" width="34.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="357.79" y="991.5" >so..</text>
</g>
<g >
<title>std::_Bind&lt;void  (2,958,181 samples, 0.02%)</title><rect x="1014.8" y="885" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1017.83" y="895.5" ></text>
</g>
<g >
<title>ep_poll_callback (4,854,145 samples, 0.02%)</title><rect x="1082.4" y="981" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1085.38" y="991.5" ></text>
</g>
<g >
<title>get_unused_fd_flags (3,845,334 samples, 0.02%)</title><rect x="335.5" y="1029" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="338.51" y="1039.5" ></text>
</g>
<g >
<title>operator new (1,884,169 samples, 0.01%)</title><rect x="123.1" y="629" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="126.14" y="639.5" ></text>
</g>
<g >
<title>tcp_send_delayed_ack (58,274,538 samples, 0.30%)</title><rect x="1120.3" y="517" width="3.6" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1123.34" y="527.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,929,258 samples, 0.01%)</title><rect x="1023.7" y="1077" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1026.73" y="1087.5" ></text>
</g>
<g >
<title>std::_Function_base::_Function_base (1,931,978 samples, 0.01%)</title><rect x="81.9" y="965" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="84.87" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (6,616,099 samples, 0.03%)</title><rect x="609.6" y="869" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="612.62" y="879.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (5,940,295 samples, 0.03%)</title><rect x="522.8" y="917" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="525.76" y="927.5" ></text>
</g>
<g >
<title>check_heap_object (33,746,221 samples, 0.17%)</title><rect x="372.6" y="837" width="2.1" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="375.65" y="847.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (62,787,568 samples, 0.32%)</title><rect x="799.0" y="709" width="3.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="801.99" y="719.5" ></text>
</g>
<g >
<title>__inet_lookup_established (94,791,242 samples, 0.49%)</title><rect x="704.2" y="341" width="5.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="707.19" y="351.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (5,981,426 samples, 0.03%)</title><rect x="480.2" y="677" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="483.23" y="687.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::TcpConnection*, false&gt;::_Head_base&lt;webserver::TcpConnection*&gt; (3,038,197 samples, 0.02%)</title><rect x="191.5" y="901" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="194.47" y="911.5" ></text>
</g>
<g >
<title>__sk_dst_check (5,829,086 samples, 0.03%)</title><rect x="737.0" y="229" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="739.99" y="239.5" ></text>
</g>
<g >
<title>sk_destruct (211,478,354 samples, 1.09%)</title><rect x="984.5" y="805" width="12.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="987.55" y="815.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (6,845,245 samples, 0.04%)</title><rect x="1023.0" y="1077" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1025.96" y="1087.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::clone (1,963,141 samples, 0.01%)</title><rect x="123.3" y="645" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="126.25" y="655.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (1,979,271 samples, 0.01%)</title><rect x="280.2" y="965" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="283.23" y="975.5" ></text>
</g>
<g >
<title>__fdget_pos (4,870,373 samples, 0.03%)</title><rect x="619.5" y="853" width="0.3" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="622.51" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (7,773,021 samples, 0.04%)</title><rect x="602.9" y="917" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="605.92" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (3,991,977 samples, 0.02%)</title><rect x="82.0" y="965" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="84.99" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (5,732,349 samples, 0.03%)</title><rect x="1067.8" y="901" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1070.84" y="911.5" ></text>
</g>
<g >
<title>refill_obj_stock (5,972,013 samples, 0.03%)</title><rect x="939.8" y="821" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="942.82" y="831.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (11,625,010 samples, 0.06%)</title><rect x="1185.8" y="1237" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1188.80" y="1247.5" ></text>
</g>
<g >
<title>release_sock (20,653,428 samples, 0.11%)</title><rect x="277.4" y="965" width="1.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="280.39" y="975.5" ></text>
</g>
<g >
<title>tcp_do_parse_auth_options (1,983,039 samples, 0.01%)</title><rect x="1115.6" y="565" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1118.61" y="575.5" ></text>
</g>
<g >
<title>fd_install (3,888,648 samples, 0.02%)</title><rect x="330.5" y="1013" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="333.46" y="1023.5" ></text>
</g>
<g >
<title>evm_inode_alloc_security (3,953,725 samples, 0.02%)</title><rect x="292.2" y="917" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="295.22" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Rb_tree_impl (4,887,265 samples, 0.03%)</title><rect x="120.0" y="613" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="123.02" y="623.5" ></text>
</g>
<g >
<title>tcp_fin (189,489,874 samples, 0.98%)</title><rect x="1130.2" y="517" width="11.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1133.20" y="527.5" ></text>
</g>
<g >
<title>_int_malloc (8,587,211 samples, 0.04%)</title><rect x="245.8" y="837" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="248.83" y="847.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, true&gt; (5,894,658 samples, 0.03%)</title><rect x="560.3" y="933" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="563.25" y="943.5" ></text>
</g>
<g >
<title>new_slab (9,005,412 samples, 0.05%)</title><rect x="296.7" y="901" width="0.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="299.74" y="911.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,912,063 samples, 0.01%)</title><rect x="239.3" y="885" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="242.26" y="895.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (1,978,445 samples, 0.01%)</title><rect x="405.0" y="997" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="408.02" y="1007.5" ></text>
</g>
<g >
<title>n_tty_write (10,311,489 samples, 0.05%)</title><rect x="1180.6" y="869" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1183.56" y="879.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (5,892,375 samples, 0.03%)</title><rect x="1005.1" y="997" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1008.10" y="1007.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::__str_concat&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (28,667,924 samples, 0.15%)</title><rect x="420.4" y="885" width="1.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="423.38" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (1,967,491 samples, 0.01%)</title><rect x="1058.2" y="1061" width="0.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1061.21" y="1071.5" ></text>
</g>
<g >
<title>malloc (1,829,239 samples, 0.01%)</title><rect x="248.0" y="853" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="250.97" y="863.5" ></text>
</g>
<g >
<title>__memset (7,753,007 samples, 0.04%)</title><rect x="721.9" y="229" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="724.90" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::~unique_ptr (106,137,045 samples, 0.55%)</title><rect x="1010.1" y="1013" width="6.5" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1013.12" y="1023.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,922,851 samples, 0.01%)</title><rect x="339.1" y="1093" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="342.14" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Rb_tree (42,042,410 samples, 0.22%)</title><rect x="574.1" y="933" width="2.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="577.13" y="943.5" ></text>
</g>
<g >
<title>operator new (3,938,199 samples, 0.02%)</title><rect x="208.0" y="853" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="211.02" y="863.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;webserver::TcpConnection&gt;::shared_from_this (5,875,019 samples, 0.03%)</title><rect x="397.0" y="1125" width="0.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="399.97" y="1135.5" ></text>
</g>
<g >
<title>hrtimer_active (9,851,976 samples, 0.05%)</title><rect x="976.1" y="773" width="0.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="979.09" y="783.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (3,975,984 samples, 0.02%)</title><rect x="282.0" y="981" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="284.96" y="991.5" ></text>
</g>
<g >
<title>__alloc_skb (46,046,293 samples, 0.24%)</title><rect x="1086.6" y="981" width="2.8" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1089.62" y="991.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpConnection*&gt;::_M_head (2,006,942 samples, 0.01%)</title><rect x="859.9" y="1157" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="862.86" y="1167.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core.constprop.0 (27,383,299 samples, 0.14%)</title><rect x="690.7" y="421" width="1.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="693.73" y="431.5" ></text>
</g>
<g >
<title>apparmor_socket_recvmsg (24,150,704 samples, 0.12%)</title><rect x="355.8" y="965" width="1.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="358.84" y="975.5" ></text>
</g>
<g >
<title>char* std::fill_n&lt;char*, unsigned long, char&gt; (22,472,614 samples, 0.12%)</title><rect x="210.8" y="869" width="1.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="213.77" y="879.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (7,739,128 samples, 0.04%)</title><rect x="511.1" y="837" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="514.12" y="847.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (6,793,397 samples, 0.03%)</title><rect x="524.0" y="981" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="526.97" y="991.5" ></text>
</g>
<g >
<title>tcp_update_skb_after_send (2,784,574 samples, 0.01%)</title><rect x="794.9" y="709" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="797.88" y="719.5" ></text>
</g>
<g >
<title>void  (2,850,989 samples, 0.01%)</title><rect x="888.7" y="1173" width="0.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="891.71" y="1183.5" ></text>
</g>
<g >
<title>expand_files (3,930,275 samples, 0.02%)</title><rect x="333.0" y="981" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="336.01" y="991.5" ></text>
</g>
<g >
<title>strlen@plt (2,862,490 samples, 0.01%)</title><rect x="71.1" y="949" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="74.08" y="959.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::_S_compare (3,762,519 samples, 0.02%)</title><rect x="565.2" y="901" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="568.21" y="911.5" ></text>
</g>
<g >
<title>__call_rcu_common (4,840,837 samples, 0.02%)</title><rect x="950.9" y="789" width="0.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="953.89" y="799.5" ></text>
</g>
<g >
<title>inet_shutdown (1,610,430,814 samples, 8.29%)</title><rect x="1076.6" y="1029" width="97.8" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="1079.59" y="1039.5" >inet_shutdown</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_begin (2,005,357 samples, 0.01%)</title><rect x="91.7" y="933" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="94.70" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (5,046,626 samples, 0.03%)</title><rect x="759.9" y="245" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="762.90" y="255.5" ></text>
</g>
<g >
<title>apparmor_file_alloc_security (11,895,912 samples, 0.06%)</title><rect x="311.3" y="917" width="0.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="314.31" y="927.5" ></text>
</g>
<g >
<title>__refill_stock (26,251,732 samples, 0.14%)</title><rect x="275.6" y="917" width="1.6" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="278.62" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (6,056,922 samples, 0.03%)</title><rect x="1066.4" y="885" width="0.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1069.36" y="895.5" ></text>
</g>
<g >
<title>tcp_data_ready (4,857,546 samples, 0.03%)</title><rect x="772.2" y="309" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="775.23" y="319.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (18,641,598 samples, 0.10%)</title><rect x="195.9" y="917" width="1.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="198.88" y="927.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, int&amp;&amp;, false&gt;::_Head_base&lt;int&gt; (5,088,121 samples, 0.03%)</title><rect x="57.9" y="1013" width="0.3" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="60.86" y="1023.5" ></text>
</g>
<g >
<title>webserver::Channel::isWritingEnabled (4,023,460 samples, 0.02%)</title><rect x="824.3" y="949" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="827.34" y="959.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (2,914,958 samples, 0.02%)</title><rect x="336.5" y="1093" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="339.52" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_lower_bound (45,300,397 samples, 0.23%)</title><rect x="865.7" y="1237" width="2.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="868.72" y="1247.5" ></text>
</g>
<g >
<title>_copy_to_user (6,791,535 samples, 0.03%)</title><rect x="237.1" y="837" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="240.07" y="847.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (632,342,986 samples, 3.26%)</title><rect x="131.0" y="677" width="38.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="134.04" y="687.5" >voi..</text>
</g>
<g >
<title>malloc (3,933,799 samples, 0.02%)</title><rect x="166.0" y="485" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="169.02" y="495.5" ></text>
</g>
<g >
<title>lock_sock_nested (6,778,957 samples, 0.03%)</title><rect x="1078.3" y="1013" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1081.31" y="1023.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::function&lt;void  (8,716,254 samples, 0.04%)</title><rect x="830.2" y="901" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="833.18" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (1,993,307 samples, 0.01%)</title><rect x="611.0" y="869" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="613.97" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (4,591,397 samples, 0.02%)</title><rect x="829.5" y="933" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="832.47" y="943.5" ></text>
</g>
<g >
<title>tty_buffer_space_avail (2,846,566 samples, 0.01%)</title><rect x="477.7" y="629" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="480.69" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, webserver::Channel*&gt;::_Tuple_impl&lt;webserver::Channel*&amp;&gt; (1,987,064 samples, 0.01%)</title><rect x="128.6" y="725" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="131.55" y="735.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, false&gt;::_Head_base (2,879,380 samples, 0.01%)</title><rect x="897.1" y="1013" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="900.09" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Rb_tree_impl (3,025,508 samples, 0.02%)</title><rect x="116.1" y="581" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="119.12" y="591.5" ></text>
</g>
<g >
<title>void  (1,948,832 samples, 0.01%)</title><rect x="523.7" y="949" width="0.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="526.67" y="959.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (29,243,485 samples, 0.15%)</title><rect x="902.7" y="981" width="1.7" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="905.65" y="991.5" ></text>
</g>
<g >
<title>mntget (2,925,847 samples, 0.02%)</title><rect x="328.5" y="981" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="331.45" y="991.5" ></text>
</g>
<g >
<title>tcp_rcv_state_process (7,341,226 samples, 0.04%)</title><rect x="773.3" y="325" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="776.31" y="335.5" ></text>
</g>
<g >
<title>ip_rcv (1,812,412 samples, 0.01%)</title><rect x="1151.9" y="661" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1154.94" y="671.5" ></text>
</g>
<g >
<title>__raise_softirq_irqoff (3,908,350 samples, 0.02%)</title><rect x="786.4" y="501" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="789.44" y="511.5" ></text>
</g>
<g >
<title>skb_queue_purge_reason (3,781,363 samples, 0.02%)</title><rect x="971.2" y="805" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="974.17" y="815.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (4,855,154 samples, 0.02%)</title><rect x="627.1" y="789" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="630.14" y="799.5" ></text>
</g>
<g >
<title>webserver::EventLoop::updateChannel (542,068,259 samples, 2.79%)</title><rect x="1022.6" y="1109" width="32.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1025.55" y="1119.5" >we..</text>
</g>
<g >
<title>webserver::EpollPoller::updateChannel (1,942,705 samples, 0.01%)</title><rect x="1053.9" y="965" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1056.94" y="975.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (2,027,905 samples, 0.01%)</title><rect x="597.9" y="933" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="600.94" y="943.5" ></text>
</g>
<g >
<title>tcp_wfree (2,926,867 samples, 0.02%)</title><rect x="1158.2" y="757" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1161.19" y="767.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (4,821,163 samples, 0.02%)</title><rect x="823.7" y="933" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="826.71" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (3,754,627 samples, 0.02%)</title><rect x="609.8" y="853" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="612.80" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_valptr (2,770,085 samples, 0.01%)</title><rect x="917.6" y="773" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="920.56" y="783.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (7,875,144 samples, 0.04%)</title><rect x="1059.6" y="1077" width="0.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1062.63" y="1087.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (5,847,775 samples, 0.03%)</title><rect x="608.6" y="917" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="611.61" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_head (2,967,438 samples, 0.02%)</title><rect x="1015.7" y="949" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1018.72" y="959.5" ></text>
</g>
<g >
<title>security_file_alloc (1,883,246 samples, 0.01%)</title><rect x="316.0" y="949" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="318.96" y="959.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::connectEstablished (1,883,363 samples, 0.01%)</title><rect x="170.2" y="853" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="173.25" y="863.5" ></text>
</g>
<g >
<title>[[vdso]] (2,875,024 samples, 0.01%)</title><rect x="342.4" y="1125" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="345.39" y="1135.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (3,004,184 samples, 0.02%)</title><rect x="860.2" y="1173" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="863.16" y="1183.5" ></text>
</g>
<g >
<title>webserver::sockets::getHostAddr (6,948,419 samples, 0.04%)</title><rect x="230.0" y="949" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="232.99" y="959.5" ></text>
</g>
<g >
<title>dput (343,025,962 samples, 1.77%)</title><rect x="936.2" y="901" width="20.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="939.17" y="911.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::Poller*, false&gt;::_M_head (1,974,580 samples, 0.01%)</title><rect x="169.2" y="613" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="172.22" y="623.5" ></text>
</g>
<g >
<title>__wake_up (149,328,381 samples, 0.77%)</title><rect x="1132.0" y="485" width="9.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1134.99" y="495.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (3,744,977 samples, 0.02%)</title><rect x="282.2" y="981" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="285.21" y="991.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::_M_head (1,889,090 samples, 0.01%)</title><rect x="171.0" y="837" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="173.96" y="847.5" ></text>
</g>
<g >
<title>webserver::MutexLockGuard::MutexLockGuard (14,600,077 samples, 0.08%)</title><rect x="854.9" y="1093" width="0.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="857.88" y="1103.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::tuple&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;, true&gt; (23,343,112 samples, 0.12%)</title><rect x="903.0" y="965" width="1.4" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="906.01" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_key (7,614,156 samples, 0.04%)</title><rect x="917.3" y="789" width="0.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="920.32" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (13,868,202 samples, 0.07%)</title><rect x="494.3" y="853" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="497.32" y="863.5" ></text>
</g>
<g >
<title>mod_timer (1,968,781 samples, 0.01%)</title><rect x="1166.7" y="901" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1169.69" y="911.5" ></text>
</g>
<g >
<title>idr_find (1,997,080 samples, 0.01%)</title><rect x="475.5" y="581" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="478.54" y="591.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::setHeaderValue (1,989,931 samples, 0.01%)</title><rect x="523.5" y="917" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="526.49" y="927.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (6,895,047 samples, 0.04%)</title><rect x="475.7" y="581" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="478.66" y="591.5" ></text>
</g>
<g >
<title>__netif_receive_skb (4,058,329 samples, 0.02%)</title><rect x="686.7" y="469" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="689.72" y="479.5" ></text>
</g>
<g >
<title>tcp_data_queue (520,630,996 samples, 2.68%)</title><rect x="740.6" y="309" width="31.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="743.60" y="319.5" >tc..</text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,923,414 samples, 0.02%)</title><rect x="203.1" y="869" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="206.11" y="879.5" ></text>
</g>
<g >
<title>tcp_check_space (24,820,695 samples, 0.13%)</title><rect x="714.7" y="325" width="1.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="717.75" y="335.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (15,519,671 samples, 0.08%)</title><rect x="581.0" y="917" width="0.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="583.99" y="927.5" ></text>
</g>
<g >
<title>_IO_fwrite (29,643,248 samples, 0.15%)</title><rect x="487.6" y="869" width="1.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="490.64" y="879.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (3,778,738 samples, 0.02%)</title><rect x="855.3" y="1061" width="0.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="858.35" y="1071.5" ></text>
</g>
<g >
<title>_int_free (4,689,331 samples, 0.02%)</title><rect x="1009.6" y="917" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1012.65" y="927.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.0 (95,852,469 samples, 0.49%)</title><rect x="27.0" y="1173" width="5.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="30.04" y="1183.5" ></text>
</g>
<g >
<title>__cond_resched (1,891,800 samples, 0.01%)</title><rect x="933.4" y="917" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="936.40" y="927.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,811,954 samples, 0.01%)</title><rect x="504.3" y="773" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="507.26" y="783.5" ></text>
</g>
<g >
<title>tcp_poll (26,284,001 samples, 0.14%)</title><rect x="30.7" y="1141" width="1.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="33.74" y="1151.5" ></text>
</g>
<g >
<title>tcp_v4_destroy_sock (2,829,096 samples, 0.01%)</title><rect x="773.6" y="277" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="776.58" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (2,833,521 samples, 0.01%)</title><rect x="307.9" y="965" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="310.92" y="975.5" ></text>
</g>
<g >
<title>ip_rcv (1,420,903,290 samples, 7.32%)</title><rect x="692.4" y="421" width="86.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="695.39" y="431.5" >ip_rcv</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (2,828,918 samples, 0.01%)</title><rect x="596.5" y="869" width="0.2" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="599.53" y="879.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (4,882,997,863 samples, 25.14%)</title><rect x="886.5" y="1253" width="296.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="889.53" y="1263.5" >std::enable_if&lt;is_invocable_r_v&lt;void, s..</text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;*&amp; std::forward&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;*&amp;&gt; (1,908,124 samples, 0.01%)</title><rect x="163.6" y="565" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="166.61" y="575.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (2,032,813 samples, 0.01%)</title><rect x="279.6" y="949" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="282.61" y="959.5" ></text>
</g>
<g >
<title>char const* std::find&lt;char const*, char&gt; (17,664,786 samples, 0.09%)</title><rect x="544.8" y="949" width="1.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="547.83" y="959.5" ></text>
</g>
<g >
<title>select_idle_sibling (57,156,623 samples, 0.29%)</title><rect x="751.7" y="149" width="3.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="754.69" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (8,018,745 samples, 0.04%)</title><rect x="866.7" y="1205" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="869.73" y="1215.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::__uniq_ptr_impl (18,553,939 samples, 0.10%)</title><rect x="199.4" y="933" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="202.41" y="943.5" ></text>
</g>
<g >
<title>void std::__detail::__to_chars_10_impl&lt;unsigned long&gt; (10,937,053 samples, 0.06%)</title><rect x="590.4" y="949" width="0.6" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="593.38" y="959.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,873,480 samples, 0.01%)</title><rect x="1024.4" y="1061" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1027.38" y="1071.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (4,875,376,962 samples, 25.10%)</title><rect x="887.0" y="1221" width="296.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="889.99" y="1231.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,851,996 samples, 0.02%)</title><rect x="831.4" y="853" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="834.42" y="863.5" ></text>
</g>
<g >
<title>__sk_mem_schedule (154,674,443 samples, 0.80%)</title><rect x="762.8" y="277" width="9.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="765.84" y="287.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__shared_ptr&lt;webserver::TcpConnection,  (23,398,287 samples, 0.12%)</title><rect x="102.8" y="949" width="1.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="105.76" y="959.5" ></text>
</g>
<g >
<title>consume_stock (4,836,738 samples, 0.02%)</title><rect x="819.5" y="709" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="822.46" y="719.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,949,096 samples, 0.02%)</title><rect x="906.0" y="933" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="908.98" y="943.5" ></text>
</g>
<g >
<title>drain_stock (6,860,766 samples, 0.04%)</title><rect x="1148.0" y="405" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1150.97" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;webserver::TcpConnection*,  (6,677,193 samples, 0.03%)</title><rect x="927.5" y="1029" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="930.45" y="1039.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,023,900 samples, 0.02%)</title><rect x="81.6" y="965" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="84.63" y="975.5" ></text>
</g>
<g >
<title>tty_update_time (5,616,572 samples, 0.03%)</title><rect x="482.9" y="693" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="485.92" y="703.5" ></text>
</g>
<g >
<title>lock_sock_nested (6,739,699 samples, 0.03%)</title><rect x="235.6" y="837" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="238.61" y="847.5" ></text>
</g>
<g >
<title>webserver::Channel::setReadableCallback (24,657,035 samples, 0.13%)</title><rect x="206.1" y="965" width="1.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="209.07" y="975.5" ></text>
</g>
<g >
<title>__mod_timer (27,932,340 samples, 0.14%)</title><rect x="185.8" y="757" width="1.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="188.82" y="767.5" ></text>
</g>
<g >
<title>tcp_done (3,884,935 samples, 0.02%)</title><rect x="773.5" y="309" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="776.52" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (1,971,291 samples, 0.01%)</title><rect x="499.8" y="837" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="502.85" y="847.5" ></text>
</g>
<g >
<title>__check_object_size.part.0 (20,356,038 samples, 0.10%)</title><rect x="663.5" y="741" width="1.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="666.48" y="751.5" ></text>
</g>
<g >
<title>webserver::HttpParser::HttpParser (22,568,684 samples, 0.12%)</title><rect x="119.3" y="677" width="1.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="122.30" y="687.5" ></text>
</g>
<g >
<title>security_file_alloc (43,204,560 samples, 0.22%)</title><rect x="310.2" y="933" width="2.7" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="313.25" y="943.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,943,875 samples, 0.02%)</title><rect x="822.8" y="821" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="825.79" y="831.5" ></text>
</g>
<g >
<title>__mod_memcg_state (16,661,611 samples, 0.09%)</title><rect x="816.5" y="709" width="1.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="819.50" y="719.5" ></text>
</g>
<g >
<title>webserver::sockets::shutDownWrite (34,432,065 samples, 0.18%)</title><rect x="1179.2" y="1125" width="2.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1182.16" y="1135.5" ></text>
</g>
<g >
<title>webserver::Channel::getFd (4,878,081 samples, 0.03%)</title><rect x="1053.0" y="933" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1055.99" y="943.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (8,613,151 samples, 0.04%)</title><rect x="409.3" y="981" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="412.29" y="991.5" ></text>
</g>
<g >
<title>sched_clock_cpu (7,963,810 samples, 0.04%)</title><rect x="472.5" y="501" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="475.50" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (2,926,294 samples, 0.02%)</title><rect x="1063.4" y="885" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1066.42" y="895.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (2,013,029 samples, 0.01%)</title><rect x="104.2" y="965" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="107.24" y="975.5" ></text>
</g>
<g >
<title>webserver::EventThreadPool* const&amp; std::__get_helper&lt;0ul, webserver::EventThreadPool*, std::default_delete&lt;webserver::EventThreadPool&gt; &gt; (1,992,333 samples, 0.01%)</title><rect x="105.2" y="901" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="108.20" y="911.5" ></text>
</g>
<g >
<title>inet_csk_accept (5,815,666 samples, 0.03%)</title><rect x="281.2" y="997" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="284.19" y="1007.5" ></text>
</g>
<g >
<title>__sys_accept4 (1,319,586,990 samples, 6.79%)</title><rect x="255.2" y="1029" width="80.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="258.16" y="1039.5" >__sys_acc..</text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (2,960,528 samples, 0.02%)</title><rect x="835.1" y="885" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="838.12" y="895.5" ></text>
</g>
<g >
<title>malloc (2,858,980 samples, 0.01%)</title><rect x="873.1" y="1205" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="876.05" y="1215.5" ></text>
</g>
<g >
<title>tcp_options_write (2,707,510 samples, 0.01%)</title><rect x="1168.5" y="949" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1171.47" y="959.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::HttpResponse (3,887,589 samples, 0.02%)</title><rect x="583.5" y="981" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="586.51" y="991.5" ></text>
</g>
<g >
<title>__refill_stock (4,923,440 samples, 0.03%)</title><rect x="315.5" y="869" width="0.3" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="318.55" y="879.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_M_deallocate (1,876,615 samples, 0.01%)</title><rect x="869.6" y="1269" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="872.59" y="1279.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,900,676 samples, 0.01%)</title><rect x="925.6" y="1109" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="928.61" y="1119.5" ></text>
</g>
<g >
<title>tcp_send_ack (297,797,865 samples, 1.53%)</title><rect x="720.2" y="293" width="18.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="723.20" y="303.5" ></text>
</g>
<g >
<title>task_tick_fair (2,000,143 samples, 0.01%)</title><rect x="476.2" y="469" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="479.18" y="479.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (61,558,380 samples, 0.32%)</title><rect x="486.5" y="885" width="3.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="489.45" y="895.5" ></text>
</g>
<g >
<title>security_inode_free (4,893,212 samples, 0.03%)</title><rect x="951.6" y="805" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="954.60" y="815.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (1,918,185 samples, 0.01%)</title><rect x="1149.7" y="533" width="0.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1152.68" y="543.5" ></text>
</g>
<g >
<title>new_inode_pseudo (1,844,955 samples, 0.01%)</title><rect x="285.2" y="997" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="288.17" y="1007.5" ></text>
</g>
<g >
<title>__alloc_skb (45,417,284 samples, 0.23%)</title><rect x="812.5" y="757" width="2.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="815.48" y="767.5" ></text>
</g>
<g >
<title>__ip_local_out (3,766,424 samples, 0.02%)</title><rect x="674.3" y="677" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="677.26" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (8,595,342 samples, 0.04%)</title><rect x="198.7" y="965" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="201.71" y="975.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5,049,718 samples, 0.03%)</title><rect x="42.8" y="1237" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="45.76" y="1247.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10,666,566 samples, 0.05%)</title><rect x="211.4" y="821" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="214.43" y="831.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::handleRead (8,534,272,661 samples, 43.94%)</title><rect x="340.6" y="1141" width="518.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="343.60" y="1151.5" >webserver::TcpConnection::handleRead</text>
</g>
<g >
<title>lock_timer_base (12,124,094 samples, 0.06%)</title><rect x="801.0" y="629" width="0.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="804.01" y="639.5" ></text>
</g>
<g >
<title>webserver::Channel::getFd (1,956,923 samples, 0.01%)</title><rect x="153.6" y="629" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="156.61" y="639.5" ></text>
</g>
<g >
<title>webserver::Channel*&amp; std::__get_helper&lt;1ul, webserver::Channel*&gt; (3,964,868 samples, 0.02%)</title><rect x="1054.9" y="981" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1057.89" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (14,663,915 samples, 0.08%)</title><rect x="423.7" y="869" width="0.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="426.72" y="879.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_deallocate (2,804,249 samples, 0.01%)</title><rect x="214.0" y="917" width="0.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="216.95" y="927.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::is_move_constructible&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::is_move_assignable&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::value, void&gt;::type std::swap&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (3,009,969 samples, 0.02%)</title><rect x="573.1" y="933" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="576.07" y="943.5" ></text>
</g>
<g >
<title>refill_stock (47,976,876 samples, 0.25%)</title><rect x="644.1" y="645" width="2.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="647.10" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (2,761,958 samples, 0.01%)</title><rect x="603.2" y="901" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="606.23" y="911.5" ></text>
</g>
<g >
<title>[unknown] (10,726,293 samples, 0.06%)</title><rect x="10.8" y="1365" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.77" y="1375.5" ></text>
</g>
<g >
<title>__sk_dst_check (4,877,413 samples, 0.03%)</title><rect x="674.5" y="677" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="677.49" y="687.5" ></text>
</g>
<g >
<title>char* std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_data_ptr&lt;char&gt; (3,925,909 samples, 0.02%)</title><rect x="543.1" y="917" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="546.10" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_node (12,478,682 samples, 0.06%)</title><rect x="502.1" y="805" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="505.06" y="815.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~map (4,961,721 samples, 0.03%)</title><rect x="1006.7" y="933" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1009.70" y="943.5" ></text>
</g>
<g >
<title>sock_rfree (100,369,494 samples, 0.52%)</title><rect x="376.8" y="917" width="6.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="379.76" y="927.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (9,608,182 samples, 0.05%)</title><rect x="485.8" y="885" width="0.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="488.81" y="895.5" ></text>
</g>
<g >
<title>_int_free (2,906,174 samples, 0.01%)</title><rect x="39.5" y="1221" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="42.49" y="1231.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr&lt;webserver::TcpConnection, void&gt; (4,858,119 samples, 0.03%)</title><rect x="397.0" y="1109" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="400.03" y="1119.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (2,943,652 samples, 0.02%)</title><rect x="1108.0" y="613" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1110.96" y="623.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (10,781,732 samples, 0.06%)</title><rect x="339.8" y="917" width="0.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="342.83" y="927.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::get (3,332,873 samples, 0.02%)</title><rect x="1060.1" y="1109" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1063.11" y="1119.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;bool  (2,016,210 samples, 0.01%)</title><rect x="246.5" y="933" width="0.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="249.47" y="943.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::operator (2,928,259 samples, 0.02%)</title><rect x="93.1" y="933" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="96.08" y="943.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;char*&gt; (2,910,263 samples, 0.01%)</title><rect x="1019.4" y="997" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1022.41" y="1007.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::max&lt;unsigned long&gt; (3,825,219 samples, 0.02%)</title><rect x="854.4" y="1045" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="857.35" y="1055.5" ></text>
</g>
<g >
<title>__mod_memcg_state (1,948,679 samples, 0.01%)</title><rect x="1171.6" y="949" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1174.63" y="959.5" ></text>
</g>
<g >
<title>mod_memcg_state (1,958,751 samples, 0.01%)</title><rect x="322.0" y="885" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="325.00" y="895.5" ></text>
</g>
<g >
<title>fsnotify_destroy_marks (5,019,155 samples, 0.03%)</title><rect x="948.3" y="789" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="951.34" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header (2,868,246 samples, 0.01%)</title><rect x="120.1" y="597" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="123.14" y="607.5" ></text>
</g>
<g >
<title>malloc (2,931,650 samples, 0.02%)</title><rect x="71.5" y="981" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="74.50" y="991.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (19,327,308 samples, 0.10%)</title><rect x="907.4" y="949" width="1.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="910.41" y="959.5" ></text>
</g>
<g >
<title>std::type_info::operator== (8,948,115 samples, 0.05%)</title><rect x="526.8" y="917" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="529.81" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (46,287,279 samples, 0.24%)</title><rect x="82.2" y="965" width="2.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="85.23" y="975.5" ></text>
</g>
<g >
<title>malloc (1,896,956 samples, 0.01%)</title><rect x="885.8" y="1205" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="888.82" y="1215.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_noprof (50,887,005 samples, 0.26%)</title><rect x="312.9" y="949" width="3.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="315.87" y="959.5" ></text>
</g>
<g >
<title>operator new (1,923,490 samples, 0.01%)</title><rect x="97.0" y="869" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="99.95" y="879.5" ></text>
</g>
<g >
<title>release_sock (481,682,976 samples, 2.48%)</title><rect x="628.1" y="789" width="29.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="631.15" y="799.5" >re..</text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::erase (144,121,941 samples, 0.74%)</title><rect x="1061.6" y="949" width="8.7" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1064.56" y="959.5" ></text>
</g>
<g >
<title>ip_finish_output2 (1,822,430 samples, 0.01%)</title><rect x="792.2" y="629" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="795.21" y="639.5" ></text>
</g>
<g >
<title>[unknown] (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1269" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.89" y="1279.5" ></text>
</g>
<g >
<title>tcp_established_options (17,585,620 samples, 0.09%)</title><rect x="810.3" y="741" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="813.27" y="751.5" ></text>
</g>
<g >
<title>__refill_stock (44,013,302 samples, 0.23%)</title><rect x="644.2" y="629" width="2.7" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="647.22" y="639.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::poll (2,871,917 samples, 0.01%)</title><rect x="13.9" y="1317" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="16.94" y="1327.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (4,892,619 samples, 0.03%)</title><rect x="425.3" y="885" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="428.33" y="895.5" ></text>
</g>
<g >
<title>__fdget (1,831,547 samples, 0.01%)</title><rect x="133.6" y="549" width="0.1" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="136.57" y="559.5" ></text>
</g>
<g >
<title>_raw_read_lock_irqsave (1,766,998 samples, 0.01%)</title><rect x="1082.1" y="949" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1085.10" y="959.5" ></text>
</g>
<g >
<title>tcp_inbound_hash (9,025,049 samples, 0.05%)</title><rect x="713.7" y="341" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="716.68" y="351.5" ></text>
</g>
<g >
<title>obj_cgroup_uncharge_pages (3,845,417 samples, 0.02%)</title><rect x="959.6" y="853" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="962.61" y="863.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,917,046 samples, 0.02%)</title><rect x="84.9" y="789" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="87.87" y="799.5" ></text>
</g>
<g >
<title>tcp_ao_destroy_sock (5,691,607 samples, 0.03%)</title><rect x="972.0" y="805" width="0.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="975.00" y="815.5" ></text>
</g>
<g >
<title>webserver::Channel*&amp; std::__get_helper&lt;1ul, webserver::Channel*&gt; (5,763,101 samples, 0.03%)</title><rect x="1054.4" y="965" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1057.39" y="975.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (2,974,917 samples, 0.02%)</title><rect x="954.9" y="837" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="957.86" y="847.5" ></text>
</g>
<g >
<title>tcp_v4_fill_cb (5,816,809 samples, 0.03%)</title><rect x="774.2" y="341" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="777.17" y="351.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (7,289,482,183 samples, 37.53%)</title><rect x="398.2" y="1093" width="442.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="401.21" y="1103.5" >std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void </text>
</g>
<g >
<title>up_write (3,952,522 samples, 0.02%)</title><rect x="998.6" y="885" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1001.58" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (3,937,521 samples, 0.02%)</title><rect x="164.7" y="565" width="0.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="167.74" y="575.5" ></text>
</g>
<g >
<title>__destroy_inode (2,971,546 samples, 0.02%)</title><rect x="944.0" y="821" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="947.00" y="831.5" ></text>
</g>
<g >
<title>__wake_up_common (127,519,125 samples, 0.66%)</title><rect x="1132.4" y="469" width="7.7" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1135.35" y="479.5" ></text>
</g>
<g >
<title>webserver::Acceptor*&amp; std::_Mu&lt;webserver::Acceptor*, false, false&gt;::operator (2,030,203 samples, 0.01%)</title><rect x="860.3" y="1173" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="863.34" y="1183.5" ></text>
</g>
<g >
<title>__GI___snprintf (3,716,509 samples, 0.02%)</title><rect x="339.4" y="1093" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="342.43" y="1103.5" ></text>
</g>
<g >
<title>webserver::HttpServer*&amp; std::__get_helper&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; (3,945,303 samples, 0.02%)</title><rect x="124.5" y="709" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="127.50" y="719.5" ></text>
</g>
<g >
<title>std::ostream::put (2,981,926 samples, 0.02%)</title><rect x="492.2" y="901" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="495.19" y="911.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (4,019,686 samples, 0.02%)</title><rect x="220.8" y="901" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="223.80" y="911.5" ></text>
</g>
<g >
<title>ip_queue_xmit (200,624,208 samples, 1.03%)</title><rect x="725.3" y="245" width="12.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="728.32" y="255.5" ></text>
</g>
<g >
<title>skb_rbtree_purge (3,726,494 samples, 0.02%)</title><rect x="979.2" y="789" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="982.19" y="799.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (17,486,219 samples, 0.09%)</title><rect x="129.1" y="757" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="132.09" y="767.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (5,848,838 samples, 0.03%)</title><rect x="247.8" y="917" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="250.84" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (13,913,936 samples, 0.07%)</title><rect x="883.6" y="1221" width="0.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="886.60" y="1231.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (5,895,157 samples, 0.03%)</title><rect x="1000.7" y="917" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1003.66" y="927.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::function&lt;void  (26,218,299 samples, 0.13%)</title><rect x="1187.5" y="1253" width="1.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1190.52" y="1263.5" ></text>
</g>
<g >
<title>tcp_chrono_stop (2,960,182 samples, 0.02%)</title><rect x="649.2" y="693" width="0.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="652.21" y="703.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::deallocate (12,753,637 samples, 0.07%)</title><rect x="1018.2" y="949" width="0.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1021.18" y="959.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (4,723,270 samples, 0.02%)</title><rect x="78.3" y="965" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="81.32" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_right (2,028,595 samples, 0.01%)</title><rect x="1050.9" y="885" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1053.95" y="895.5" ></text>
</g>
<g >
<title>tcp_do_parse_auth_options (5,986,983 samples, 0.03%)</title><rect x="713.9" y="325" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="716.86" y="335.5" ></text>
</g>
<g >
<title>__inode_wait_for_writeback (2,866,715 samples, 0.01%)</title><rect x="944.2" y="821" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="947.18" y="831.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (634,311,025 samples, 3.27%)</title><rect x="130.9" y="741" width="38.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="133.92" y="751.5" >std..</text>
</g>
<g >
<title>__sys_setsockopt (1,951,793 samples, 0.01%)</title><rect x="178.7" y="901" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="181.74" y="911.5" ></text>
</g>
<g >
<title>webserver::Acceptor*&amp; std::__get_helper&lt;0ul, webserver::Acceptor*&gt; (3,024,725 samples, 0.02%)</title><rect x="859.7" y="1157" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="862.67" y="1167.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::operator++ (1,990,901 samples, 0.01%)</title><rect x="916.0" y="821" width="0.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="918.97" y="831.5" ></text>
</g>
<g >
<title>bool std::operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4,014,712 samples, 0.02%)</title><rect x="403.4" y="997" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="406.35" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node::operator (50,772,588 samples, 0.26%)</title><rect x="555.8" y="885" width="3.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="558.76" y="895.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_noprof (14,747,638 samples, 0.08%)</title><rect x="1088.5" y="965" width="0.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1091.52" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt;::_Iter_equals_val (1,912,195 samples, 0.01%)</title><rect x="562.5" y="917" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="565.47" y="927.5" ></text>
</g>
<g >
<title>map_id_range_down (1,947,716 samples, 0.01%)</title><rect x="290.9" y="933" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="293.94" y="943.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt;, false&gt;::_Head_base&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (8,991,117 samples, 0.05%)</title><rect x="903.6" y="917" width="0.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="906.58" y="927.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,037,112 samples, 0.01%)</title><rect x="396.0" y="1093" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="398.99" y="1103.5" ></text>
</g>
<g >
<title>_int_free (5,835,889 samples, 0.03%)</title><rect x="1188.8" y="1125" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1191.76" y="1135.5" ></text>
</g>
<g >
<title>sk_free (249,678,248 samples, 1.29%)</title><rect x="982.5" y="837" width="15.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="985.46" y="847.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; const&amp;, void&gt; (3,394,874 samples, 0.02%)</title><rect x="74.2" y="933" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="77.17" y="943.5" ></text>
</g>
<g >
<title>_copy_from_user (5,918,710 samples, 0.03%)</title><rect x="133.7" y="549" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="136.68" y="559.5" ></text>
</g>
<g >
<title>__tzfile_compute (1,986,985 samples, 0.01%)</title><rect x="516.1" y="885" width="0.1" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="519.11" y="895.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::readerBegin (7,870,605 samples, 0.04%)</title><rect x="542.9" y="949" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="545.86" y="959.5" ></text>
</g>
<g >
<title>drain_stock (35,412,643 samples, 0.18%)</title><rect x="769.3" y="181" width="2.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="772.27" y="191.5" ></text>
</g>
<g >
<title>d_instantiate (5,982,324 samples, 0.03%)</title><rect x="328.0" y="981" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="330.97" y="991.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (2,956,114 samples, 0.02%)</title><rect x="661.9" y="773" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="664.94" y="783.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (12,753,637 samples, 0.07%)</title><rect x="1018.2" y="933" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1021.18" y="943.5" ></text>
</g>
<g >
<title>webserver::Channel::setCloseCallback (53,041,117 samples, 0.27%)</title><rect x="201.7" y="965" width="3.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="204.71" y="975.5" ></text>
</g>
<g >
<title>__copy_skb_header (4,925,329 samples, 0.03%)</title><rect x="794.2" y="677" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="797.22" y="687.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,938,128 samples, 0.02%)</title><rect x="482.4" y="693" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="485.38" y="703.5" ></text>
</g>
<g >
<title>ip_rcv_core (5,921,370 samples, 0.03%)</title><rect x="1150.9" y="629" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1153.94" y="639.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;void&gt;::~weak_ptr (7,859,759 samples, 0.04%)</title><rect x="1015.1" y="965" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1018.07" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,662,321 samples, 0.02%)</title><rect x="41.9" y="1285" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="44.94" y="1295.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_const_iterator (5,791,707 samples, 0.03%)</title><rect x="1070.0" y="933" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1072.96" y="943.5" ></text>
</g>
<g >
<title>aa_inet_sock_perm (17,476,324 samples, 0.09%)</title><rect x="227.0" y="821" width="1.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="229.98" y="831.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (1,942,209 samples, 0.01%)</title><rect x="467.7" y="501" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="470.71" y="511.5" ></text>
</g>
<g >
<title>webserver::TimeStamp&amp; std::__get_helper&lt;2ul, webserver::TimeStamp&amp;&amp;&gt; (1,976,431 samples, 0.01%)</title><rect x="839.1" y="997" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="842.07" y="1007.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,781,732 samples, 0.06%)</title><rect x="339.8" y="1029" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="342.83" y="1039.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (13,599,703 samples, 0.07%)</title><rect x="410.8" y="933" width="0.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="413.82" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;epoll_event, std::allocator&lt;epoll_event&gt; &gt;::size (2,009,617 samples, 0.01%)</title><rect x="37.2" y="1301" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="40.22" y="1311.5" ></text>
</g>
<g >
<title>sk_forced_mem_schedule (2,988,329 samples, 0.02%)</title><rect x="1083.9" y="997" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1086.86" y="1007.5" ></text>
</g>
<g >
<title>kfree_skbmem (5,998,162 samples, 0.03%)</title><rect x="1152.5" y="693" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1155.46" y="703.5" ></text>
</g>
<g >
<title>__memset (1,831,267 samples, 0.01%)</title><rect x="813.7" y="725" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="816.71" y="735.5" ></text>
</g>
<g >
<title>_IO_fflush (10,632,674 samples, 0.05%)</title><rect x="491.5" y="885" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="494.49" y="895.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3,968,838 samples, 0.02%)</title><rect x="398.0" y="1093" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="400.97" y="1103.5" ></text>
</g>
<g >
<title>inet_sk_rx_dst_set (12,671,019 samples, 0.07%)</title><rect x="738.4" y="309" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="741.35" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (18,866,788 samples, 0.10%)</title><rect x="594.7" y="933" width="1.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="597.72" y="943.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (4,109,171 samples, 0.02%)</title><rect x="557.1" y="853" width="0.2" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="560.09" y="863.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_M_deallocate (12,722,445 samples, 0.07%)</title><rect x="873.2" y="1253" width="0.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="876.23" y="1263.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_mbegin (4,838,835 samples, 0.02%)</title><rect x="1048.4" y="885" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1051.44" y="895.5" ></text>
</g>
<g >
<title>__tcp_send_ack.part.0 (291,923,335 samples, 1.50%)</title><rect x="720.3" y="277" width="17.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="723.26" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (1,801,741 samples, 0.01%)</title><rect x="829.6" y="917" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="832.64" y="927.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (1,987,662 samples, 0.01%)</title><rect x="18.7" y="1253" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="21.68" y="1263.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1,763,616 samples, 0.01%)</title><rect x="517.1" y="869" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="520.06" y="879.5" ></text>
</g>
<g >
<title>eth_type_trans (11,695,610 samples, 0.06%)</title><rect x="787.7" y="533" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="790.71" y="543.5" ></text>
</g>
<g >
<title>sk_forced_mem_schedule (5,800,022 samples, 0.03%)</title><rect x="662.2" y="773" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="665.24" y="783.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (33,951,743 samples, 0.17%)</title><rect x="1012.9" y="917" width="2.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1015.94" y="927.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_S_max_size (4,908,951 samples, 0.03%)</title><rect x="216.1" y="917" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="219.08" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (3,961,092 samples, 0.02%)</title><rect x="1183.3" y="1253" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1186.31" y="1263.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,887,716 samples, 0.03%)</title><rect x="50.9" y="1141" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="53.85" y="1151.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (7,934,734 samples, 0.04%)</title><rect x="575.6" y="853" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="578.62" y="863.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;::_M_head (3,651,225 samples, 0.02%)</title><rect x="838.6" y="981" width="0.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="841.61" y="991.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt; (2,826,595 samples, 0.01%)</title><rect x="15.8" y="1301" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="18.85" y="1311.5" ></text>
</g>
<g >
<title>std::function&lt;void  (21,845,383 samples, 0.11%)</title><rect x="206.2" y="949" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="209.18" y="959.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;webserver::TcpConnection&gt;::~weak_ptr (6,857,050 samples, 0.04%)</title><rect x="1007.7" y="997" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1010.72" y="1007.5" ></text>
</g>
<g >
<title>update_process_times (2,000,143 samples, 0.01%)</title><rect x="476.2" y="501" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="479.18" y="511.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt;::operator (5,903,780 samples, 0.03%)</title><rect x="563.7" y="901" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="566.66" y="911.5" ></text>
</g>
<g >
<title>webserver::Channel::update (699,805,088 samples, 3.60%)</title><rect x="127.1" y="805" width="42.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="130.06" y="815.5" >webs..</text>
</g>
<g >
<title>do_syscall_64 (785,930,995 samples, 4.05%)</title><rect x="435.9" y="805" width="47.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="438.85" y="815.5" >do_s..</text>
</g>
<g >
<title>page_counter_uncharge (2,912,534 samples, 0.01%)</title><rect x="1148.2" y="389" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1151.21" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (3,961,122 samples, 0.02%)</title><rect x="501.5" y="837" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="504.46" y="847.5" ></text>
</g>
<g >
<title>select_task_rq_fair (28,159,085 samples, 0.14%)</title><rect x="1134.9" y="389" width="1.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1137.88" y="399.5" ></text>
</g>
<g >
<title>memset@plt (3,037,637 samples, 0.02%)</title><rect x="53.1" y="1125" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="56.10" y="1135.5" ></text>
</g>
<g >
<title>select_task_rq (49,439,350 samples, 0.25%)</title><rect x="467.0" y="517" width="3.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="470.00" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;void  (13,440,444,388 samples, 69.20%)</title><rect x="45.0" y="1269" width="816.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="47.96" y="1279.5" >std::function&lt;void </text>
</g>
<g >
<title> (4,633,193 samples, 0.02%)</title><rect x="78.6" y="965" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="81.60" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_right (1,996,851 samples, 0.01%)</title><rect x="498.0" y="853" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="501.04" y="863.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (106,252,836 samples, 0.55%)</title><rect x="498.6" y="885" width="6.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="501.59" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (3,972,681 samples, 0.02%)</title><rect x="155.7" y="597" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="158.75" y="607.5" ></text>
</g>
<g >
<title>sk_free (3,750,146 samples, 0.02%)</title><rect x="788.7" y="533" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="791.66" y="543.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9,744,579 samples, 0.05%)</title><rect x="87.5" y="965" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="90.50" y="975.5" ></text>
</g>
<g >
<title>__fdget (4,969,864 samples, 0.03%)</title><rect x="228.2" y="837" width="0.3" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="231.16" y="847.5" ></text>
</g>
<g >
<title>_raw_spin_lock (11,619,068 samples, 0.06%)</title><rect x="474.8" y="581" width="0.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="477.77" y="591.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInLoopThread (1,920,764 samples, 0.01%)</title><rect x="1058.5" y="1109" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1061.45" y="1119.5" ></text>
</g>
<g >
<title>inet_csk_destroy_sock (2,936,727 samples, 0.02%)</title><rect x="981.4" y="837" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="984.40" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (1,992,497 samples, 0.01%)</title><rect x="549.9" y="885" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="552.89" y="895.5" ></text>
</g>
<g >
<title>kmem_cache_free (4,938,269 samples, 0.03%)</title><rect x="653.2" y="661" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="656.22" y="671.5" ></text>
</g>
<g >
<title>bool std::operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4,924,349 samples, 0.03%)</title><rect x="408.5" y="981" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="411.53" y="991.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;webserver::Channel&gt;, true&gt;::_M_head (2,012,992 samples, 0.01%)</title><rect x="1016.4" y="917" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1019.38" y="927.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1349" width="0.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="13.89" y="1359.5" ></text>
</g>
<g >
<title>__sk_mem_raise_allocated (99,938,313 samples, 0.51%)</title><rect x="1142.4" y="485" width="6.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1145.37" y="495.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,956,195 samples, 0.01%)</title><rect x="122.8" y="565" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="125.84" y="575.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (4,989,494 samples, 0.03%)</title><rect x="476.2" y="581" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="479.18" y="591.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::function&lt;void  (1,939,166 samples, 0.01%)</title><rect x="198.5" y="965" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="201.48" y="975.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (1,986,178 samples, 0.01%)</title><rect x="169.5" y="741" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="172.46" y="751.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (12,670,089 samples, 0.07%)</title><rect x="102.0" y="949" width="0.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="104.99" y="959.5" ></text>
</g>
<g >
<title> (4,897,856 samples, 0.03%)</title><rect x="890.1" y="1141" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="893.08" y="1151.5" ></text>
</g>
<g >
<title>skb_csum_hwoffload_help (1,895,967 samples, 0.01%)</title><rect x="1159.1" y="789" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1162.15" y="799.5" ></text>
</g>
<g >
<title>x64_sys_call (125,698,252 samples, 0.65%)</title><rect x="221.5" y="901" width="7.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="224.54" y="911.5" ></text>
</g>
<g >
<title>webserver::MutexLock::assignHolder (4,838,415 samples, 0.02%)</title><rect x="836.6" y="917" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="839.60" y="927.5" ></text>
</g>
<g >
<title>__strlen_avx2 (10,825,465 samples, 0.06%)</title><rect x="417.4" y="901" width="0.7" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="420.44" y="911.5" ></text>
</g>
<g >
<title>operator new (2,980,818 samples, 0.02%)</title><rect x="1059.8" y="1061" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1062.81" y="1071.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,552,637,090 samples, 7.99%)</title><rect x="926.0" y="1077" width="94.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="929.03" y="1087.5" >std::_Sp_co..</text>
</g>
<g >
<title>refill_stock (1,988,694 samples, 0.01%)</title><rect x="382.7" y="885" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="385.68" y="895.5" ></text>
</g>
<g >
<title>__queue_work.part.0 (204,952,140 samples, 1.06%)</title><rect x="462.3" y="581" width="12.4" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="465.26" y="591.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;&amp;&gt; (1,923,321 samples, 0.01%)</title><rect x="100.0" y="965" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="102.95" y="975.5" ></text>
</g>
<g >
<title>__ip_finish_output (1,900,240,504 samples, 9.78%)</title><rect x="676.8" y="629" width="115.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="679.76" y="639.5" >__ip_finish_ou..</text>
</g>
<g >
<title>security_inode_free (29,076,971 samples, 0.15%)</title><rect x="948.6" y="789" width="1.8" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="951.64" y="799.5" ></text>
</g>
<g >
<title>tcp_tso_segs (9,843,942 samples, 0.05%)</title><rect x="806.4" y="725" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="809.43" y="735.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (6,727,677 samples, 0.03%)</title><rect x="604.9" y="917" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="607.94" y="927.5" ></text>
</g>
<g >
<title>webserver::HttpParser::reset (122,609,704 samples, 0.63%)</title><rect x="569.2" y="981" width="7.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="572.24" y="991.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (13,411,275,653 samples, 69.05%)</title><rect x="46.6" y="1237" width="814.8" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="49.61" y="1247.5" >std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void </text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,853,656 samples, 0.01%)</title><rect x="1121.9" y="453" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1124.85" y="463.5" ></text>
</g>
<g >
<title>kmem_cache_free (2,952,713 samples, 0.02%)</title><rect x="1042.8" y="853" width="0.2" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1045.83" y="863.5" ></text>
</g>
<g >
<title>ipv4_dst_check (3,804,357 samples, 0.02%)</title><rect x="793.2" y="677" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="796.21" y="687.5" ></text>
</g>
<g >
<title>alloc_file_pseudo (346,221,335 samples, 1.78%)</title><rect x="306.9" y="981" width="21.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="309.93" y="991.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (3,020,083 samples, 0.02%)</title><rect x="112.7" y="773" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="115.73" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (3,011,947 samples, 0.02%)</title><rect x="611.0" y="901" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="613.97" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_destroy_node (5,945,920 samples, 0.03%)</title><rect x="575.0" y="885" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="578.02" y="895.5" ></text>
</g>
<g >
<title>mod_timer (2,029,278 samples, 0.01%)</title><rect x="805.5" y="709" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="808.53" y="719.5" ></text>
</g>
<g >
<title>sock_write_iter (3,282,246,591 samples, 16.90%)</title><rect x="623.8" y="837" width="199.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="626.79" y="847.5" >sock_write_iter</text>
</g>
<g >
<title>default_send_IPI_single_phys (13,428,524 samples, 0.07%)</title><rect x="1138.2" y="357" width="0.8" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1141.16" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::_Tuple_impl&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (3,944,511 samples, 0.02%)</title><rect x="73.6" y="933" width="0.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="76.56" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_valptr (3,801,860 samples, 0.02%)</title><rect x="918.1" y="789" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="921.09" y="799.5" ></text>
</g>
<g >
<title>skb_queue_purge_reason (5,037,854 samples, 0.03%)</title><rect x="970.9" y="789" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="973.87" y="799.5" ></text>
</g>
<g >
<title>cpus_share_cache (31,459,496 samples, 0.16%)</title><rect x="752.9" y="133" width="2.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="755.94" y="143.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt; (1,944,562 samples, 0.01%)</title><rect x="58.5" y="1045" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="61.52" y="1055.5" ></text>
</g>
<g >
<title> (2,963,724 samples, 0.02%)</title><rect x="13.6" y="1301" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="16.58" y="1311.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (30,001,589 samples, 0.15%)</title><rect x="609.0" y="917" width="1.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="612.03" y="927.5" ></text>
</g>
<g >
<title>__sk_mem_reclaim (6,818,040 samples, 0.04%)</title><rect x="636.4" y="709" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="639.42" y="719.5" ></text>
</g>
<g >
<title>refill_stock (25,561,647 samples, 0.13%)</title><rect x="1146.8" y="437" width="1.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1149.83" y="447.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::readableBytes (5,796,441 samples, 0.03%)</title><rect x="525.3" y="981" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="528.29" y="991.5" ></text>
</g>
<g >
<title>rb_first (3,979,264 samples, 0.02%)</title><rect x="978.7" y="789" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="981.71" y="799.5" ></text>
</g>
<g >
<title>read_tsc (2,952,639 samples, 0.02%)</title><rect x="386.9" y="885" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="389.92" y="895.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;webserver::TcpConnection&gt;::enable_shared_from_this (4,056,028 samples, 0.02%)</title><rect x="193.1" y="965" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="196.08" y="975.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (699,723,419 samples, 3.60%)</title><rect x="1108.1" y="613" width="42.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1111.13" y="623.5" >ip_l..</text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (5,981,591 samples, 0.03%)</title><rect x="836.2" y="917" width="0.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="839.24" y="927.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,866,542 samples, 0.01%)</title><rect x="98.8" y="933" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="101.83" y="943.5" ></text>
</g>
<g >
<title>cubictcp_cwnd_event (1,925,571 samples, 0.01%)</title><rect x="673.3" y="709" width="0.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="676.33" y="719.5" ></text>
</g>
<g >
<title>tcp_ack (3,456,291 samples, 0.02%)</title><rect x="773.3" y="309" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="776.31" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, bool, true&gt; (3,842,386 samples, 0.02%)</title><rect x="559.4" y="901" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="562.37" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::EventThreadPool, std::default_delete&lt;webserver::EventThreadPool&gt; &gt;::get (8,750,774 samples, 0.05%)</title><rect x="104.8" y="949" width="0.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="107.79" y="959.5" ></text>
</g>
<g >
<title>operator delete (3,981,856 samples, 0.02%)</title><rect x="1013.0" y="901" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1016.00" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (6,856,036 samples, 0.04%)</title><rect x="116.0" y="597" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="119.00" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (14,627,057 samples, 0.08%)</title><rect x="604.7" y="933" width="0.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="607.69" y="943.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Poller*, webserver::Channel*&gt;::_M_head (2,563,644 samples, 0.01%)</title><rect x="1054.2" y="949" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1057.24" y="959.5" ></text>
</g>
<g >
<title>__raise_softirq_irqoff (1,979,649 samples, 0.01%)</title><rect x="1156.8" y="725" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1159.77" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (2,023,631 samples, 0.01%)</title><rect x="900.3" y="1013" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="903.34" y="1023.5" ></text>
</g>
<g >
<title>alloc_file_pseudo (1,992,006 samples, 0.01%)</title><rect x="259.4" y="997" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="262.45" y="1007.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2,820,502 samples, 0.01%)</title><rect x="1059.3" y="1093" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1062.34" y="1103.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe.part.0 (24,117,629 samples, 0.12%)</title><rect x="1169.4" y="949" width="1.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1172.40" y="959.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (482,972,630 samples, 2.49%)</title><rect x="1026.0" y="1061" width="29.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1029.02" y="1071.5" >st..</text>
</g>
<g >
<title>__check_object_size (22,296,970 samples, 0.11%)</title><rect x="663.5" y="757" width="1.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="666.48" y="767.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (1,995,282 samples, 0.01%)</title><rect x="1139.7" y="357" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1142.68" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (91,483,865 samples, 0.47%)</title><rect x="1183.6" y="1285" width="5.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1186.55" y="1295.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (4,053,401 samples, 0.02%)</title><rect x="494.9" y="837" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="497.92" y="847.5" ></text>
</g>
<g >
<title>__check_object_size (3,744,450 samples, 0.02%)</title><rect x="284.4" y="981" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="287.35" y="991.5" ></text>
</g>
<g >
<title>webserver::CurrentThread::tid (1,980,845 samples, 0.01%)</title><rect x="251.2" y="1093" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="254.19" y="1103.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (25,479,802 samples, 0.13%)</title><rect x="885.0" y="1253" width="1.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="887.98" y="1263.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3,009,415 samples, 0.02%)</title><rect x="130.2" y="741" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="133.15" y="751.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8,881,553 samples, 0.05%)</title><rect x="604.0" y="933" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="606.97" y="943.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (5,964,746 samples, 0.03%)</title><rect x="55.9" y="1077" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="58.94" y="1087.5" ></text>
</g>
<g >
<title>read_tsc (8,850,756 samples, 0.05%)</title><rect x="1164.5" y="949" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1167.48" y="959.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;&amp; std::_Mu&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;, false, false&gt;::operator (4,004,944 samples, 0.02%)</title><rect x="910.3" y="901" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="913.29" y="911.5" ></text>
</g>
<g >
<title>_raw_write_lock_bh (3,013,164 samples, 0.02%)</title><rect x="981.1" y="837" width="0.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="984.10" y="847.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpConnection*&gt;::_Tuple_impl (1,942,907 samples, 0.01%)</title><rect x="198.4" y="885" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="201.36" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (14,091,891 samples, 0.07%)</title><rect x="1050.0" y="869" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1052.98" y="879.5" ></text>
</g>
<g >
<title>webserver::Socket::getHostAddr (2,953,441 samples, 0.02%)</title><rect x="173.7" y="981" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="176.68" y="991.5" ></text>
</g>
<g >
<title>nf_hook_slow (1,922,305 samples, 0.01%)</title><rect x="1161.4" y="885" width="0.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1164.41" y="895.5" ></text>
</g>
<g >
<title>webserver::Acceptor*&amp; std::_Mu&lt;webserver::Acceptor*, false, false&gt;::operator (2,816,996 samples, 0.01%)</title><rect x="861.2" y="1189" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="864.23" y="1199.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::assertInIoLoop (4,064,130 samples, 0.02%)</title><rect x="615.1" y="981" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="618.06" y="991.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::~HttpRequest (4,961,721 samples, 0.03%)</title><rect x="1006.7" y="949" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1009.70" y="959.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_ptr (3,918,054 samples, 0.02%)</title><rect x="827.9" y="917" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="830.89" y="927.5" ></text>
</g>
<g >
<title>tcp_rcv_established (402,294,125 samples, 2.07%)</title><rect x="631.5" y="741" width="24.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="634.54" y="751.5" >t..</text>
</g>
<g >
<title>tcp_try_rmem_schedule (157,590,350 samples, 0.81%)</title><rect x="762.7" y="293" width="9.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="765.66" y="303.5" ></text>
</g>
<g >
<title>webserver::CurrentThread::tid (2,010,236 samples, 0.01%)</title><rect x="920.5" y="821" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="923.47" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,661,240 samples, 0.05%)</title><rect x="404.2" y="997" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="407.20" y="1007.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (2,705,945 samples, 0.01%)</title><rect x="559.6" y="901" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="562.60" y="911.5" ></text>
</g>
<g >
<title>char const* std::__find_if&lt;char const*, __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; &gt; (73,154,879 samples, 0.38%)</title><rect x="535.6" y="917" width="4.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="538.62" y="927.5" ></text>
</g>
<g >
<title>handle_softirqs (868,488,989 samples, 4.47%)</title><rect x="1102.6" y="741" width="52.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1105.58" y="751.5" >handl..</text>
</g>
<g >
<title>onRequest (1,998,077 samples, 0.01%)</title><rect x="413.9" y="933" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="416.85" y="943.5" ></text>
</g>
<g >
<title>__GI___snprintf (3,012,437 samples, 0.02%)</title><rect x="59.8" y="997" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="62.77" y="1007.5" ></text>
</g>
<g >
<title>all (19,422,465,822 samples, 100%)</title><rect x="10.0" y="1413" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1423.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (1,994,406 samples, 0.01%)</title><rect x="612.8" y="933" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="615.80" y="943.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (3,903,108 samples, 0.02%)</title><rect x="666.9" y="741" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="669.91" y="751.5" ></text>
</g>
<g >
<title>tcp_tso_segs (6,693,306 samples, 0.03%)</title><rect x="1170.9" y="949" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1173.92" y="959.5" ></text>
</g>
<g >
<title>epoll_ctl (360,033,556 samples, 1.85%)</title><rect x="131.7" y="629" width="21.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="134.69" y="639.5" >e..</text>
</g>
<g >
<title>webserver::EventLoop::removeChannel (206,928,596 samples, 1.07%)</title><rect x="1058.6" y="1125" width="12.5" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1061.57" y="1135.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1301" width="0.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.89" y="1311.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInChannelHandling (6,651,167 samples, 0.03%)</title><rect x="250.9" y="1125" width="0.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="253.91" y="1135.5" ></text>
</g>
<g >
<title>mntput_no_expire (5,699,535 samples, 0.03%)</title><rect x="960.7" y="885" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="963.71" y="895.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_get_Tp_allocator (1,876,718 samples, 0.01%)</title><rect x="217.1" y="901" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="220.09" y="911.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (5,878,079 samples, 0.03%)</title><rect x="520.8" y="917" width="0.4" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="523.83" y="927.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (171,362,022 samples, 0.88%)</title><rect x="1060.6" y="1029" width="10.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1063.55" y="1039.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node::operator (12,468,762 samples, 0.06%)</title><rect x="596.5" y="917" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="599.47" y="927.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (211,288,754 samples, 1.09%)</title><rect x="112.4" y="805" width="12.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="115.44" y="815.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1,930,173 samples, 0.01%)</title><rect x="879.9" y="1237" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="882.86" y="1247.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (8,557,992 samples, 0.04%)</title><rect x="202.8" y="917" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="205.82" y="927.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,982,799 samples, 0.01%)</title><rect x="322.6" y="949" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="325.60" y="959.5" ></text>
</g>
<g >
<title>__init_waitqueue_head (2,000,348 samples, 0.01%)</title><rect x="288.0" y="949" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="290.98" y="959.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (6,842,200 samples, 0.04%)</title><rect x="657.5" y="789" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="660.47" y="799.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1317" width="0.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="13.89" y="1327.5" ></text>
</g>
<g >
<title>webserver::Channel** std::__niter_base&lt;webserver::Channel**&gt; (6,573,421 samples, 0.03%)</title><rect x="877.7" y="1221" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="880.68" y="1231.5" ></text>
</g>
<g >
<title>tcp_add_backlog (6,046,483 samples, 0.03%)</title><rect x="713.3" y="341" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="716.26" y="351.5" ></text>
</g>
<g >
<title>down_read (6,869,023 samples, 0.04%)</title><rect x="454.5" y="661" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="457.45" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (1,922,090 samples, 0.01%)</title><rect x="606.7" y="901" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="609.65" y="911.5" ></text>
</g>
<g >
<title>std::function&lt;void  (174,401,235 samples, 0.90%)</title><rect x="1060.4" y="1093" width="10.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1063.43" y="1103.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1,987,518 samples, 0.01%)</title><rect x="835.8" y="933" width="0.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="838.78" y="943.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,809,783 samples, 0.01%)</title><rect x="243.7" y="885" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="246.69" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (3,136,131 samples, 0.02%)</title><rect x="595.9" y="933" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="598.86" y="943.5" ></text>
</g>
<g >
<title>aa_file_perm (5,883,631 samples, 0.03%)</title><rect x="394.5" y="965" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="397.51" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (1,938,248 samples, 0.01%)</title><rect x="596.2" y="917" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="599.23" y="927.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::size (6,611,532 samples, 0.03%)</title><rect x="875.6" y="1237" width="0.4" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="878.61" y="1247.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,894,930 samples, 0.01%)</title><rect x="852.0" y="1013" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="854.97" y="1023.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3,868,731 samples, 0.02%)</title><rect x="911.8" y="821" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="914.78" y="831.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::shared_ptr&lt;webserver::TcpConnection, void&gt; (1,964,607 samples, 0.01%)</title><rect x="125.3" y="821" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="128.27" y="831.5" ></text>
</g>
<g >
<title>available_idle_cpu (6,806,470 samples, 0.04%)</title><rect x="1136.1" y="357" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1139.12" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::erase[abi:cxx11] (52,144,570 samples, 0.27%)</title><rect x="912.8" y="821" width="3.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="915.80" y="831.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (10,862,532 samples, 0.06%)</title><rect x="484.2" y="821" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="487.24" y="831.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; (3,939,338 samples, 0.02%)</title><rect x="921.5" y="885" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="924.53" y="895.5" ></text>
</g>
<g >
<title>mutex_lock (8,620,891 samples, 0.04%)</title><rect x="151.9" y="533" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="154.90" y="543.5" ></text>
</g>
<g >
<title>rw_verify_area (18,075,412 samples, 0.09%)</title><rect x="440.5" y="725" width="1.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="443.49" y="735.5" ></text>
</g>
<g >
<title>boost::typeindex::stl_type_index::stl_type_index (1,981,715 samples, 0.01%)</title><rect x="527.5" y="949" width="0.1" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="530.47" y="959.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (8,606,565 samples, 0.04%)</title><rect x="440.0" y="725" width="0.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="442.97" y="735.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,911,962 samples, 0.01%)</title><rect x="1026.3" y="1045" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1029.33" y="1055.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (7,886,027 samples, 0.04%)</title><rect x="125.4" y="805" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="128.39" y="815.5" ></text>
</g>
<g >
<title>boost::any::placeholder::~placeholder (2,908,558 samples, 0.01%)</title><rect x="117.8" y="629" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="120.80" y="639.5" ></text>
</g>
<g >
<title>boost::typeindex::stl_type_index boost::typeindex::type_id&lt;webserver::HttpParser&gt; (2,923,100 samples, 0.02%)</title><rect x="528.7" y="965" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="531.72" y="975.5" ></text>
</g>
<g >
<title>webserver::Channel::getPollState (1,910,275 samples, 0.01%)</title><rect x="1046.7" y="949" width="0.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1049.71" y="959.5" ></text>
</g>
<g >
<title>std::enable_if&lt; (3,843,752 samples, 0.02%)</title><rect x="249.9" y="1029" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="252.85" y="1039.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3,024,783 samples, 0.02%)</title><rect x="560.4" y="917" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="563.43" y="927.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, bool&gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; (4,039,259 samples, 0.02%)</title><rect x="100.1" y="981" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="103.07" y="991.5" ></text>
</g>
<g >
<title>boost::anys::detail::placeholder::~placeholder (1,905,575 samples, 0.01%)</title><rect x="117.9" y="613" width="0.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="120.86" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (3,847,219 samples, 0.02%)</title><rect x="557.9" y="821" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="560.92" y="831.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; &gt;::type&amp;&amp; std::get&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; (7,427,079 samples, 0.04%)</title><rect x="838.5" y="1013" width="0.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="841.50" y="1023.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (3,725,648 samples, 0.02%)</title><rect x="588.8" y="949" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="591.79" y="959.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (18,552,625 samples, 0.10%)</title><rect x="93.4" y="917" width="1.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="96.38" y="927.5" ></text>
</g>
<g >
<title>tty_ldisc_ref_wait (4,949,066 samples, 0.03%)</title><rect x="482.6" y="693" width="0.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="485.61" y="703.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (12,404,602 samples, 0.06%)</title><rect x="1009.2" y="933" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1012.18" y="943.5" ></text>
</g>
<g >
<title>webserver::InetAddress::InetAddress (3,004,740 samples, 0.02%)</title><rect x="251.3" y="1125" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="254.31" y="1135.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3,019,054 samples, 0.02%)</title><rect x="240.7" y="949" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="243.69" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (3,906,638 samples, 0.02%)</title><rect x="115.6" y="629" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="118.59" y="639.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (3,970,948 samples, 0.02%)</title><rect x="795.0" y="725" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="798.05" y="735.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (1,727,100 samples, 0.01%)</title><rect x="447.0" y="645" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="450.01" y="655.5" ></text>
</g>
<g >
<title>ima_file_free (2,024,315 samples, 0.01%)</title><rect x="963.2" y="885" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="966.23" y="895.5" ></text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.2.5 (856,600,206 samples, 4.41%)</title><rect x="433.2" y="869" width="52.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="436.21" y="879.5" >_IO_f..</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::data (5,860,363 samples, 0.03%)</title><rect x="543.0" y="933" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="545.98" y="943.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (3,000,148 samples, 0.02%)</title><rect x="908.4" y="853" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="911.40" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int const, webserver::Channel*&gt;, std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_Alloc_node&gt; (2,890,223 samples, 0.01%)</title><rect x="160.7" y="597" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="163.69" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (15,238,598 samples, 0.08%)</title><rect x="1188.2" y="1157" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1191.19" y="1167.5" ></text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (31,382,526 samples, 0.16%)</title><rect x="313.9" y="933" width="1.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="316.94" y="943.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,839,377 samples, 0.01%)</title><rect x="118.8" y="645" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="121.83" y="655.5" ></text>
</g>
<g >
<title>module_put (1,953,939 samples, 0.01%)</title><rect x="978.1" y="789" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="981.06" y="799.5" ></text>
</g>
<g >
<title>__x64_sys_shutdown (1,696,201,397 samples, 8.73%)</title><rect x="1075.2" y="1061" width="103.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1078.22" y="1071.5" >__x64_sys_sh..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,869,859 samples, 0.03%)</title><rect x="826.6" y="901" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="829.59" y="911.5" ></text>
</g>
<g >
<title>tcp_write_xmit (7,890,941 samples, 0.04%)</title><rect x="807.3" y="757" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="810.32" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::sync (8,852,502 samples, 0.05%)</title><rect x="416.9" y="901" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="419.91" y="911.5" ></text>
</g>
<g >
<title>tcp_write_xmit (3,008,922 samples, 0.02%)</title><rect x="1174.0" y="981" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1176.95" y="991.5" ></text>
</g>
<g >
<title>__build_skb_around (1,834,952 samples, 0.01%)</title><rect x="721.6" y="245" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="724.55" y="255.5" ></text>
</g>
<g >
<title>page_counter_uncharge (3,907,078 samples, 0.02%)</title><rect x="315.6" y="837" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="318.61" y="847.5" ></text>
</g>
<g >
<title>std::function&lt;void  (32,582,570 samples, 0.17%)</title><rect x="1008.1" y="1013" width="2.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1011.14" y="1023.5" ></text>
</g>
<g >
<title>std::function&lt;void  (530,968,613 samples, 2.73%)</title><rect x="892.8" y="1141" width="32.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="895.76" y="1151.5" >st..</text>
</g>
<g >
<title>ip_rcv_core (2,022,735 samples, 0.01%)</title><rect x="1151.8" y="645" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1154.76" y="655.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,930,498 samples, 0.01%)</title><rect x="245.2" y="885" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="248.19" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,953,287 samples, 0.01%)</title><rect x="587.5" y="933" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="590.49" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (3,881,000 samples, 0.02%)</title><rect x="914.5" y="805" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="917.48" y="815.5" ></text>
</g>
<g >
<title>boost::typeindex::stl_type_index boost::typeindex::stl_type_index::type_id&lt;webserver::HttpParser&gt; (4,015,811 samples, 0.02%)</title><rect x="528.5" y="965" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="531.48" y="975.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,940,257 samples, 0.02%)</title><rect x="956.8" y="885" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="959.77" y="895.5" ></text>
</g>
<g >
<title>webserver::TcpConnection*&amp;&amp; std::forward&lt;webserver::TcpConnection*&gt; (1,921,424 samples, 0.01%)</title><rect x="847.1" y="1045" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="850.05" y="1055.5" ></text>
</g>
<g >
<title>__strlen_avx2 (3,925,342 samples, 0.02%)</title><rect x="420.1" y="885" width="0.3" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="423.14" y="895.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (13,345,522 samples, 0.07%)</title><rect x="1188.3" y="1141" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1191.30" y="1151.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; __gnu_cxx::__ops::__iter_equals_val&lt;char const&gt; (1,926,682 samples, 0.01%)</title><rect x="562.1" y="949" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="565.05" y="959.5" ></text>
</g>
<g >
<title>malloc (10,020,504 samples, 0.05%)</title><rect x="424.0" y="837" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="427.00" y="847.5" ></text>
</g>
<g >
<title>page_counter_cancel (2,981,785 samples, 0.02%)</title><rect x="645.0" y="597" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="648.04" y="607.5" ></text>
</g>
<g >
<title>webserver::TcpServer*&amp; std::_Mu&lt;webserver::TcpServer*, false, false&gt;::operator (2,033,020 samples, 0.01%)</title><rect x="921.9" y="885" width="0.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="924.89" y="895.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::tuple&lt;int&amp;&amp;&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::tuple&lt;int&amp;&amp;&gt;&amp;&gt; (1,959,950 samples, 0.01%)</title><rect x="250.1" y="1029" width="0.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="253.09" y="1039.5" ></text>
</g>
<g >
<title>locks_remove_posix (3,904,579 samples, 0.02%)</title><rect x="1003.4" y="933" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1006.37" y="943.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (3,813,008 samples, 0.02%)</title><rect x="146.0" y="421" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="148.98" y="431.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::shutdownWriteInLoop (2,826,512 samples, 0.01%)</title><rect x="1182.1" y="1173" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1185.08" y="1183.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (618,534,762 samples, 3.18%)</title><rect x="131.4" y="661" width="37.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="134.40" y="671.5" >std..</text>
</g>
<g >
<title>__netif_rx (25,483,713 samples, 0.13%)</title><rect x="786.2" y="533" width="1.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="789.16" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (8,944,033 samples, 0.05%)</title><rect x="159.4" y="581" width="0.5" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="162.38" y="591.5" ></text>
</g>
<g >
<title>webserver::sockets::accept (5,898,671 samples, 0.03%)</title><rect x="337.3" y="1125" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="340.28" y="1135.5" ></text>
</g>
<g >
<title>char* std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (40,685,893 samples, 0.21%)</title><rect x="210.6" y="917" width="2.5" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="213.59" y="927.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::vector (7,907,906 samples, 0.04%)</title><rect x="38.0" y="1301" width="0.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="41.00" y="1311.5" ></text>
</g>
<g >
<title>__wake_up (5,864,782 samples, 0.03%)</title><rect x="443.6" y="693" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="446.55" y="703.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (16,704,659 samples, 0.09%)</title><rect x="821.8" y="821" width="1.0" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="824.78" y="831.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::lower_bound (20,717,964 samples, 0.11%)</title><rect x="606.5" y="917" width="1.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="609.53" y="927.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (26,215,691 samples, 0.13%)</title><rect x="1008.5" y="981" width="1.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1011.52" y="991.5" ></text>
</g>
<g >
<title>std::_Function_base::_Function_base (1,921,288 samples, 0.01%)</title><rect x="904.6" y="997" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="907.61" y="1007.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,377,316 samples, 0.01%)</title><rect x="85.9" y="933" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="88.94" y="943.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::toFormattedString[abi:cxx11] (4,639,260 samples, 0.02%)</title><rect x="339.4" y="1109" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="342.43" y="1119.5" ></text>
</g>
<g >
<title>tty_write (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="917" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1183.50" y="927.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (3,237,396,119 samples, 16.67%)</title><rect x="54.2" y="1109" width="196.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="57.22" y="1119.5" >std::_Function_handler&lt;vo..</text>
</g>
<g >
<title>mutex_unlock (2,938,182 samples, 0.02%)</title><rect x="1045.7" y="869" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1048.70" y="879.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (633,341,184 samples, 3.26%)</title><rect x="131.0" y="693" width="38.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="133.98" y="703.5" >voi..</text>
</g>
<g >
<title>_raw_write_unlock_bh (2,023,086 samples, 0.01%)</title><rect x="261.7" y="965" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="264.69" y="975.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2,021,055 samples, 0.01%)</title><rect x="414.3" y="917" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="417.27" y="927.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="1093" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1023.36" y="1103.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,816,859 samples, 0.05%)</title><rect x="892.2" y="1093" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="895.23" y="1103.5" ></text>
</g>
<g >
<title>sched_clock_cpu (4,706,181 samples, 0.02%)</title><rect x="759.5" y="165" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="762.50" y="175.5" ></text>
</g>
<g >
<title>select_task_rq_fair (27,014,333 samples, 0.14%)</title><rect x="468.4" y="501" width="1.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="471.36" y="511.5" ></text>
</g>
<g >
<title>check_stack_object (1,940,932 samples, 0.01%)</title><rect x="664.7" y="741" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="667.72" y="751.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (1,952,445 samples, 0.01%)</title><rect x="1129.6" y="453" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1132.62" y="463.5" ></text>
</g>
<g >
<title>lock_timer_base (7,713,961 samples, 0.04%)</title><rect x="1122.4" y="453" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1125.44" y="463.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (206,404,069 samples, 1.06%)</title><rect x="909.6" y="949" width="12.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="912.63" y="959.5" ></text>
</g>
<g >
<title>refill_stock (3,975,175 samples, 0.02%)</title><rect x="820.6" y="709" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="823.64" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;void  (24,454,612 samples, 0.13%)</title><rect x="128.8" y="773" width="1.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="131.85" y="783.5" ></text>
</g>
<g >
<title>operator new (6,790,865 samples, 0.03%)</title><rect x="885.9" y="1205" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="888.94" y="1215.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,984,698 samples, 0.02%)</title><rect x="278.6" y="965" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="281.65" y="975.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~_Tuple_impl (3,800,935 samples, 0.02%)</title><rect x="72.5" y="949" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="75.51" y="959.5" ></text>
</g>
<g >
<title>ip_finish_output2 (1,880,747,115 samples, 9.68%)</title><rect x="677.7" y="613" width="114.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="680.66" y="623.5" >ip_finish_outp..</text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt;, false&gt;::~_Head_base (5,901,738 samples, 0.03%)</title><rect x="84.7" y="853" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="87.68" y="863.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::~shared_ptr (11,888,917 samples, 0.06%)</title><rect x="42.3" y="1285" width="0.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="45.35" y="1295.5" ></text>
</g>
<g >
<title>tcp_clean_rtx_queue.constprop.0 (3,860,329 samples, 0.02%)</title><rect x="650.5" y="725" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="653.52" y="735.5" ></text>
</g>
<g >
<title>std::tuple&lt;&gt; std::forward_as_tuple&lt;&gt; (1,854,600 samples, 0.01%)</title><rect x="886.9" y="1221" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="889.88" y="1231.5" ></text>
</g>
<g >
<title>std::enable_if&lt; (10,556,400 samples, 0.05%)</title><rect x="923.1" y="1045" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="926.12" y="1055.5" ></text>
</g>
<g >
<title>apparmor_file_free_security (6,794,073 samples, 0.03%)</title><rect x="935.8" y="901" width="0.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="938.75" y="911.5" ></text>
</g>
<g >
<title>unsigned int std::__detail::__to_chars_len&lt;unsigned long&gt; (7,953,591 samples, 0.04%)</title><rect x="598.2" y="965" width="0.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="601.17" y="975.5" ></text>
</g>
<g >
<title>__GI___setsockopt (243,696,190 samples, 1.25%)</title><rect x="175.7" y="965" width="14.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="178.72" y="975.5" ></text>
</g>
<g >
<title>lock_for_kill (2,724,505 samples, 0.01%)</title><rect x="960.0" y="901" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="962.96" y="911.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (9,791,425 samples, 0.05%)</title><rect x="205.2" y="917" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="208.17" y="927.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::_M_ptr (2,927,315 samples, 0.02%)</title><rect x="1056.2" y="1061" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1059.20" y="1071.5" ></text>
</g>
<g >
<title>page_counter_cancel (4,700,835 samples, 0.02%)</title><rect x="380.6" y="821" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="383.57" y="831.5" ></text>
</g>
<g >
<title>inet_sendmsg (3,228,071,036 samples, 16.62%)</title><rect x="625.7" y="821" width="196.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="628.66" y="831.5" >inet_sendmsg</text>
</g>
<g >
<title>tcp_mstamp_refresh (12,728,002 samples, 0.07%)</title><rect x="1148.9" y="533" width="0.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1151.90" y="543.5" ></text>
</g>
<g >
<title>consume_obj_stock (3,871,182 samples, 0.02%)</title><rect x="321.8" y="885" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="324.77" y="895.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt;::tuple&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; const&amp;, true&gt; (10,270,581 samples, 0.05%)</title><rect x="73.9" y="949" width="0.6" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="76.86" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (1,869,325 samples, 0.01%)</title><rect x="549.3" y="901" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="552.30" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (35,915,569 samples, 0.18%)</title><rect x="603.4" y="949" width="2.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="606.40" y="959.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (22,953,497 samples, 0.12%)</title><rect x="453.1" y="629" width="1.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="456.06" y="639.5" ></text>
</g>
<g >
<title>_copy_to_user (8,665,658 samples, 0.04%)</title><rect x="284.6" y="981" width="0.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="287.58" y="991.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; __gnu_cxx::__ops::__iter_equals_val&lt;char const&gt; (2,954,262 samples, 0.02%)</title><rect x="562.4" y="933" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="565.41" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (7,778,479 samples, 0.04%)</title><rect x="582.2" y="917" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="585.16" y="927.5" ></text>
</g>
<g >
<title>std::function&lt;void  (17,554,718 samples, 0.09%)</title><rect x="830.7" y="917" width="1.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="833.71" y="927.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (1,917,797 samples, 0.01%)</title><rect x="1015.1" y="949" width="0.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1018.07" y="959.5" ></text>
</g>
<g >
<title>rw_verify_area (65,556,312 samples, 0.34%)</title><rect x="390.9" y="1013" width="4.0" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="393.88" y="1023.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_get_Tp_allocator (3,926,065 samples, 0.02%)</title><rect x="1016.7" y="997" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1019.74" y="1007.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (2,792,833 samples, 0.01%)</title><rect x="619.0" y="885" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="621.98" y="895.5" ></text>
</g>
<g >
<title>propagate_protected_usage (1,953,766 samples, 0.01%)</title><rect x="768.4" y="197" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="771.39" y="207.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::~holder (17,736,297 samples, 0.09%)</title><rect x="117.7" y="645" width="1.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="120.75" y="655.5" ></text>
</g>
<g >
<title>inet_ehashfn (1,911,673 samples, 0.01%)</title><rect x="709.8" y="325" width="0.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="712.83" y="335.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (10,485,303 samples, 0.05%)</title><rect x="203.6" y="917" width="0.7" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="206.63" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (5,765,497 samples, 0.03%)</title><rect x="555.4" y="885" width="0.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="558.41" y="895.5" ></text>
</g>
<g >
<title>kick_pool (1,942,482 samples, 0.01%)</title><rect x="340.4" y="773" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="343.36" y="783.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_M_allocate (16,631,211 samples, 0.09%)</title><rect x="872.2" y="1253" width="1.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="875.22" y="1263.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,921,580 samples, 0.02%)</title><rect x="998.8" y="901" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1001.82" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (13,325,267 samples, 0.07%)</title><rect x="157.4" y="565" width="0.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="160.44" y="575.5" ></text>
</g>
<g >
<title>_raw_write_lock_irq (1,815,319 samples, 0.01%)</title><rect x="26.9" y="1157" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="29.88" y="1167.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (44,981,742 samples, 0.23%)</title><rect x="591.7" y="965" width="2.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="594.75" y="975.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::get (12,721,135 samples, 0.07%)</title><rect x="1021.0" y="1109" width="0.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1024.02" y="1119.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (2,835,955 samples, 0.01%)</title><rect x="78.7" y="933" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="81.71" y="943.5" ></text>
</g>
<g >
<title>__update_load_avg_blocked_se (2,951,309 samples, 0.02%)</title><rect x="755.5" y="133" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="758.51" y="143.5" ></text>
</g>
<g >
<title>alloc_fd (30,302,320 samples, 0.16%)</title><rect x="331.4" y="997" width="1.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="334.41" y="1007.5" ></text>
</g>
<g >
<title>webserver::Poller*&amp;&amp; std::forward&lt;webserver::Poller*&gt; (1,930,447 samples, 0.01%)</title><rect x="1059.0" y="1061" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1061.98" y="1071.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::setConnectCallback (42,480,515 samples, 0.22%)</title><rect x="244.5" y="981" width="2.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="247.54" y="991.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,377,761,125 samples, 7.09%)</title><rect x="252.5" y="1093" width="83.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="255.52" y="1103.5" >entry_SYS..</text>
</g>
<g >
<title>tcp_newly_delivered (2,871,221 samples, 0.01%)</title><rect x="649.6" y="709" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="652.57" y="719.5" ></text>
</g>
<g >
<title>neigh_hh_output (1,831,406,725 samples, 9.43%)</title><rect x="680.7" y="597" width="111.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="683.66" y="607.5" >neigh_hh_output</text>
</g>
<g >
<title>kmem_cache_alloc_noprof (33,648,296 samples, 0.17%)</title><rect x="144.2" y="453" width="2.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="147.16" y="463.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1,681,693,494 samples, 8.66%)</title><rect x="682.7" y="565" width="102.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="685.72" y="575.5" >__local_bh_e..</text>
</g>
<g >
<title>read_tsc (7,775,197 samples, 0.04%)</title><rect x="1149.2" y="517" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1152.20" y="527.5" ></text>
</g>
<g >
<title>malloc (5,804,219 samples, 0.03%)</title><rect x="886.0" y="1189" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="889.00" y="1199.5" ></text>
</g>
<g >
<title>rb_insert_color (2,873,352 samples, 0.01%)</title><rect x="798.6" y="709" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="801.57" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (1,943,744 samples, 0.01%)</title><rect x="882.2" y="1285" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="885.16" y="1295.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,023,928 samples, 0.01%)</title><rect x="35.1" y="1285" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="38.06" y="1295.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (3,125,752,038 samples, 16.09%)</title><rect x="59.2" y="1013" width="189.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="62.23" y="1023.5" >void std::__invoke_impl&lt;..</text>
</g>
<g >
<title>tcp_chrono_stop (1,957,253 samples, 0.01%)</title><rect x="979.7" y="789" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="982.66" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator* (7,852,753 samples, 0.04%)</title><rect x="863.8" y="1269" width="0.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="866.77" y="1279.5" ></text>
</g>
<g >
<title>security_socket_setsockopt (1,981,554 samples, 0.01%)</title><rect x="188.5" y="869" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="191.53" y="879.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::__get_helper&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; (2,801,119 samples, 0.01%)</title><rect x="838.3" y="997" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="841.27" y="1007.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (3,927,640 samples, 0.02%)</title><rect x="854.1" y="1029" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="857.05" y="1039.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (6,736,538 samples, 0.03%)</title><rect x="918.6" y="757" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="921.60" y="767.5" ></text>
</g>
<g >
<title>webserver::Channel::enableReading (2,002,693 samples, 0.01%)</title><rect x="110.3" y="837" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="113.32" y="847.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,976,770 samples, 0.01%)</title><rect x="647.0" y="645" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="650.02" y="655.5" ></text>
</g>
<g >
<title>queue_work_on (256,514,084 samples, 1.32%)</title><rect x="460.9" y="613" width="15.6" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="463.90" y="623.5" ></text>
</g>
<g >
<title>webserver::InetAddress::InetAddress (1,949,752 samples, 0.01%)</title><rect x="229.9" y="949" width="0.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="232.87" y="959.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (1,942,322 samples, 0.01%)</title><rect x="902.4" y="917" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="905.35" y="927.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_Vector_base (8,898,535 samples, 0.05%)</title><rect x="218.4" y="933" width="0.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="221.42" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (24,520,928 samples, 0.13%)</title><rect x="497.1" y="869" width="1.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="500.10" y="879.5" ></text>
</g>
<g >
<title>apparmor_socket_setsockopt (4,630,038 samples, 0.02%)</title><rect x="179.7" y="853" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="182.69" y="863.5" ></text>
</g>
<g >
<title>webserver::CurrentThread::tid (3,039,302 samples, 0.02%)</title><rect x="855.6" y="1061" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="858.58" y="1071.5" ></text>
</g>
<g >
<title>__fput (1,078,902,028 samples, 5.55%)</title><rect x="933.5" y="917" width="65.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="936.51" y="927.5" >__fput</text>
</g>
<g >
<title>srso_alias_safe_ret (2,801,949 samples, 0.01%)</title><rect x="784.5" y="501" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="787.48" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (6,733,382 samples, 0.03%)</title><rect x="855.8" y="1077" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="858.76" y="1087.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (2,843,433 samples, 0.01%)</title><rect x="849.7" y="1077" width="0.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="852.67" y="1087.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (3,430,614 samples, 0.02%)</title><rect x="924.8" y="1109" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="927.81" y="1119.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (9,561,487 samples, 0.05%)</title><rect x="1176.8" y="1029" width="0.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1179.76" y="1039.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::function&lt;void  (1,861,697 samples, 0.01%)</title><rect x="1187.1" y="1237" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.10" y="1247.5" ></text>
</g>
<g >
<title>webserver::Channel::getFd (2,028,633 samples, 0.01%)</title><rect x="168.4" y="613" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="171.38" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (1,055,134,012 samples, 5.43%)</title><rect x="107.1" y="933" width="64.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="110.09" y="943.5" >std::en..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_Node_allocator (1,957,041 samples, 0.01%)</title><rect x="572.6" y="917" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="575.60" y="927.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,925,763 samples, 0.02%)</title><rect x="738.1" y="277" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="741.05" y="287.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (4,992,729 samples, 0.03%)</title><rect x="821.5" y="805" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="824.47" y="815.5" ></text>
</g>
<g >
<title>webserver::MutexLockGuard::~MutexLockGuard (14,680,857 samples, 0.08%)</title><rect x="855.8" y="1093" width="0.9" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="858.76" y="1103.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe (3,920,714 samples, 0.02%)</title><rect x="655.1" y="725" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="658.09" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (2,000,598 samples, 0.01%)</title><rect x="841.4" y="1109" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="844.43" y="1119.5" ></text>
</g>
<g >
<title>webserver::TcpConnection*&amp;&amp; std::forward&lt;webserver::TcpConnection*&gt; (1,960,299 samples, 0.01%)</title><rect x="191.8" y="933" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="194.77" y="943.5" ></text>
</g>
<g >
<title>malloc (1,941,608 samples, 0.01%)</title><rect x="123.0" y="597" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="125.96" y="607.5" ></text>
</g>
<g >
<title>std::function&lt;void  (25,525,722 samples, 0.13%)</title><rect x="833.0" y="885" width="1.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="835.98" y="895.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (4,655,010 samples, 0.02%)</title><rect x="151.5" y="485" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="154.50" y="495.5" ></text>
</g>
<g >
<title>validate_xmit_xfrm (2,984,320 samples, 0.02%)</title><rect x="735.7" y="85" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="738.75" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::data (10,901,959 samples, 0.06%)</title><rect x="541.7" y="949" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="544.72" y="959.5" ></text>
</g>
<g >
<title>page_counter_cancel (17,245,261 samples, 0.09%)</title><rect x="381.0" y="805" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="384.04" y="815.5" ></text>
</g>
<g >
<title>__strlen_avx2 (5,853,550 samples, 0.03%)</title><rect x="586.7" y="949" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="589.71" y="959.5" ></text>
</g>
<g >
<title>slab_update_freelist.isra.0 (2,987,129 samples, 0.02%)</title><rect x="271.9" y="933" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="274.86" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (4,981,506 samples, 0.03%)</title><rect x="900.0" y="997" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="903.04" y="1007.5" ></text>
</g>
<g >
<title>rb_insert_color (3,017,623 samples, 0.02%)</title><rect x="152.4" y="533" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="155.43" y="543.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::allocate (2,025,622 samples, 0.01%)</title><rect x="97.1" y="901" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="100.07" y="911.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,943,966 samples, 0.05%)</title><rect x="42.5" y="1253" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="45.53" y="1263.5" ></text>
</g>
<g >
<title>tcp_write_xmit (2,299,416,673 samples, 11.84%)</title><rect x="667.6" y="741" width="139.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="670.62" y="751.5" >tcp_write_xmit</text>
</g>
<g >
<title>do_syscall_64 (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="997" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1183.50" y="1007.5" ></text>
</g>
<g >
<title>[unknown] (10,675,641 samples, 0.05%)</title><rect x="928.2" y="1013" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="931.16" y="1023.5" ></text>
</g>
<g >
<title>webserver::MutexLockGuard::MutexLockGuard (1,971,598 samples, 0.01%)</title><rect x="1189.2" y="1285" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1192.17" y="1295.5" ></text>
</g>
<g >
<title>std::_Bind_helper&lt;std::__or_&lt;std::is_integral&lt;std::decay&lt;void  (12,909,472 samples, 0.07%)</title><rect x="128.0" y="773" width="0.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="131.01" y="783.5" ></text>
</g>
<g >
<title>__mod_memcg_state (12,580,476 samples, 0.06%)</title><rect x="272.2" y="933" width="0.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="275.22" y="943.5" ></text>
</g>
<g >
<title>accept (1,402,414,168 samples, 7.22%)</title><rect x="251.5" y="1109" width="85.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="254.50" y="1119.5" >accept</text>
</g>
<g >
<title>webserver::sockets::getHostAddr (2,901,894 samples, 0.01%)</title><rect x="241.9" y="965" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="244.92" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;void  (47,456,497 samples, 0.24%)</title><rect x="1012.2" y="965" width="2.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1015.18" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (3,017,314 samples, 0.02%)</title><rect x="851.0" y="1045" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="853.96" y="1055.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::TcpConnection*&gt; &gt;::type&amp; std::get&lt;0ul, webserver::TcpConnection*&gt; (6,695,342 samples, 0.03%)</title><rect x="1182.3" y="1189" width="0.4" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1185.25" y="1199.5" ></text>
</g>
<g >
<title>main (19,374,306,767 samples, 99.75%)</title><rect x="12.9" y="1333" width="1177.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="15.87" y="1343.5" >main</text>
</g>
<g >
<title>wake_affine (7,800,315 samples, 0.04%)</title><rect x="1136.1" y="373" width="0.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1139.12" y="383.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::~HttpRequest (5,955,918 samples, 0.03%)</title><rect x="121.0" y="661" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="123.97" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (12,476,680 samples, 0.06%)</title><rect x="581.9" y="933" width="0.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="584.93" y="943.5" ></text>
</g>
<g >
<title>__netif_receive_skb (1,473,104,808 samples, 7.58%)</title><rect x="689.8" y="453" width="89.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="692.81" y="463.5" >__netif_re..</text>
</g>
<g >
<title>__hrtimer_run_queues (2,000,143 samples, 0.01%)</title><rect x="476.2" y="533" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="479.18" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (7,835,512 samples, 0.04%)</title><rect x="571.1" y="949" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="574.13" y="959.5" ></text>
</g>
<g >
<title>__ip_local_out (8,597,068 samples, 0.04%)</title><rect x="1095.6" y="885" width="0.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1098.64" y="895.5" ></text>
</g>
<g >
<title>mutex_unlock (3,047,177 samples, 0.02%)</title><rect x="481.9" y="693" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="484.89" y="703.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (10,931,297 samples, 0.06%)</title><rect x="128.1" y="757" width="0.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="131.07" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (1,962,967 samples, 0.01%)</title><rect x="503.7" y="773" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="506.71" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,923,759 samples, 0.01%)</title><rect x="86.5" y="917" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="89.49" y="927.5" ></text>
</g>
<g >
<title>__printf_buffer_write (2,968,088 samples, 0.02%)</title><rect x="69.6" y="933" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="72.60" y="943.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;void  (3,889,111 samples, 0.02%)</title><rect x="248.8" y="933" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="251.84" y="943.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (2,000,143 samples, 0.01%)</title><rect x="476.2" y="549" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="479.18" y="559.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2,034,401 samples, 0.01%)</title><rect x="505.6" y="869" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="508.57" y="879.5" ></text>
</g>
<g >
<title>enqueue_timer (5,899,120 samples, 0.03%)</title><rect x="1122.1" y="453" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1125.08" y="463.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;webserver::http::Version&amp;&gt;::type&amp;&amp; std::move&lt;webserver::http::Version&amp;&gt; (2,841,676 samples, 0.01%)</title><rect x="573.3" y="949" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="576.25" y="959.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3,938,199 samples, 0.02%)</title><rect x="208.0" y="869" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="211.02" y="879.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (4,791,025 samples, 0.02%)</title><rect x="696.8" y="357" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="699.82" y="367.5" ></text>
</g>
<g >
<title>migrate_task_rq_fair (3,968,555 samples, 0.02%)</title><rect x="755.4" y="165" width="0.3" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="758.45" y="175.5" ></text>
</g>
<g >
<title>__do_softirq (2,952,486 samples, 0.02%)</title><rect x="1072.8" y="1109" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1075.77" y="1119.5" ></text>
</g>
<g >
<title>__xfrm_policy_check2.constprop.0 (2,000,456 samples, 0.01%)</title><rect x="696.2" y="357" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="699.16" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_write (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="965" width="0.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1183.50" y="975.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (3,928,342 samples, 0.02%)</title><rect x="842.0" y="1061" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="844.96" y="1071.5" ></text>
</g>
<g >
<title>tcp_tso_segs (2,005,465 samples, 0.01%)</title><rect x="667.5" y="741" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="670.50" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::~shared_ptr (4,929,664 samples, 0.03%)</title><rect x="109.8" y="837" width="0.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="112.84" y="847.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (28,710,703 samples, 0.15%)</title><rect x="387.7" y="965" width="1.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="390.69" y="975.5" ></text>
</g>
<g >
<title>lock_timer_base (2,993,822 samples, 0.02%)</title><rect x="1167.8" y="853" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1170.81" y="863.5" ></text>
</g>
<g >
<title>inet_accept (332,464,373 samples, 1.71%)</title><rect x="261.0" y="997" width="20.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="263.99" y="1007.5" ></text>
</g>
<g >
<title>nf_hook_slow (3,027,844 samples, 0.02%)</title><rect x="1161.2" y="869" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1164.22" y="879.5" ></text>
</g>
<g >
<title>srso_alias_untrain_ret (2,014,724 samples, 0.01%)</title><rect x="1005.0" y="997" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1007.97" y="1007.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::getBodyType (5,520,540 samples, 0.03%)</title><rect x="544.1" y="949" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="547.15" y="959.5" ></text>
</g>
<g >
<title>pwq_tryinc_nr_active (14,639,974 samples, 0.08%)</title><rect x="473.1" y="565" width="0.9" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="476.11" y="575.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::HttpRequest (16,726,596 samples, 0.09%)</title><rect x="119.7" y="661" width="1.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="122.65" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (1,901,254 samples, 0.01%)</title><rect x="559.1" y="901" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="562.14" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::end (2,036,389 samples, 0.01%)</title><rect x="37.9" y="1301" width="0.1" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="40.88" y="1311.5" ></text>
</g>
<g >
<title>webserver::HttpServer*&amp; std::forward&lt;webserver::HttpServer*&amp;&gt; (1,886,875 samples, 0.01%)</title><rect x="125.1" y="725" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="128.10" y="735.5" ></text>
</g>
<g >
<title>filp_flush (22,447,395 samples, 0.12%)</title><rect x="1002.0" y="933" width="1.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1005.01" y="943.5" ></text>
</g>
<g >
<title>webserver::MutexLock::unlock (1,880,962 samples, 0.01%)</title><rect x="837.0" y="933" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="839.96" y="943.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; &gt;::type&amp;&amp; std::get&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (7,828,912 samples, 0.04%)</title><rect x="124.0" y="709" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="126.97" y="719.5" ></text>
</g>
<g >
<title>__strlen_avx2 (4,877,785 samples, 0.03%)</title><rect x="77.1" y="965" width="0.3" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="80.06" y="975.5" ></text>
</g>
<g >
<title>shuffle_freelist (3,046,908 samples, 0.02%)</title><rect x="297.1" y="869" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="300.10" y="879.5" ></text>
</g>
<g >
<title>webserver::Channel** std::__relocate_a&lt;webserver::Channel**, webserver::Channel**, std::allocator&lt;webserver::Channel*&gt; &gt; (26,322,328 samples, 0.14%)</title><rect x="876.5" y="1237" width="1.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="879.48" y="1247.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (8,451,661 samples, 0.04%)</title><rect x="94.5" y="917" width="0.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="97.50" y="927.5" ></text>
</g>
<g >
<title> (5,880,014 samples, 0.03%)</title><rect x="841.9" y="1109" width="0.4" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="844.90" y="1119.5" ></text>
</g>
<g >
<title> (18,590,112 samples, 0.10%)</title><rect x="410.5" y="965" width="1.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="413.52" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (1,938,248 samples, 0.01%)</title><rect x="596.2" y="901" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="599.23" y="911.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::swap (18,250,765 samples, 0.09%)</title><rect x="572.1" y="949" width="1.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="575.14" y="959.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,893,515 samples, 0.01%)</title><rect x="929.9" y="981" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="932.95" y="991.5" ></text>
</g>
<g >
<title>refill_stock (39,437,078 samples, 0.20%)</title><rect x="379.8" y="869" width="2.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="382.81" y="879.5" ></text>
</g>
<g >
<title>inet_recvmsg (499,211,779 samples, 2.57%)</title><rect x="357.4" y="965" width="30.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="360.36" y="975.5" >in..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (8,790,614 samples, 0.05%)</title><rect x="556.6" y="837" width="0.5" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="559.55" y="847.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.0 (4,774,061 samples, 0.02%)</title><rect x="23.1" y="1189" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="26.06" y="1199.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~map (36,163,191 samples, 0.19%)</title><rect x="612.8" y="965" width="2.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="615.80" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (2,959,909 samples, 0.02%)</title><rect x="155.8" y="581" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="158.81" y="591.5" ></text>
</g>
<g >
<title>apparmor_socket_getpeername (15,431,914 samples, 0.08%)</title><rect x="237.8" y="837" width="1.0" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="240.84" y="847.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (6,776,782 samples, 0.03%)</title><rect x="43.2" y="1237" width="0.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="46.24" y="1247.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (3,947,547 samples, 0.02%)</title><rect x="56.3" y="1077" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="59.30" y="1087.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1,942,377 samples, 0.01%)</title><rect x="565.6" y="917" width="0.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="568.60" y="927.5" ></text>
</g>
<g >
<title>__rcu_read_lock (1,930,456 samples, 0.01%)</title><rect x="687.0" y="469" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="689.97" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (17,507,560 samples, 0.09%)</title><rect x="589.1" y="949" width="1.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="592.08" y="959.5" ></text>
</g>
<g >
<title>__memset (5,490,144 samples, 0.03%)</title><rect x="308.6" y="949" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="311.65" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (16,832,344 samples, 0.09%)</title><rect x="606.8" y="901" width="1.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="609.77" y="911.5" ></text>
</g>
<g >
<title>_copy_to_user (2,011,413 samples, 0.01%)</title><rect x="222.8" y="853" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="225.84" y="863.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,917,862 samples, 0.03%)</title><rect x="208.0" y="901" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="210.96" y="911.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (8,870,862 samples, 0.05%)</title><rect x="971.5" y="805" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="974.46" y="815.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (21,192,964 samples, 0.11%)</title><rect x="1187.8" y="1205" width="1.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1190.82" y="1215.5" ></text>
</g>
<g >
<title>kick_pool (136,607,726 samples, 0.70%)</title><rect x="464.8" y="565" width="8.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="467.81" y="575.5" ></text>
</g>
<g >
<title>operator new (6,569,264 samples, 0.03%)</title><rect x="206.6" y="853" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="209.64" y="863.5" ></text>
</g>
<g >
<title>default_wake_function (194,904,092 samples, 1.00%)</title><rect x="748.1" y="213" width="11.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="751.06" y="223.5" ></text>
</g>
<g >
<title>char const* std::search&lt;char const*, char const*&gt; (116,105,163 samples, 0.60%)</title><rect x="533.0" y="949" width="7.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="536.01" y="959.5" ></text>
</g>
<g >
<title>operator new (1,779,950 samples, 0.01%)</title><rect x="243.9" y="869" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="246.92" y="879.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;webserver::http::Method&gt; &gt;, std::is_move_constructible&lt;webserver::http::Method&gt;, std::is_move_assignable&lt;webserver::http::Method&gt; &gt;::value, void&gt;::type std::swap&lt;webserver::http::Method&gt; (3,815,743 samples, 0.02%)</title><rect x="571.6" y="949" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="574.61" y="959.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3,018,709 samples, 0.02%)</title><rect x="87.3" y="901" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="90.32" y="911.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt;, true, true&gt;::__uniq_ptr_impl (22,501,632 samples, 0.12%)</title><rect x="199.4" y="949" width="1.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="202.35" y="959.5" ></text>
</g>
<g >
<title>sock_close (583,760,374 samples, 3.01%)</title><rect x="963.4" y="901" width="35.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="966.36" y="911.5" >soc..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (7,811,393 samples, 0.04%)</title><rect x="569.7" y="965" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="572.72" y="975.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (2,821,836 samples, 0.01%)</title><rect x="398.5" y="1077" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="401.45" y="1087.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::pair (2,841,485 samples, 0.01%)</title><rect x="97.3" y="901" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="100.25" y="911.5" ></text>
</g>
<g >
<title>security_sock_rcv_skb (3,844,100 samples, 0.02%)</title><rect x="1115.3" y="549" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1118.26" y="559.5" ></text>
</g>
<g >
<title>security_socket_setsockopt (11,499,744 samples, 0.06%)</title><rect x="180.0" y="853" width="0.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="182.97" y="863.5" ></text>
</g>
<g >
<title>pty_write_room (6,851,462 samples, 0.04%)</title><rect x="476.6" y="645" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="479.61" y="655.5" ></text>
</g>
<g >
<title>_raw_write_unlock_irq (4,721,723 samples, 0.02%)</title><rect x="1042.3" y="853" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1045.30" y="863.5" ></text>
</g>
<g >
<title>x64_sys_call (1,922,851 samples, 0.01%)</title><rect x="339.1" y="1077" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="342.14" y="1087.5" ></text>
</g>
<g >
<title>strlen (14,638,872 samples, 0.08%)</title><rect x="328.7" y="981" width="0.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="331.69" y="991.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,791,699 samples, 0.01%)</title><rect x="617.5" y="933" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="620.45" y="943.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (3,959,122 samples, 0.02%)</title><rect x="882.7" y="1269" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="885.70" y="1279.5" ></text>
</g>
<g >
<title>tcp_current_mss (53,563,041 samples, 0.28%)</title><rect x="808.1" y="757" width="3.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="811.09" y="767.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,012,477 samples, 0.01%)</title><rect x="153.1" y="613" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="156.13" y="623.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_ctl (8,573,269 samples, 0.04%)</title><rect x="1028.6" y="901" width="0.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1031.55" y="911.5" ></text>
</g>
<g >
<title>tcp_rbtree_insert (1,984,292 samples, 0.01%)</title><rect x="798.7" y="709" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="801.75" y="719.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (12,416,270 samples, 0.06%)</title><rect x="489.4" y="869" width="0.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="492.44" y="879.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,932,633 samples, 0.01%)</title><rect x="846.2" y="1109" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="849.18" y="1119.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (438,650,170 samples, 2.26%)</title><rect x="1027.3" y="965" width="26.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1030.29" y="975.5" >v..</text>
</g>
<g >
<title>srso_alias_safe_ret (1,964,765 samples, 0.01%)</title><rect x="931.8" y="965" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="934.84" y="975.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,831,746 samples, 0.01%)</title><rect x="1158.6" y="773" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1161.55" y="783.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1,990,957 samples, 0.01%)</title><rect x="483.7" y="805" width="0.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="486.66" y="815.5" ></text>
</g>
<g >
<title>__x64_sys_setsockopt (177,464,355 samples, 0.91%)</title><rect x="178.9" y="901" width="10.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="181.86" y="911.5" ></text>
</g>
<g >
<title>__strlen_avx2 (7,740,381 samples, 0.04%)</title><rect x="70.4" y="949" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="73.38" y="959.5" ></text>
</g>
<g >
<title>remove_wait_queue (5,690,451 samples, 0.03%)</title><rect x="1040.7" y="837" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1043.66" y="847.5" ></text>
</g>
<g >
<title>__wake_up_common (1,883,963 samples, 0.01%)</title><rect x="446.9" y="661" width="0.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="449.89" y="671.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1,934,592 samples, 0.01%)</title><rect x="854.2" y="1013" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="857.17" y="1023.5" ></text>
</g>
<g >
<title>ksys_write (3,361,456,502 samples, 17.31%)</title><rect x="619.2" y="869" width="204.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="622.21" y="879.5" >ksys_write</text>
</g>
<g >
<title>webserver::TcpConnection::isConnected (1,847,403 samples, 0.01%)</title><rect x="121.3" y="677" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="124.33" y="687.5" ></text>
</g>
<g >
<title>inet_recvmsg (1,945,824 samples, 0.01%)</title><rect x="354.6" y="981" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="357.62" y="991.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::size (2,025,183 samples, 0.01%)</title><rect x="495.2" y="853" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="498.16" y="863.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,034,938 samples, 0.01%)</title><rect x="235.9" y="821" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="238.89" y="831.5" ></text>
</g>
<g >
<title>tcp_release_cb (1,885,926 samples, 0.01%)</title><rect x="278.5" y="949" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="281.53" y="959.5" ></text>
</g>
<g >
<title>__rcu_read_lock (1,941,045 samples, 0.01%)</title><rect x="709.9" y="341" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="712.95" y="351.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::~__new_allocator (2,015,833 samples, 0.01%)</title><rect x="531.9" y="965" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="534.86" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_begin (1,999,397 samples, 0.01%)</title><rect x="865.5" y="1237" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.54" y="1247.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; &gt;::type&amp; std::get&lt;1ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; (3,002,419 samples, 0.02%)</title><rect x="124.7" y="725" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="127.74" y="735.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4,910,017 samples, 0.03%)</title><rect x="497.7" y="821" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="500.75" y="831.5" ></text>
</g>
<g >
<title>do_epoll_ctl (253,258,501 samples, 1.30%)</title><rect x="1030.3" y="869" width="15.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1033.32" y="879.5" ></text>
</g>
<g >
<title>security_file_release (20,192,084 samples, 0.10%)</title><rect x="962.1" y="901" width="1.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="965.13" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (1,880,734 samples, 0.01%)</title><rect x="428.4" y="901" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="431.44" y="911.5" ></text>
</g>
<g >
<title>_int_free (3,921,319 samples, 0.02%)</title><rect x="873.8" y="1205" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="876.76" y="1215.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (1,974,134 samples, 0.01%)</title><rect x="205.8" y="917" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="208.82" y="927.5" ></text>
</g>
<g >
<title>_int_free (5,831,972 samples, 0.03%)</title><rect x="1014.5" y="869" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1017.47" y="879.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (7,960,824 samples, 0.04%)</title><rect x="548.2" y="933" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="551.16" y="943.5" ></text>
</g>
<g >
<title>__queue_work (6,912,634 samples, 0.04%)</title><rect x="461.8" y="597" width="0.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="464.78" y="607.5" ></text>
</g>
<g >
<title>available_idle_cpu (1,949,589 samples, 0.01%)</title><rect x="1135.9" y="373" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1138.94" y="383.5" ></text>
</g>
<g >
<title>operator new (3,853,605 samples, 0.02%)</title><rect x="585.3" y="933" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="588.26" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (2,765,504 samples, 0.01%)</title><rect x="591.6" y="933" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="594.58" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (1,937,920 samples, 0.01%)</title><rect x="100.4" y="965" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="103.37" y="975.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (888,028,994 samples, 4.57%)</title><rect x="1101.7" y="789" width="53.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1104.68" y="799.5" >__loc..</text>
</g>
<g >
<title>operator new (6,804,705 samples, 0.04%)</title><rect x="556.7" y="821" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="559.67" y="831.5" ></text>
</g>
<g >
<title>woken_wake_function (113,710,757 samples, 0.59%)</title><rect x="1133.2" y="453" width="6.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1136.19" y="463.5" ></text>
</g>
<g >
<title>loopback_xmit (36,871,953 samples, 0.19%)</title><rect x="732.0" y="85" width="2.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="735.03" y="95.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (8,816,859 samples, 0.05%)</title><rect x="892.2" y="1109" width="0.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="895.23" y="1119.5" ></text>
</g>
<g >
<title>netlink_has_listeners (6,776,939 samples, 0.03%)</title><rect x="984.1" y="805" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="987.14" y="815.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,382,711,910 samples, 17.42%)</title><rect x="617.9" y="917" width="205.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="620.92" y="927.5" >do_syscall_64</text>
</g>
<g >
<title>page_counter_cancel (9,620,087 samples, 0.05%)</title><rect x="770.7" y="149" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="773.73" y="159.5" ></text>
</g>
<g >
<title>__rcu_read_lock (1,935,273 samples, 0.01%)</title><rect x="1114.1" y="565" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1117.07" y="575.5" ></text>
</g>
<g >
<title>alloc_slab_obj_exts (1,905,707 samples, 0.01%)</title><rect x="148.2" y="453" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="151.20" y="463.5" ></text>
</g>
<g >
<title>skb_page_frag_refill (7,819,867 samples, 0.04%)</title><rect x="662.6" y="757" width="0.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="665.60" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;* std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_Alloc_node::operator (41,255,750 samples, 0.21%)</title><rect x="165.0" y="565" width="2.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="167.98" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::size (1,954,993 samples, 0.01%)</title><rect x="1069.8" y="933" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1072.84" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_M_reset (1,917,628 samples, 0.01%)</title><rect x="120.2" y="581" width="0.1" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="123.20" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (2,855,293 samples, 0.01%)</title><rect x="579.4" y="933" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="582.36" y="943.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (7,790,069 samples, 0.04%)</title><rect x="189.1" y="869" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="192.12" y="879.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (613,311,148 samples, 3.16%)</title><rect x="352.5" y="1013" width="37.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="355.48" y="1023.5" >do_..</text>
</g>
<g >
<title>webserver::ConnBuffer::writerBegin (14,741,989 samples, 0.08%)</title><rect x="540.5" y="949" width="0.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="543.47" y="959.5" ></text>
</g>
<g >
<title>release_sock (1,968,530 samples, 0.01%)</title><rect x="965.7" y="853" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="968.70" y="863.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;void  (2,923,430 samples, 0.02%)</title><rect x="246.8" y="933" width="0.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="249.77" y="943.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (8,754,716 samples, 0.05%)</title><rect x="826.4" y="949" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="829.36" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (3,064,136 samples, 0.02%)</title><rect x="120.8" y="661" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="123.79" y="671.5" ></text>
</g>
<g >
<title>qdisc_pkt_len_init (1,934,522 samples, 0.01%)</title><rect x="791.8" y="581" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="794.75" y="591.5" ></text>
</g>
<g >
<title>validate_xmit_xfrm (3,882,887 samples, 0.02%)</title><rect x="1160.4" y="789" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1163.39" y="799.5" ></text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.2.5 (844,980,379 samples, 4.35%)</title><rect x="433.6" y="853" width="51.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="436.57" y="863.5" >_IO_d..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,926,532 samples, 0.02%)</title><rect x="830.3" y="885" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="833.29" y="895.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::function&lt;void  (12,037,604 samples, 0.06%)</title><rect x="833.8" y="869" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="836.80" y="879.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_addr (2,010,109 samples, 0.01%)</title><rect x="92.5" y="885" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="95.47" y="895.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__not_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__not_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;, char const*&gt; &gt; &gt;::value, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13,667,252 samples, 0.07%)</title><rect x="567.7" y="917" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="570.68" y="927.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,028,575 samples, 0.01%)</title><rect x="927.3" y="1029" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="930.27" y="1039.5" ></text>
</g>
<g >
<title>mutex_unlock (2,944,385 samples, 0.02%)</title><rect x="454.9" y="661" width="0.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="457.87" y="671.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~map (3,910,508 samples, 0.02%)</title><rect x="118.6" y="597" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="121.59" y="607.5" ></text>
</g>
<g >
<title>clear_inode (4,879,359 samples, 0.03%)</title><rect x="944.6" y="821" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="947.59" y="831.5" ></text>
</g>
<g >
<title>nf_hook_slow (3,847,529 samples, 0.02%)</title><rect x="736.3" y="181" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="739.28" y="191.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runInLoop (4,708,990 samples, 0.02%)</title><rect x="62.0" y="997" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="65.03" y="1007.5" ></text>
</g>
<g >
<title>ktime_get (2,952,785 samples, 0.02%)</title><rect x="1149.0" y="517" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1152.02" y="527.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (5,873,858 samples, 0.03%)</title><rect x="327.6" y="965" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="330.61" y="975.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (464,190,020 samples, 2.39%)</title><rect x="1027.0" y="1013" width="28.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1029.99" y="1023.5" >v..</text>
</g>
<g >
<title>__GI___snprintf (28,870,421 samples, 0.15%)</title><rect x="599.4" y="949" width="1.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="602.39" y="959.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,751,139 samples, 0.01%)</title><rect x="823.6" y="933" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="826.55" y="943.5" ></text>
</g>
<g >
<title>__fsnotify_inode_delete (3,952,819 samples, 0.02%)</title><rect x="950.6" y="805" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="953.65" y="815.5" ></text>
</g>
<g >
<title>rb_next (3,856,634 samples, 0.02%)</title><rect x="638.3" y="709" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="641.26" y="719.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (1,979,649 samples, 0.01%)</title><rect x="831.2" y="853" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="834.24" y="863.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_ptr (3,916,252 samples, 0.02%)</title><rect x="92.4" y="901" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="95.36" y="911.5" ></text>
</g>
<g >
<title>tcp_rate_skb_sent (2,974,324 samples, 0.02%)</title><rect x="794.7" y="709" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="797.70" y="719.5" ></text>
</g>
<g >
<title>lock_for_kill (5,048,075 samples, 0.03%)</title><rect x="956.3" y="885" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="959.28" y="895.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,881,884 samples, 0.01%)</title><rect x="1130.0" y="485" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1132.97" y="495.5" ></text>
</g>
<g >
<title>do_epoll_ctl (1,892,689 samples, 0.01%)</title><rect x="152.8" y="565" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="155.84" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpConnection*&gt;::_Tuple_impl&lt;webserver::TcpConnection*&gt; (4,026,849 samples, 0.02%)</title><rect x="191.5" y="917" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="194.47" y="927.5" ></text>
</g>
<g >
<title>__sk_mem_schedule (103,967,012 samples, 0.54%)</title><rect x="1142.2" y="501" width="6.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1145.19" y="511.5" ></text>
</g>
<g >
<title>__get_user_4 (8,750,607 samples, 0.05%)</title><rect x="233.6" y="853" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="236.65" y="863.5" ></text>
</g>
<g >
<title>malloc@plt (1,996,929 samples, 0.01%)</title><rect x="89.0" y="933" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="91.97" y="943.5" ></text>
</g>
<g >
<title>skb_clone_tx_timestamp (3,898,181 samples, 0.02%)</title><rect x="788.9" y="533" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="791.88" y="543.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::TimeStamp (2,924,108 samples, 0.02%)</title><rect x="120.5" y="645" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="123.49" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,017,155 samples, 0.02%)</title><rect x="75.0" y="981" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="78.03" y="991.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (2,923,399 samples, 0.02%)</title><rect x="324.9" y="933" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="327.88" y="943.5" ></text>
</g>
<g >
<title>x64_sys_call (1,698,194,818 samples, 8.74%)</title><rect x="1075.1" y="1077" width="103.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1078.10" y="1087.5" >x64_sys_call</text>
</g>
<g >
<title>std::operator== (2,910,495 samples, 0.01%)</title><rect x="553.9" y="885" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="556.88" y="895.5" ></text>
</g>
<g >
<title>mutex_trylock (7,410,587 samples, 0.04%)</title><rect x="448.6" y="677" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="451.55" y="687.5" ></text>
</g>
<g >
<title>webserver::HttpServer::onConnect (6,640,272 samples, 0.03%)</title><rect x="900.6" y="1013" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="903.64" y="1023.5" ></text>
</g>
<g >
<title>xas_load (8,897,545 samples, 0.05%)</title><rect x="320.8" y="869" width="0.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="323.83" y="879.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (2,007,949 samples, 0.01%)</title><rect x="87.4" y="885" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="90.38" y="895.5" ></text>
</g>
<g >
<title>boost::any::any (21,005,115 samples, 0.11%)</title><rect x="122.0" y="645" width="1.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="124.98" y="655.5" ></text>
</g>
<g >
<title>__kmalloc_node_noprof (1,905,707 samples, 0.01%)</title><rect x="148.2" y="437" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="151.20" y="447.5" ></text>
</g>
<g >
<title>[unknown] (7,700,093 samples, 0.04%)</title><rect x="12.2" y="1349" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.19" y="1359.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, webserver::Channel*&gt;::_M_head (5,763,101 samples, 0.03%)</title><rect x="1054.4" y="949" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1057.39" y="959.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (9,717,386 samples, 0.05%)</title><rect x="502.2" y="789" width="0.6" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="505.23" y="799.5" ></text>
</g>
<g >
<title>sock_read_iter (589,721,605 samples, 3.04%)</title><rect x="353.8" y="997" width="35.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="356.85" y="1007.5" >soc..</text>
</g>
<g >
<title>webserver::Channel::hasEvent (2,010,027 samples, 0.01%)</title><rect x="1053.7" y="933" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1056.70" y="943.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl::_Vector_impl (2,000,941 samples, 0.01%)</title><rect x="880.1" y="1269" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="883.15" y="1279.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::closeInLoop (7,793,214 samples, 0.04%)</title><rect x="1181.6" y="1173" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.61" y="1183.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr (8,961,353 samples, 0.05%)</title><rect x="908.0" y="869" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="911.04" y="879.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (2,019,625 samples, 0.01%)</title><rect x="736.9" y="229" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="739.87" y="239.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::_Tuple_impl&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (10,946,265 samples, 0.06%)</title><rect x="903.5" y="933" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="906.52" y="943.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,852,852 samples, 0.01%)</title><rect x="1024.6" y="1045" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1027.61" y="1055.5" ></text>
</g>
<g >
<title>operator new (1,853,880 samples, 0.01%)</title><rect x="205.6" y="853" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="208.59" y="863.5" ></text>
</g>
<g >
<title>raw_local_deliver (3,903,559 samples, 0.02%)</title><rect x="1150.3" y="597" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1153.29" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (25,697,276 samples, 0.13%)</title><rect x="905.5" y="981" width="1.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="908.49" y="991.5" ></text>
</g>
<g >
<title>webserver::HttpServer::onMessage (7,847,962 samples, 0.04%)</title><rect x="837.3" y="1013" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="840.25" y="1023.5" ></text>
</g>
<g >
<title>ip_rcv_finish_core.isra.0 (26,284,656 samples, 0.14%)</title><rect x="777.1" y="405" width="1.6" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="780.12" y="415.5" ></text>
</g>
<g >
<title>webserver::MutexLock::unassignHolder (1,978,079 samples, 0.01%)</title><rect x="856.5" y="1061" width="0.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="859.53" y="1071.5" ></text>
</g>
<g >
<title>webserver::MutexLock::lock (16,486,867 samples, 0.08%)</title><rect x="835.9" y="933" width="1.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="838.90" y="943.5" ></text>
</g>
<g >
<title>select_idle_sibling (6,788,658 samples, 0.03%)</title><rect x="469.2" y="485" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="472.17" y="495.5" ></text>
</g>
<g >
<title>webserver::TcpServer*&amp; std::_Mu&lt;webserver::TcpServer*, false, false&gt;::operator (1,902,640 samples, 0.01%)</title><rect x="924.5" y="1045" width="0.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="927.52" y="1055.5" ></text>
</g>
<g >
<title>init_once (2,024,707 samples, 0.01%)</title><rect x="297.2" y="837" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="300.16" y="847.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,837,226 samples, 0.02%)</title><rect x="43.4" y="1205" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="46.42" y="1215.5" ></text>
</g>
<g >
<title>security_d_instantiate (1,847,922 samples, 0.01%)</title><rect x="327.5" y="965" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="330.50" y="975.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Poller*, webserver::Channel*&gt; &gt;::type&amp; std::get&lt;0ul, webserver::Poller*, webserver::Channel*&gt; (5,417,935 samples, 0.03%)</title><rect x="1054.1" y="981" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1057.06" y="991.5" ></text>
</g>
<g >
<title>webserver::detail::defaultLoggerOutputFunc (12,700,790 samples, 0.07%)</title><rect x="339.8" y="1109" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="342.77" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_valptr (3,916,252 samples, 0.02%)</title><rect x="92.4" y="917" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="95.36" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_mbegin (1,935,587 samples, 0.01%)</title><rect x="592.0" y="917" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="595.05" y="927.5" ></text>
</g>
<g >
<title>kfree (2,981,282 samples, 0.02%)</title><rect x="188.3" y="869" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="191.35" y="879.5" ></text>
</g>
<g >
<title>skb_release_data (27,134,632 samples, 0.14%)</title><rect x="781.8" y="469" width="1.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="784.79" y="479.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (1,041,567,862 samples, 5.36%)</title><rect x="107.9" y="917" width="63.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="110.91" y="927.5" >void s..</text>
</g>
<g >
<title>try_charge_memcg (18,384,104 samples, 0.09%)</title><rect x="304.0" y="885" width="1.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="307.04" y="895.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (4,984,899 samples, 0.03%)</title><rect x="361.9" y="933" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="364.95" y="943.5" ></text>
</g>
<g >
<title>ktime_get_seconds (1,954,222 samples, 0.01%)</title><rect x="1125.3" y="517" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1128.29" y="527.5" ></text>
</g>
<g >
<title>propagate_protected_usage (2,020,282 samples, 0.01%)</title><rect x="646.7" y="565" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="649.72" y="575.5" ></text>
</g>
<g >
<title>mod_memcg_state (5,868,047 samples, 0.03%)</title><rect x="382.3" y="885" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="385.33" y="895.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,935,664 samples, 0.01%)</title><rect x="612.3" y="917" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="615.33" y="927.5" ></text>
</g>
<g >
<title>x64_sys_call (1,987,139 samples, 0.01%)</title><rect x="153.0" y="597" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="156.01" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (17,499,477 samples, 0.09%)</title><rect x="16.8" y="1285" width="1.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="19.83" y="1295.5" ></text>
</g>
<g >
<title>tcp_ack_update_window.isra.0 (1,978,870 samples, 0.01%)</title><rect x="740.5" y="309" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="743.48" y="319.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (14,120,754 samples, 0.07%)</title><rect x="564.7" y="917" width="0.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="567.74" y="927.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rdx (2,010,676 samples, 0.01%)</title><rect x="636.8" y="709" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="639.83" y="719.5" ></text>
</g>
<g >
<title>__skb_clone (8,889,173 samples, 0.05%)</title><rect x="794.0" y="693" width="0.5" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="796.98" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_accept (1,332,407,906 samples, 6.86%)</title><rect x="255.0" y="1045" width="81.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="258.03" y="1055.5" >__x64_sys..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_right (2,015,675 samples, 0.01%)</title><rect x="592.8" y="917" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="595.77" y="927.5" ></text>
</g>
<g >
<title>malloc (1,947,202 samples, 0.01%)</title><rect x="213.4" y="885" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="216.36" y="895.5" ></text>
</g>
<g >
<title>netlink_has_listeners (1,925,533 samples, 0.01%)</title><rect x="997.5" y="821" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1000.46" y="831.5" ></text>
</g>
<g >
<title>kvfree_call_rcu (1,919,479 samples, 0.01%)</title><rect x="1043.0" y="853" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1046.01" y="863.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5,809,183 samples, 0.03%)</title><rect x="99.2" y="949" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="102.19" y="959.5" ></text>
</g>
<g >
<title>__sk_mem_reduce_allocated (2,938,608 samples, 0.02%)</title><rect x="366.9" y="917" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="369.94" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_head (1,979,426 samples, 0.01%)</title><rect x="199.1" y="869" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="202.11" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1,850,271 samples, 0.01%)</title><rect x="581.8" y="901" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="584.82" y="911.5" ></text>
</g>
<g >
<title>sched_clock (1,995,282 samples, 0.01%)</title><rect x="1139.7" y="373" width="0.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1142.68" y="383.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Poller*, webserver::Channel*&gt; &gt;::type&amp; std::get&lt;0ul, webserver::Poller*, webserver::Channel*&gt; (3,926,540 samples, 0.02%)</title><rect x="1070.7" y="997" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1073.66" y="1007.5" ></text>
</g>
<g >
<title>drain_stock (1,915,887 samples, 0.01%)</title><rect x="322.2" y="837" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="325.18" y="847.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&amp; std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (3,689,657 samples, 0.02%)</title><rect x="558.4" y="837" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="561.45" y="847.5" ></text>
</g>
<g >
<title>int&amp;&amp; std::forward&lt;int&gt; (1,906,210 samples, 0.01%)</title><rect x="53.9" y="1109" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="56.88" y="1119.5" ></text>
</g>
<g >
<title>select_idle_cpu (2,016,477 samples, 0.01%)</title><rect x="469.5" y="469" width="0.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="472.46" y="479.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator (1,941,169 samples, 0.01%)</title><rect x="159.2" y="549" width="0.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="162.15" y="559.5" ></text>
</g>
<g >
<title>tcp_sendmsg (3,777,004 samples, 0.02%)</title><rect x="823.0" y="821" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="825.97" y="831.5" ></text>
</g>
<g >
<title>tcp_established_options (1,925,033 samples, 0.01%)</title><rect x="794.5" y="709" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="797.52" y="719.5" ></text>
</g>
<g >
<title>ip_output (1,927,419,117 samples, 9.92%)</title><rect x="675.6" y="661" width="117.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="678.57" y="671.5" >ip_output</text>
</g>
<g >
<title>apparmor_d_instantiate (9,760,539 samples, 0.05%)</title><rect x="325.1" y="933" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="328.05" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (6,880,785 samples, 0.04%)</title><rect x="125.5" y="773" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="128.45" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_addr (2,770,085 samples, 0.01%)</title><rect x="917.6" y="757" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="920.56" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; (3,934,231 samples, 0.02%)</title><rect x="519.7" y="917" width="0.2" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="522.70" y="927.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (4,896,149 samples, 0.03%)</title><rect x="84.7" y="837" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="87.75" y="847.5" ></text>
</g>
<g >
<title>netdev_core_pick_tx (2,002,489 samples, 0.01%)</title><rect x="790.1" y="565" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="793.14" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3,931,641 samples, 0.02%)</title><rect x="903.9" y="869" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="906.89" y="879.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (1,919,298 samples, 0.01%)</title><rect x="95.0" y="933" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="98.02" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,966,907 samples, 0.02%)</title><rect x="630.1" y="757" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="633.06" y="767.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type&amp; std::get&lt;1ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (12,819,414 samples, 0.07%)</title><rect x="1015.7" y="965" width="0.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1018.72" y="975.5" ></text>
</g>
<g >
<title>char* std::__fill_n_a&lt;char*, unsigned long, char&gt; (17,685,413 samples, 0.09%)</title><rect x="211.0" y="853" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="214.01" y="863.5" ></text>
</g>
<g >
<title>__srcu_read_lock (7,714,939 samples, 0.04%)</title><rect x="946.7" y="757" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="949.66" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt;::_Tuple_impl&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; const&amp;, void&gt; (6,002,091 samples, 0.03%)</title><rect x="73.1" y="949" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="76.13" y="959.5" ></text>
</g>
<g >
<title>tcp_set_state (4,778,825 samples, 0.02%)</title><rect x="1174.1" y="997" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1177.14" y="1007.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,902,839 samples, 0.01%)</title><rect x="1024.1" y="1029" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1027.14" y="1039.5" ></text>
</g>
<g >
<title>std::function&lt;void  (20,456,610 samples, 0.11%)</title><rect x="207.6" y="949" width="1.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="210.56" y="959.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,934,265 samples, 0.02%)</title><rect x="196.6" y="885" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="199.60" y="895.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (8,809,399 samples, 0.05%)</title><rect x="54.7" y="1093" width="0.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="57.69" y="1103.5" ></text>
</g>
<g >
<title>inet_csk_clear_xmit_timers (2,925,710 samples, 0.02%)</title><rect x="970.3" y="805" width="0.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="973.29" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (1,814,440 samples, 0.01%)</title><rect x="525.0" y="981" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="528.02" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (4,786,282 samples, 0.02%)</title><rect x="553.4" y="885" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="556.41" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (4,921,002 samples, 0.03%)</title><rect x="1048.0" y="917" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1050.95" y="927.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; __gnu_cxx::__ops::__iter_comp_iter&lt;char const*&gt; (3,011,643 samples, 0.02%)</title><rect x="535.0" y="917" width="0.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="538.02" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8,661,137 samples, 0.04%)</title><rect x="86.1" y="933" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="89.08" y="943.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Acceptor*&gt; &gt;::type&amp; std::get&lt;0ul, webserver::Acceptor*&gt; (6,871,867 samples, 0.04%)</title><rect x="859.4" y="1173" width="0.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="862.44" y="1183.5" ></text>
</g>
<g >
<title>std::_Placeholder&lt;1&gt;&amp; std::__get_helper&lt;1ul, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (2,018,985 samples, 0.01%)</title><rect x="839.8" y="1013" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="842.78" y="1023.5" ></text>
</g>
<g >
<title>std::function&lt;void  (28,754,863 samples, 0.15%)</title><rect x="242.8" y="965" width="1.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="245.79" y="975.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;webserver::Poller*, webserver::Channel*&gt; &gt;::type&amp; std::get&lt;1ul, webserver::Poller*, webserver::Channel*&gt; (5,763,101 samples, 0.03%)</title><rect x="1054.4" y="981" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1057.39" y="991.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::~vector (37,072,588 samples, 0.19%)</title><rect x="1017.2" y="997" width="2.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1020.16" y="1007.5" ></text>
</g>
<g >
<title>skb_release_head_state (3,708,539 samples, 0.02%)</title><rect x="647.9" y="693" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="650.86" y="703.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (10,563,842 samples, 0.05%)</title><rect x="321.7" y="901" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="324.65" y="911.5" ></text>
</g>
<g >
<title>__wake_up_common (1,971,041 samples, 0.01%)</title><rect x="1082.7" y="997" width="0.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1085.68" y="1007.5" ></text>
</g>
<g >
<title>inet_shutdown (2,043,934 samples, 0.01%)</title><rect x="1177.5" y="1045" width="0.1" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="1180.53" y="1055.5" ></text>
</g>
<g >
<title>_itoa_word (3,873,415 samples, 0.02%)</title><rect x="70.8" y="949" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="73.85" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (2,037,613 samples, 0.01%)</title><rect x="550.1" y="885" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="553.07" y="895.5" ></text>
</g>
<g >
<title>tcp_ack (3,999,166 samples, 0.02%)</title><rect x="631.2" y="741" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="634.17" y="751.5" ></text>
</g>
<g >
<title>nf_hook_slow (2,829,193 samples, 0.01%)</title><rect x="792.4" y="645" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="795.44" y="655.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,946,370 samples, 0.01%)</title><rect x="270.1" y="933" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="273.15" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (2,855,526 samples, 0.01%)</title><rect x="497.6" y="837" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="500.57" y="847.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="1077" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1023.36" y="1087.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (9,629,092 samples, 0.05%)</title><rect x="132.7" y="581" width="0.6" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="135.69" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (7,869,641 samples, 0.04%)</title><rect x="75.5" y="981" width="0.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="78.51" y="991.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,923,414 samples, 0.02%)</title><rect x="203.1" y="885" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="206.11" y="895.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (5,071,095 samples, 0.03%)</title><rect x="100.8" y="933" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="103.79" y="943.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (3,139,519,216 samples, 16.16%)</title><rect x="59.1" y="1029" width="190.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="62.11" y="1039.5" >std::__invoke_result&lt;void </text>
</g>
<g >
<title>std::_Function_base::_M_empty (2,980,799 samples, 0.02%)</title><rect x="112.3" y="805" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="115.25" y="815.5" ></text>
</g>
<g >
<title>malloc (5,123,235 samples, 0.03%)</title><rect x="71.7" y="965" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="74.73" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;void  (21,845,383 samples, 0.11%)</title><rect x="206.2" y="933" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="209.18" y="943.5" ></text>
</g>
<g >
<title>skb_clone_tx_timestamp (1,927,090 samples, 0.01%)</title><rect x="734.1" y="69" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="737.15" y="79.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (1,894,616 samples, 0.01%)</title><rect x="944.4" y="821" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="947.42" y="831.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::allocate (10,865,995 samples, 0.06%)</title><rect x="165.6" y="517" width="0.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="168.60" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (2,940,555 samples, 0.02%)</title><rect x="75.3" y="981" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="78.33" y="991.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (18,504,095 samples, 0.10%)</title><rect x="885.4" y="1237" width="1.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="888.40" y="1247.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&amp; std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (1,944,889 samples, 0.01%)</title><rect x="559.0" y="885" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="562.02" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_begin (2,009,663 samples, 0.01%)</title><rect x="90.7" y="949" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="93.74" y="959.5" ></text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (56,055,848 samples, 0.29%)</title><rect x="148.4" y="501" width="3.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="151.38" y="511.5" ></text>
</g>
<g >
<title>tcp_validate_incoming (8,617,336 samples, 0.04%)</title><rect x="655.4" y="725" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="658.39" y="735.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::findCRLF (145,586,429 samples, 0.75%)</title><rect x="532.5" y="965" width="8.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="535.52" y="975.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (14,297,107 samples, 0.07%)</title><rect x="84.2" y="901" width="0.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="87.17" y="911.5" ></text>
</g>
<g >
<title>operator new (7,684,718 samples, 0.04%)</title><rect x="827.2" y="917" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="830.18" y="927.5" ></text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.2.5 (12,700,790 samples, 0.07%)</title><rect x="339.8" y="1077" width="0.7" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="342.77" y="1087.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,916,294 samples, 0.01%)</title><rect x="760.6" y="245" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="763.63" y="255.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (4,858,659 samples, 0.03%)</title><rect x="593.2" y="885" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="596.23" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt;::empty (4,984,036 samples, 0.03%)</title><rect x="105.3" y="981" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="108.32" y="991.5" ></text>
</g>
<g >
<title>operator new (2,049,867 samples, 0.01%)</title><rect x="587.4" y="933" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="590.36" y="943.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;&amp;&gt; (1,929,707 samples, 0.01%)</title><rect x="839.4" y="1029" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="842.43" y="1039.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (5,046,626 samples, 0.03%)</title><rect x="759.9" y="229" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="762.90" y="239.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (9,875,988 samples, 0.05%)</title><rect x="1133.4" y="389" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1136.44" y="399.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr (4,938,299 samples, 0.03%)</title><rect x="98.4" y="869" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="101.35" y="879.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,915,833 samples, 0.02%)</title><rect x="906.9" y="805" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="909.88" y="815.5" ></text>
</g>
<g >
<title>kmem_cache_free (8,904,568 samples, 0.05%)</title><rect x="781.0" y="453" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="784.01" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (3,918,644 samples, 0.02%)</title><rect x="119.1" y="677" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="122.06" y="687.5" ></text>
</g>
<g >
<title>available_idle_cpu (2,016,477 samples, 0.01%)</title><rect x="469.5" y="437" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="472.46" y="447.5" ></text>
</g>
<g >
<title>dnotify_flush (3,027,330 samples, 0.02%)</title><rect x="1001.3" y="933" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1004.28" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_Alloc_node::operator (40,546,115 samples, 0.21%)</title><rect x="96.3" y="933" width="2.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="99.31" y="943.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;::_M_head (1,823,265 samples, 0.01%)</title><rect x="838.3" y="981" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="841.33" y="991.5" ></text>
</g>
<g >
<title>inet_twsk_kill (2,022,617 samples, 0.01%)</title><rect x="711.1" y="325" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="714.09" y="335.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr (10,061,270 samples, 0.05%)</title><rect x="100.5" y="965" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="103.49" y="975.5" ></text>
</g>
<g >
<title>page_counter_uncharge (20,266,803 samples, 0.10%)</title><rect x="380.9" y="821" width="1.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="383.86" y="831.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (2,989,351 samples, 0.02%)</title><rect x="476.3" y="549" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="479.31" y="559.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (1,860,578 samples, 0.01%)</title><rect x="198.2" y="901" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="201.24" y="911.5" ></text>
</g>
<g >
<title>eth_type_trans (3,976,941 samples, 0.02%)</title><rect x="1157.8" y="757" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1160.84" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_key (4,838,664 samples, 0.02%)</title><rect x="919.5" y="789" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="922.53" y="799.5" ></text>
</g>
<g >
<title>woken_wake_function (11,861,708 samples, 0.06%)</title><rect x="1128.9" y="453" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1131.90" y="463.5" ></text>
</g>
<g >
<title>timer_delete (4,894,674 samples, 0.03%)</title><rect x="977.8" y="773" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="980.76" y="783.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,897,548 samples, 0.01%)</title><rect x="564.9" y="901" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="567.92" y="911.5" ></text>
</g>
<g >
<title>webserver::Poller*&amp; std::forward&lt;webserver::Poller*&amp;&gt; (1,956,362 samples, 0.01%)</title><rect x="1053.8" y="949" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1056.83" y="959.5" ></text>
</g>
<g >
<title>__GI___getpeername (154,730,329 samples, 0.80%)</title><rect x="230.6" y="949" width="9.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="233.59" y="959.5" ></text>
</g>
<g >
<title>pty_write_room (2,998,331 samples, 0.02%)</title><rect x="479.0" y="645" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="481.99" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (5,954,705 samples, 0.03%)</title><rect x="18.3" y="1253" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="21.31" y="1263.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl::~_Vector_impl (2,971,355 samples, 0.02%)</title><rect x="39.7" y="1269" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="42.67" y="1279.5" ></text>
</g>
<g >
<title>__x64_sys_accept (7,529,352 samples, 0.04%)</title><rect x="252.9" y="1061" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="255.86" y="1071.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (3,811,263 samples, 0.02%)</title><rect x="109.3" y="837" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="112.26" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (5,781,838 samples, 0.03%)</title><rect x="425.7" y="901" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="428.75" y="911.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (8,984,548 samples, 0.05%)</title><rect x="436.4" y="789" width="0.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="439.37" y="799.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (11,456,814 samples, 0.06%)</title><rect x="72.0" y="981" width="0.7" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="75.04" y="991.5" ></text>
</g>
<g >
<title>tcp_cleanup_ulp (3,705,514 samples, 0.02%)</title><rect x="972.6" y="805" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="975.58" y="815.5" ></text>
</g>
<g >
<title>x64_sys_call (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="981" width="0.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1183.50" y="991.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,927,290 samples, 0.01%)</title><rect x="192.9" y="949" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="195.91" y="959.5" ></text>
</g>
<g >
<title>std::function&lt;void  (221,281,955 samples, 1.14%)</title><rect x="111.8" y="821" width="13.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="114.83" y="831.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (4,962,604 samples, 0.03%)</title><rect x="600.7" y="917" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="603.72" y="927.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&amp; std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (1,943,371 samples, 0.01%)</title><rect x="502.9" y="805" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="505.88" y="815.5" ></text>
</g>
<g >
<title>srso_alias_untrain_ret (1,979,318 samples, 0.01%)</title><rect x="484.1" y="821" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="487.12" y="831.5" ></text>
</g>
<g >
<title>webserver::Poller* const&amp; std::__get_helper&lt;0ul, webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; (1,942,737 samples, 0.01%)</title><rect x="1056.3" y="1029" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1059.26" y="1039.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_key (6,858,179 samples, 0.04%)</title><rect x="919.4" y="805" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="922.41" y="815.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,908,739 samples, 0.02%)</title><rect x="397.1" y="1061" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="400.08" y="1071.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (2,977,086 samples, 0.02%)</title><rect x="466.3" y="517" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="469.34" y="527.5" ></text>
</g>
<g >
<title>__schedule (1,852,672 samples, 0.01%)</title><rect x="629.9" y="741" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="632.95" y="751.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1,957,974 samples, 0.01%)</title><rect x="205.3" y="885" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="208.35" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (6,976,052 samples, 0.04%)</title><rect x="548.2" y="917" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="551.22" y="927.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (14,827,126 samples, 0.08%)</title><rect x="191.0" y="949" width="0.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="193.99" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (7,700,093 samples, 0.04%)</title><rect x="12.2" y="1365" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="15.19" y="1375.5" ></text>
</g>
<g >
<title>webserver::Socket::setKeepAlive (1,974,476 samples, 0.01%)</title><rect x="173.9" y="981" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="176.92" y="991.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Poller*, webserver::Channel*&gt;::_Tuple_impl&lt;webserver::Poller*, webserver::Channel*&amp;, void&gt; (3,993,508 samples, 0.02%)</title><rect x="1058.7" y="1061" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1061.74" y="1071.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (7,223,933,070 samples, 37.19%)</title><rect x="401.8" y="1045" width="438.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="404.79" y="1055.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::get_deleter (13,837,782 samples, 0.07%)</title><rect x="1015.7" y="997" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1018.66" y="1007.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (197,473,936 samples, 1.02%)</title><rect x="910.2" y="917" width="12.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="913.17" y="927.5" ></text>
</g>
<g >
<title>tcp_check_space (1,914,989 samples, 0.01%)</title><rect x="1165.2" y="949" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1168.20" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (20,677,820 samples, 0.11%)</title><rect x="905.8" y="949" width="1.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="908.80" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_valptr (1,940,513 samples, 0.01%)</title><rect x="92.9" y="933" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="95.90" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_destroy_node (2,960,772 samples, 0.02%)</title><rect x="1062.7" y="869" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1065.65" y="879.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (5,985,604 samples, 0.03%)</title><rect x="932.0" y="965" width="0.3" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="934.96" y="975.5" ></text>
</g>
<g >
<title>webserver::Socket::getHostAddr (183,463,870 samples, 0.94%)</title><rect x="219.3" y="965" width="11.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="222.26" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, void&gt; (13,641,283 samples, 0.07%)</title><rect x="546.1" y="949" width="0.9" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="549.14" y="959.5" ></text>
</g>
<g >
<title>tcp_rcv_state_process (9,665,508 samples, 0.05%)</title><rect x="656.0" y="741" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="658.98" y="751.5" ></text>
</g>
<g >
<title>malloc (3,851,239 samples, 0.02%)</title><rect x="831.4" y="821" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="834.42" y="831.5" ></text>
</g>
<g >
<title>operator new (6,908,378 samples, 0.04%)</title><rect x="213.5" y="885" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="216.53" y="895.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr (3,994,028 samples, 0.02%)</title><rect x="911.5" y="853" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="914.53" y="863.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInLoopThread (3,047,879 samples, 0.02%)</title><rect x="615.1" y="965" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="618.12" y="975.5" ></text>
</g>
<g >
<title>[unknown] (6,925,603 samples, 0.04%)</title><rect x="175.3" y="965" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="178.29" y="975.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4,984,634 samples, 0.03%)</title><rect x="594.1" y="917" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="597.12" y="927.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::updateChannel (239,282,315 samples, 1.23%)</title><rect x="154.2" y="629" width="14.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="157.20" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,872,009 samples, 0.01%)</title><rect x="111.3" y="821" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="114.26" y="831.5" ></text>
</g>
<g >
<title>queue_work_on (5,403,295 samples, 0.03%)</title><rect x="1180.9" y="805" width="0.3" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1183.86" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_drop_node (9,926,903 samples, 0.05%)</title><rect x="614.0" y="901" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="616.98" y="911.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (47,139,714 samples, 0.24%)</title><rect x="594.5" y="965" width="2.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="597.48" y="975.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,943,227 samples, 0.01%)</title><rect x="246.3" y="869" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="249.35" y="879.5" ></text>
</g>
<g >
<title>std::function&lt;void  (63,533,430 samples, 0.33%)</title><rect x="904.7" y="997" width="3.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="907.72" y="1007.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (173,346,648 samples, 0.89%)</title><rect x="910.8" y="885" width="10.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="913.77" y="895.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9,910,657 samples, 0.05%)</title><rect x="420.7" y="869" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="423.73" y="879.5" ></text>
</g>
<g >
<title>__ip_finish_output (130,944,249 samples, 0.67%)</title><rect x="728.3" y="165" width="8.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="731.32" y="175.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (2,917,046 samples, 0.02%)</title><rect x="84.9" y="821" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="87.87" y="831.5" ></text>
</g>
<g >
<title>tcp_delack_max (2,028,133 samples, 0.01%)</title><rect x="1123.8" y="501" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1126.75" y="511.5" ></text>
</g>
<g >
<title>inet_release (3,954,570 samples, 0.02%)</title><rect x="998.3" y="885" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1001.34" y="895.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (1,896,051 samples, 0.01%)</title><rect x="925.0" y="1141" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="928.02" y="1151.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_begin (5,848,661 samples, 0.03%)</title><rect x="1048.4" y="901" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1051.38" y="911.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (6,841,829 samples, 0.04%)</title><rect x="505.8" y="885" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="508.76" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (4,816,625 samples, 0.02%)</title><rect x="557.9" y="837" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="560.86" y="847.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,883,545 samples, 0.01%)</title><rect x="1025.8" y="1077" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1028.79" y="1087.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::poll (311,281,351 samples, 1.60%)</title><rect x="861.7" y="1301" width="18.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="864.71" y="1311.5" ></text>
</g>
<g >
<title>page_counter_cancel (7,744,107 samples, 0.04%)</title><rect x="276.6" y="869" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="279.63" y="879.5" ></text>
</g>
<g >
<title>_int_free (1,995,213 samples, 0.01%)</title><rect x="196.7" y="869" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="199.65" y="879.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_Vector_impl::_Vector_impl (2,022,870 samples, 0.01%)</title><rect x="219.0" y="933" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="221.96" y="943.5" ></text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.2.5 (5,798,669 samples, 0.03%)</title><rect x="487.3" y="869" width="0.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="490.29" y="879.5" ></text>
</g>
<g >
<title>webserver::Channel::setWritableCallback (20,456,610 samples, 0.11%)</title><rect x="207.6" y="965" width="1.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="210.56" y="975.5" ></text>
</g>
<g >
<title>strlen@plt (1,995,735 samples, 0.01%)</title><rect x="78.2" y="965" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="81.19" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_get_Node_allocator (1,929,936 samples, 0.01%)</title><rect x="96.7" y="885" width="0.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="99.71" y="895.5" ></text>
</g>
<g >
<title>ktime_get (4,672,899 samples, 0.02%)</title><rect x="796.0" y="725" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="798.98" y="735.5" ></text>
</g>
<g >
<title>release_sock (15,485,239 samples, 0.08%)</title><rect x="360.8" y="933" width="0.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="363.77" y="943.5" ></text>
</g>
<g >
<title>ktime_get (3,889,037 samples, 0.02%)</title><rect x="666.0" y="741" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="668.96" y="751.5" ></text>
</g>
<g >
<title>x64_sys_call (4,019,684 samples, 0.02%)</title><rect x="1004.4" y="981" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1007.43" y="991.5" ></text>
</g>
<g >
<title>ep_send_events (174,343,168 samples, 0.90%)</title><rect x="23.3" y="1189" width="10.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="26.35" y="1199.5" ></text>
</g>
<g >
<title>webserver::MutexLock::unlock (2,911,548 samples, 0.01%)</title><rect x="1189.5" y="1269" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1192.48" y="1279.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (2,976,699 samples, 0.02%)</title><rect x="436.7" y="773" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="439.67" y="783.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (3,022,765 samples, 0.02%)</title><rect x="347.5" y="1061" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="350.51" y="1071.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (1,885,052 samples, 0.01%)</title><rect x="126.4" y="757" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="129.42" y="767.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt;, false&gt;::~_Head_base (2,877,284 samples, 0.01%)</title><rect x="72.6" y="933" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="75.56" y="943.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr&lt;webserver::TcpConnection, void&gt; (42,833,279 samples, 0.22%)</title><rect x="101.6" y="981" width="2.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="104.58" y="991.5" ></text>
</g>
<g >
<title>__check_heap_object (2,879,203 samples, 0.01%)</title><rect x="445.7" y="629" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="448.74" y="639.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,851,996 samples, 0.02%)</title><rect x="831.4" y="869" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="834.42" y="879.5" ></text>
</g>
<g >
<title>release_sock (9,700,621 samples, 0.05%)</title><rect x="236.0" y="837" width="0.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="239.02" y="847.5" ></text>
</g>
<g >
<title>webserver::HttpParser::parseRequestLine (117,665,255 samples, 0.61%)</title><rect x="561.4" y="965" width="7.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="564.42" y="975.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (2,866,324 samples, 0.01%)</title><rect x="236.4" y="805" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="239.43" y="815.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (1,947,900 samples, 0.01%)</title><rect x="1181.0" y="709" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1183.98" y="719.5" ></text>
</g>
<g >
<title>iput (227,465,993 samples, 1.17%)</title><rect x="941.5" y="853" width="13.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="944.52" y="863.5" ></text>
</g>
<g >
<title>ip_local_deliver (1,366,161,004 samples, 7.03%)</title><rect x="693.2" y="405" width="83.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="696.16" y="415.5" >ip_local_..</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,780,005 samples, 0.01%)</title><rect x="518.6" y="869" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="521.60" y="879.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (3,938,640 samples, 0.02%)</title><rect x="413.4" y="933" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="416.38" y="943.5" ></text>
</g>
<g >
<title>move_addr_to_user (3,020,036 samples, 0.02%)</title><rect x="334.4" y="1013" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="337.37" y="1023.5" ></text>
</g>
<g >
<title>__sk_destruct (6,964,419 samples, 0.04%)</title><rect x="983.7" y="805" width="0.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="986.71" y="815.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,984,712 samples, 0.02%)</title><rect x="876.7" y="1221" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="879.73" y="1231.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::State::setConnectionState (2,014,334 samples, 0.01%)</title><rect x="110.6" y="837" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="113.55" y="847.5" ></text>
</g>
<g >
<title>netif_rx_internal (19,508,171 samples, 0.10%)</title><rect x="1156.7" y="741" width="1.1" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="1159.65" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1,940,826 samples, 0.01%)</title><rect x="587.6" y="965" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="590.61" y="975.5" ></text>
</g>
<g >
<title>__fdget (1,936,995 samples, 0.01%)</title><rect x="238.8" y="837" width="0.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="241.84" y="847.5" ></text>
</g>
<g >
<title>sock_alloc_file (375,652,305 samples, 1.93%)</title><rect x="306.8" y="997" width="22.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="309.76" y="1007.5" >s..</text>
</g>
<g >
<title>ip_mc_drop_socket (2,812,113 samples, 0.01%)</title><rect x="997.9" y="869" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1000.87" y="879.5" ></text>
</g>
<g >
<title>tcp_send_mss (2,943,430 samples, 0.02%)</title><rect x="658.1" y="789" width="0.1" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="661.06" y="799.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (436,299,085 samples, 2.25%)</title><rect x="630.3" y="757" width="26.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="633.30" y="767.5" >t..</text>
</g>
<g >
<title>queue_work_on (3,784,905 samples, 0.02%)</title><rect x="454.2" y="613" width="0.3" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="457.22" y="623.5" ></text>
</g>
<g >
<title>__cond_resched (2,993,746 samples, 0.02%)</title><rect x="628.9" y="773" width="0.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="631.92" y="783.5" ></text>
</g>
<g >
<title>skb_attempt_defer_free (3,921,162 samples, 0.02%)</title><rect x="361.7" y="933" width="0.2" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="364.71" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (1,926,521 samples, 0.01%)</title><rect x="590.0" y="933" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="593.02" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::data (3,699,401 samples, 0.02%)</title><rect x="540.2" y="933" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="543.24" y="943.5" ></text>
</g>
<g >
<title>tcp_send_mss (60,420,775 samples, 0.31%)</title><rect x="807.9" y="773" width="3.6" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="810.86" y="783.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (138,003,230 samples, 0.71%)</title><rect x="551.7" y="933" width="8.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="554.69" y="943.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,043,108 samples, 0.01%)</title><rect x="1136.8" y="405" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1139.77" y="415.5" ></text>
</g>
<g >
<title>tcp_ack (287,320,475 samples, 1.48%)</title><rect x="633.1" y="725" width="17.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="636.07" y="735.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInPendingFunctors (3,892,936 samples, 0.02%)</title><rect x="1071.3" y="1141" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1074.26" y="1151.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (5,013,759 samples, 0.03%)</title><rect x="60.4" y="997" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="63.37" y="1007.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_lru_noprof (7,779,488 samples, 0.04%)</title><rect x="294.0" y="949" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="296.97" y="959.5" ></text>
</g>
<g >
<title>__sys_getsockname (113,014,667 samples, 0.58%)</title><rect x="221.7" y="869" width="6.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="224.65" y="879.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::get (2,927,315 samples, 0.02%)</title><rect x="1056.2" y="1077" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1059.20" y="1087.5" ></text>
</g>
<g >
<title>_IO_fwrite (3,444,853 samples, 0.02%)</title><rect x="485.6" y="885" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="488.60" y="895.5" ></text>
</g>
<g >
<title>std::_Placeholder&lt;3&gt;&amp; std::__get_helper&lt;3ul, std::_Placeholder&lt;3&gt;&gt; (3,912,440 samples, 0.02%)</title><rect x="840.1" y="1013" width="0.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="843.14" y="1023.5" ></text>
</g>
<g >
<title>__get_user_4 (5,938,161 samples, 0.03%)</title><rect x="222.0" y="853" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="225.01" y="863.5" ></text>
</g>
<g >
<title>do_epoll_ctl (305,620,852 samples, 1.57%)</title><rect x="134.0" y="549" width="18.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="137.04" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (3,994,028 samples, 0.02%)</title><rect x="911.5" y="837" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="914.53" y="847.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8,839,506 samples, 0.05%)</title><rect x="581.2" y="885" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="584.17" y="895.5" ></text>
</g>
<g >
<title>up_read (6,812,055 samples, 0.04%)</title><rect x="481.2" y="677" width="0.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="484.18" y="687.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,917,656 samples, 0.01%)</title><rect x="109.7" y="837" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="112.73" y="847.5" ></text>
</g>
<g >
<title>refill_obj_stock (6,703,764 samples, 0.03%)</title><rect x="1036.9" y="805" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1039.86" y="815.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_Vector_impl::_Vector_impl (4,912,239 samples, 0.03%)</title><rect x="218.5" y="917" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="221.48" y="927.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::Channel*, false&gt;::_Head_base (1,953,158 samples, 0.01%)</title><rect x="200.1" y="901" width="0.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="203.13" y="911.5" ></text>
</g>
<g >
<title>webserver::TcpConnection*&amp;&amp; std::forward&lt;webserver::TcpConnection*&gt; (1,986,285 samples, 0.01%)</title><rect x="192.2" y="949" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="195.25" y="959.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,756,852 samples, 0.02%)</title><rect x="993.9" y="741" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="996.94" y="751.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (1,975,014,873 samples, 10.17%)</title><rect x="673.4" y="693" width="120.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="676.45" y="703.5" >__ip_queue_xmit</text>
</g>
<g >
<title>ip_skb_dst_mtu (3,860,639 samples, 0.02%)</title><rect x="736.0" y="149" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="738.99" y="159.5" ></text>
</g>
<g >
<title>inet_getname (28,077,347 samples, 0.14%)</title><rect x="234.9" y="853" width="1.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="237.90" y="863.5" ></text>
</g>
<g >
<title>_raw_write_unlock_bh (1,999,396 samples, 0.01%)</title><rect x="981.3" y="837" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="984.28" y="847.5" ></text>
</g>
<g >
<title>read_tsc (6,883,811 samples, 0.04%)</title><rect x="654.2" y="709" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="657.17" y="719.5" ></text>
</g>
<g >
<title>sched_tick (2,000,143 samples, 0.01%)</title><rect x="476.2" y="485" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="479.18" y="495.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::operator (3,039,550 samples, 0.02%)</title><rect x="92.6" y="917" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="95.60" y="927.5" ></text>
</g>
<g >
<title>webserver::Channel::remove (257,651,646 samples, 1.33%)</title><rect x="1055.5" y="1141" width="15.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1058.49" y="1151.5" ></text>
</g>
<g >
<title>_raw_spin_lock (4,971,497 samples, 0.03%)</title><rect x="324.6" y="933" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="327.57" y="943.5" ></text>
</g>
<g >
<title>tty_ldisc_deref (3,738,677 samples, 0.02%)</title><rect x="483.3" y="709" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="486.26" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="1013" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1183.50" y="1023.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (3,896,796 samples, 0.02%)</title><rect x="1043.9" y="853" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1046.85" y="863.5" ></text>
</g>
<g >
<title>boost::any::operator= (6,722,527 samples, 0.03%)</title><rect x="117.3" y="677" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="120.28" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_M_get_Tp_allocator (9,533,405 samples, 0.05%)</title><rect x="35.6" y="1301" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="38.56" y="1311.5" ></text>
</g>
<g >
<title>webserver::EventLoop::loop (19,348,934,740 samples, 99.62%)</title><rect x="14.1" y="1317" width="1175.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="17.12" y="1327.5" >webserver::EventLoop::loop</text>
</g>
<g >
<title>srso_alias_safe_ret (3,999,955 samples, 0.02%)</title><rect x="1123.5" y="469" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1126.51" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (291,159,696 samples, 1.50%)</title><rect x="1028.3" y="933" width="17.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1031.25" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_write (10,781,732 samples, 0.06%)</title><rect x="339.8" y="1045" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="342.83" y="1055.5" ></text>
</g>
<g >
<title>__strlen_avx2 (3,051,423 samples, 0.02%)</title><rect x="427.5" y="885" width="0.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="430.50" y="895.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (6,855,073 samples, 0.04%)</title><rect x="638.5" y="709" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="641.49" y="719.5" ></text>
</g>
<g >
<title>__sys_getsockopt (1,922,851 samples, 0.01%)</title><rect x="339.1" y="1045" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="342.14" y="1055.5" ></text>
</g>
<g >
<title>new_slab (6,849,383 samples, 0.04%)</title><rect x="148.0" y="485" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="150.96" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4,851,771 samples, 0.02%)</title><rect x="488.5" y="853" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="491.52" y="863.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (2,903,095 samples, 0.01%)</title><rect x="1055.2" y="1045" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1058.19" y="1055.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (1,983,277 samples, 0.01%)</title><rect x="254.0" y="1061" width="0.2" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="257.03" y="1071.5" ></text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.2.5 (5,918,924 samples, 0.03%)</title><rect x="431.6" y="885" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="434.56" y="895.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (7,647,760 samples, 0.04%)</title><rect x="329.6" y="997" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="332.64" y="1007.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (3,872,206 samples, 0.02%)</title><rect x="881.6" y="1285" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="884.57" y="1295.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,618,904 samples, 0.01%)</title><rect x="382.9" y="917" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="385.86" y="927.5" ></text>
</g>
<g >
<title>strcmp (4,009,436 samples, 0.02%)</title><rect x="325.6" y="933" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="328.65" y="943.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (7,871,970 samples, 0.04%)</title><rect x="18.8" y="1253" width="0.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="21.80" y="1263.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (343,260,478 samples, 1.77%)</title><rect x="132.3" y="613" width="20.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="135.28" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_left (1,957,707 samples, 0.01%)</title><rect x="553.3" y="885" width="0.1" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="556.29" y="895.5" ></text>
</g>
<g >
<title>check_heap_object (14,453,183 samples, 0.07%)</title><rect x="663.7" y="725" width="0.9" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="666.72" y="735.5" ></text>
</g>
<g >
<title>__sk_mem_reduce_allocated (99,466,158 samples, 0.51%)</title><rect x="376.8" y="901" width="6.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="379.76" y="911.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::setStatusCode (2,008,626 samples, 0.01%)</title><rect x="506.2" y="901" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="509.17" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (13,551,651 samples, 0.07%)</title><rect x="497.2" y="853" width="0.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="500.22" y="863.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (1,927,384 samples, 0.01%)</title><rect x="225.1" y="821" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="228.09" y="831.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::State::setConnectionState (5,040,020 samples, 0.03%)</title><rect x="169.9" y="821" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="172.94" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (1,993,307 samples, 0.01%)</title><rect x="611.0" y="853" width="0.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="613.97" y="863.5" ></text>
</g>
<g >
<title>__printf_buffer_pad_1 (2,995,653 samples, 0.02%)</title><rect x="511.6" y="837" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="514.59" y="847.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;2ul, webserver::TimeStamp&amp;&amp;, false&gt;::_Head_base&lt;webserver::TimeStamp&gt; (1,972,867 samples, 0.01%)</title><rect x="400.6" y="965" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="403.55" y="975.5" ></text>
</g>
<g >
<title>skb_release_data (5,904,446 samples, 0.03%)</title><rect x="642.6" y="677" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="645.56" y="687.5" ></text>
</g>
<g >
<title>consume_obj_stock (2,003,186 samples, 0.01%)</title><rect x="315.2" y="901" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="318.24" y="911.5" ></text>
</g>
<g >
<title>process_output_block (9,772,824 samples, 0.05%)</title><rect x="339.9" y="869" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="342.89" y="879.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::swap (2,956,117 samples, 0.02%)</title><rect x="568.8" y="949" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="571.81" y="959.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (4,919,055 samples, 0.03%)</title><rect x="775.7" y="373" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="778.75" y="383.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (2,822,774 samples, 0.01%)</title><rect x="321.5" y="885" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="324.48" y="895.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (250,953,800 samples, 1.29%)</title><rect x="19.3" y="1237" width="15.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="22.27" y="1247.5" ></text>
</g>
<g >
<title>operator new (1,960,784 samples, 0.01%)</title><rect x="117.2" y="661" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="120.16" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (3,002,067 samples, 0.02%)</title><rect x="410.2" y="981" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="413.16" y="991.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (1,991,241 samples, 0.01%)</title><rect x="614.4" y="869" width="0.1" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="617.41" y="879.5" ></text>
</g>
<g >
<title>_raw_spin_lock (3,975,940 samples, 0.02%)</title><rect x="136.5" y="533" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="139.47" y="543.5" ></text>
</g>
<g >
<title>kmem_cache_free (27,297,725 samples, 0.14%)</title><rect x="958.3" y="901" width="1.7" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="961.30" y="911.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,978,634 samples, 0.01%)</title><rect x="800.6" y="629" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="803.65" y="639.5" ></text>
</g>
<g >
<title>__check_object_size (22,374,207 samples, 0.12%)</title><rect x="445.1" y="677" width="1.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="448.10" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::_M_head (1,980,707 samples, 0.01%)</title><rect x="921.6" y="853" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="924.65" y="863.5" ></text>
</g>
<g >
<title>tcp_current_mss (4,859,175 samples, 0.03%)</title><rect x="665.5" y="773" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="668.49" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (1,896,615 samples, 0.01%)</title><rect x="583.6" y="949" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="586.58" y="959.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (1,997,971 samples, 0.01%)</title><rect x="136.7" y="533" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="139.71" y="543.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; std::forward_as_tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (2,957,224 samples, 0.02%)</title><rect x="113.0" y="757" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="115.98" y="767.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3,896,047 samples, 0.02%)</title><rect x="497.7" y="805" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="500.75" y="815.5" ></text>
</g>
<g >
<title>__put_user_nocheck_4 (2,921,527 samples, 0.02%)</title><rect x="234.2" y="853" width="0.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="237.18" y="863.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::readFromFd (67,208,785 samples, 0.35%)</title><rect x="842.4" y="1125" width="4.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="845.38" y="1135.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;char const  (1,971,649 samples, 0.01%)</title><rect x="524.9" y="981" width="0.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="527.90" y="991.5" ></text>
</g>
<g >
<title>webserver::CurrentThread::tid (2,913,684 samples, 0.02%)</title><rect x="836.7" y="901" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="839.72" y="911.5" ></text>
</g>
<g >
<title>__inet_accept (33,961,904 samples, 0.17%)</title><rect x="261.5" y="981" width="2.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="264.51" y="991.5" ></text>
</g>
<g >
<title>malloc (1,890,117 samples, 0.01%)</title><rect x="852.0" y="965" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="855.03" y="975.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (12,909,736 samples, 0.07%)</title><rect x="459.5" y="597" width="0.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="462.52" y="607.5" ></text>
</g>
<g >
<title>__inet_lookup_established (22,722,612 samples, 0.12%)</title><rect x="1112.7" y="565" width="1.4" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1115.69" y="575.5" ></text>
</g>
<g >
<title>_raw_write_lock_irq (1,937,133 samples, 0.01%)</title><rect x="26.2" y="1173" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="29.17" y="1183.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::max_size (2,725,579 samples, 0.01%)</title><rect x="218.1" y="933" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="221.08" y="943.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,968,372 samples, 0.01%)</title><rect x="631.1" y="741" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="634.05" y="751.5" ></text>
</g>
<g >
<title>tcp_data_queue (1,987,762 samples, 0.01%)</title><rect x="631.4" y="741" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="634.41" y="751.5" ></text>
</g>
<g >
<title>__GI___snprintf (3,006,293 samples, 0.02%)</title><rect x="416.7" y="901" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="419.66" y="911.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,933,894 samples, 0.01%)</title><rect x="72.6" y="885" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="75.62" y="895.5" ></text>
</g>
<g >
<title>apparmor_file_permission (18,770,963 samples, 0.10%)</title><rect x="393.7" y="981" width="1.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="396.72" y="991.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (4,879,648 samples, 0.03%)</title><rect x="1068.5" y="901" width="0.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1071.48" y="911.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::setMethod (1,767,131 samples, 0.01%)</title><rect x="565.8" y="933" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="568.82" y="943.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_skmem (65,532,453 samples, 0.34%)</title><rect x="643.2" y="661" width="3.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="646.16" y="671.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;webserver::TcpConnection&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::erase[abi:cxx11] (58,125,796 samples, 0.30%)</title><rect x="912.7" y="837" width="3.6" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="915.74" y="847.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (2,008,305 samples, 0.01%)</title><rect x="103.8" y="901" width="0.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="106.82" y="911.5" ></text>
</g>
<g >
<title>__fdget (2,841,934 samples, 0.01%)</title><rect x="1076.0" y="1029" width="0.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1078.99" y="1039.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::~shared_ptr (7,886,027 samples, 0.04%)</title><rect x="125.4" y="821" width="0.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="128.39" y="831.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (4,028,575 samples, 0.02%)</title><rect x="45.9" y="1237" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="48.86" y="1247.5" ></text>
</g>
<g >
<title>netif_skb_features (4,156,617 samples, 0.02%)</title><rect x="791.3" y="549" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="794.32" y="559.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (5,789,505 samples, 0.03%)</title><rect x="759.2" y="165" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="762.15" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; (2,937,924 samples, 0.02%)</title><rect x="404.0" y="997" width="0.2" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="407.02" y="1007.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (11,735,129 samples, 0.06%)</title><rect x="831.0" y="885" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="834.00" y="895.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;long&gt; &gt;, std::is_move_constructible&lt;long&gt;, std::is_move_assignable&lt;long&gt; &gt;::value, void&gt;::type std::swap&lt;long&gt; (2,765,553 samples, 0.01%)</title><rect x="573.4" y="933" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="576.42" y="943.5" ></text>
</g>
<g >
<title>ip_queue_xmit (1,981,023,199 samples, 10.20%)</title><rect x="673.4" y="709" width="120.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="676.45" y="719.5" >ip_queue_xmit</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::data (2,855,243 samples, 0.01%)</title><rect x="543.7" y="933" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="546.68" y="943.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2,853,891 samples, 0.01%)</title><rect x="127.5" y="789" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="130.48" y="799.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::allocate (4,778,863 samples, 0.02%)</title><rect x="166.3" y="533" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="169.26" y="543.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (23,080,343 samples, 0.12%)</title><rect x="197.1" y="949" width="1.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="200.07" y="959.5" ></text>
</g>
<g >
<title>__sys_getpeername (103,575,070 samples, 0.53%)</title><rect x="232.7" y="869" width="6.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="235.66" y="879.5" ></text>
</g>
<g >
<title>kfree_skbmem (10,812,704 samples, 0.06%)</title><rect x="780.9" y="469" width="0.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="783.89" y="479.5" ></text>
</g>
<g >
<title>tcp_wfree (3,896,653 samples, 0.02%)</title><rect x="1158.7" y="773" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1161.67" y="783.5" ></text>
</g>
<g >
<title> (8,595,342 samples, 0.04%)</title><rect x="198.7" y="949" width="0.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="201.71" y="959.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (2,329,571,897 samples, 11.99%)</title><rect x="665.8" y="757" width="141.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="668.79" y="767.5" >__tcp_push_pendin..</text>
</g>
<g >
<title>std::remove_reference&lt;bool  (3,829,616 samples, 0.02%)</title><rect x="203.4" y="901" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="206.40" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (5,926,167 samples, 0.03%)</title><rect x="605.6" y="949" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="608.58" y="959.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::function&lt;void  (2,936,837 samples, 0.02%)</title><rect x="851.6" y="1045" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="854.56" y="1055.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::max&lt;unsigned long&gt; (4,029,711 samples, 0.02%)</title><rect x="835.4" y="901" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="838.36" y="911.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_ptr (3,732,201 samples, 0.02%)</title><rect x="126.4" y="773" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="129.36" y="783.5" ></text>
</g>
<g >
<title>ldsem_up_read (4,894,979 samples, 0.03%)</title><rect x="481.6" y="693" width="0.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="484.59" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (5,015,729 samples, 0.03%)</title><rect x="889.8" y="1157" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="892.77" y="1167.5" ></text>
</g>
<g >
<title>__printf_buffer_write (2,842,258 samples, 0.01%)</title><rect x="600.4" y="901" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="603.37" y="911.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (8,662,197 samples, 0.04%)</title><rect x="43.1" y="1253" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="46.13" y="1263.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (2,066,526,800 samples, 10.64%)</title><rect x="669.5" y="725" width="125.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="672.50" y="735.5" >__tcp_transmit_..</text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1,963,551 samples, 0.01%)</title><rect x="200.8" y="965" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="203.81" y="975.5" ></text>
</g>
<g >
<title>char const* std::__search&lt;char const*, char const*, __gnu_cxx::__ops::_Iter_equal_to_iter&gt; (105,536,523 samples, 0.54%)</title><rect x="533.6" y="933" width="6.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="536.65" y="943.5" ></text>
</g>
<g >
<title>_raw_read_unlock_irqrestore (1,981,902 samples, 0.01%)</title><rect x="1082.2" y="949" width="0.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1085.21" y="959.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (3,882,129 samples, 0.02%)</title><rect x="1007.9" y="965" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1010.90" y="975.5" ></text>
</g>
<g >
<title>char* std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_data_ptr&lt;char&gt; (3,969,606 samples, 0.02%)</title><rect x="542.1" y="933" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="545.14" y="943.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (2,930,600 samples, 0.02%)</title><rect x="238.8" y="853" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="241.78" y="863.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::get (6,072,574 samples, 0.03%)</title><rect x="126.2" y="789" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="129.22" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::operator (4,873,240 samples, 0.03%)</title><rect x="36.9" y="1301" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="39.86" y="1311.5" ></text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (20,425,102 samples, 0.11%)</title><rect x="145.0" y="437" width="1.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="147.97" y="447.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (12,759,020 samples, 0.07%)</title><rect x="1039.9" y="837" width="0.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1042.88" y="847.5" ></text>
</g>
<g >
<title>sock_def_readable (4,801,250 samples, 0.02%)</title><rect x="742.3" y="293" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="745.32" y="303.5" ></text>
</g>
<g >
<title>malloc (2,922,893 samples, 0.02%)</title><rect x="208.1" y="837" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="211.08" y="847.5" ></text>
</g>
<g >
<title>netif_rx_internal (21,681,370 samples, 0.11%)</title><rect x="786.4" y="517" width="1.3" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="789.39" y="527.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (3,850,250 samples, 0.02%)</title><rect x="817.3" y="693" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="820.28" y="703.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (23,882,006 samples, 0.12%)</title><rect x="245.0" y="933" width="1.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="248.02" y="943.5" ></text>
</g>
<g >
<title>webserver::MutexLock::unlock (5,948,294 samples, 0.03%)</title><rect x="856.3" y="1077" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="859.29" y="1087.5" ></text>
</g>
<g >
<title>std::function&lt;void  (175,892,103 samples, 0.91%)</title><rect x="79.1" y="981" width="10.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="82.06" y="991.5" ></text>
</g>
<g >
<title>xas_start (8,732,726 samples, 0.04%)</title><rect x="302.2" y="853" width="0.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="305.15" y="863.5" ></text>
</g>
<g >
<title>__fdget (3,727,459 samples, 0.02%)</title><rect x="255.5" y="1013" width="0.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="258.45" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (13,434,268 samples, 0.07%)</title><rect x="609.3" y="901" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="612.27" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_upper_bound (16,361,986 samples, 0.08%)</title><rect x="1066.8" y="901" width="1.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1069.85" y="911.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (5,780,242 samples, 0.03%)</title><rect x="610.5" y="901" width="0.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="613.50" y="911.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (1,913,383 samples, 0.01%)</title><rect x="1015.5" y="997" width="0.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1018.54" y="1007.5" ></text>
</g>
<g >
<title>process_echoes (5,913,709 samples, 0.03%)</title><rect x="479.3" y="677" width="0.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="482.29" y="687.5" ></text>
</g>
<g >
<title>apparmor_socket_sendmsg (10,765,513 samples, 0.06%)</title><rect x="822.1" y="805" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="825.14" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::unique_ptr&lt;std::default_delete&lt;webserver::Channel&gt;, void&gt; (2,013,721 samples, 0.01%)</title><rect x="104.4" y="981" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="107.42" y="991.5" ></text>
</g>
<g >
<title>tcp_ack_update_window.isra.0 (4,009,451 samples, 0.02%)</title><rect x="1125.4" y="517" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1128.41" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header (3,883,310 samples, 0.02%)</title><rect x="122.6" y="517" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="125.60" y="527.5" ></text>
</g>
<g >
<title>std::operator== (2,027,910 samples, 0.01%)</title><rect x="551.6" y="901" width="0.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="554.56" y="911.5" ></text>
</g>
<g >
<title>select_task_rq_fair (1,971,012 samples, 0.01%)</title><rect x="755.2" y="181" width="0.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="758.16" y="191.5" ></text>
</g>
<g >
<title>raw_local_deliver (11,722,531 samples, 0.06%)</title><rect x="775.0" y="373" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="777.98" y="383.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (690,900,487 samples, 3.56%)</title><rect x="1108.3" y="597" width="42.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1111.32" y="607.5" >ip_..</text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt; (2,020,639 samples, 0.01%)</title><rect x="835.2" y="869" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="838.18" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::find (76,923,511 samples, 0.40%)</title><rect x="1048.3" y="917" width="4.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1051.31" y="927.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::setCloseCallback (29,652,995 samples, 0.15%)</title><rect x="242.7" y="981" width="1.8" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="245.74" y="991.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (2,848,476 samples, 0.01%)</title><rect x="491.1" y="901" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="494.08" y="911.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,933,717 samples, 0.01%)</title><rect x="841.8" y="1093" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="844.79" y="1103.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (1,950,631 samples, 0.01%)</title><rect x="1177.9" y="1045" width="0.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1180.86" y="1055.5" ></text>
</g>
<g >
<title>tcp_cwnd_validate (6,933,743 samples, 0.04%)</title><rect x="1165.3" y="949" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1168.32" y="959.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (26,430,752 samples, 0.14%)</title><rect x="1166.7" y="933" width="1.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1169.69" y="943.5" ></text>
</g>
<g >
<title>std::_Bind_helper&lt;std::__or_&lt;std::is_integral&lt;std::decay&lt;void  (36,722,248 samples, 0.19%)</title><rect x="72.7" y="981" width="2.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="75.74" y="991.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::EventThreadPool*, std::default_delete&lt;webserver::EventThreadPool&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::EventThreadPool*, std::default_delete&lt;webserver::EventThreadPool&gt; &gt; (4,786,534 samples, 0.02%)</title><rect x="105.0" y="917" width="0.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="108.03" y="927.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (7,403,491 samples, 0.04%)</title><rect x="801.3" y="613" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="804.30" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, bool, true&gt; (4,772,730 samples, 0.02%)</title><rect x="99.5" y="949" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="102.54" y="959.5" ></text>
</g>
<g >
<title>operator new (1,901,062 samples, 0.01%)</title><rect x="243.6" y="885" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="246.57" y="895.5" ></text>
</g>
<g >
<title>lockref_put_return (4,853,556 samples, 0.02%)</title><rect x="960.1" y="901" width="0.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="963.12" y="911.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (614,629,642 samples, 3.16%)</title><rect x="131.5" y="645" width="37.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="134.46" y="655.5" >voi..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (393,353,558 samples, 2.03%)</title><rect x="898.7" y="1029" width="23.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="901.74" y="1039.5" >v..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,948,158 samples, 0.03%)</title><rect x="893.1" y="1125" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="896.06" y="1135.5" ></text>
</g>
<g >
<title>webserver::Socket::write (2,024,237 samples, 0.01%)</title><rect x="824.9" y="949" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="827.88" y="959.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (2,976,300 samples, 0.02%)</title><rect x="864.1" y="1237" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="867.07" y="1247.5" ></text>
</g>
<g >
<title>char const* std::__find_if&lt;char const*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (13,719,020 samples, 0.07%)</title><rect x="545.1" y="933" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="548.07" y="943.5" ></text>
</g>
<g >
<title>wake_up_process (2,854,841 samples, 0.01%)</title><rect x="474.1" y="565" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="477.11" y="575.5" ></text>
</g>
<g >
<title>remove_wait_queue (2,933,150 samples, 0.02%)</title><rect x="478.6" y="661" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="481.63" y="671.5" ></text>
</g>
<g >
<title>_start (19,374,306,767 samples, 99.75%)</title><rect x="12.9" y="1381" width="1177.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="15.87" y="1391.5" >_start</text>
</g>
<g >
<title>copy_iovec_from_user (3,974,753 samples, 0.02%)</title><rect x="390.3" y="981" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="393.28" y="991.5" ></text>
</g>
<g >
<title>apparmor_ip_postroute (3,973,094 samples, 0.02%)</title><rect x="676.3" y="645" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="679.34" y="655.5" ></text>
</g>
<g >
<title>srso_alias_return_thunk (2,005,982 samples, 0.01%)</title><rect x="325.9" y="949" width="0.1" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="328.89" y="959.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*, webserver::TimeStamp, true, true&gt; (21,288,441 samples, 0.11%)</title><rect x="400.1" y="1029" width="1.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="403.14" y="1039.5" ></text>
</g>
<g >
<title>skb_condense (2,787,088 samples, 0.01%)</title><rect x="712.9" y="341" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="715.91" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (407,839,991 samples, 2.10%)</title><rect x="898.3" y="1045" width="24.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="901.34" y="1055.5" >s..</text>
</g>
<g >
<title>webserver::ConnBuffer::ConnBuffer (3,907,377 samples, 0.02%)</title><rect x="105.9" y="981" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="108.90" y="991.5" ></text>
</g>
<g >
<title>memcg_list_lru_alloc (11,778,016 samples, 0.06%)</title><rect x="320.7" y="901" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="323.65" y="911.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (2,882,043 samples, 0.01%)</title><rect x="592.6" y="885" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="595.59" y="895.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,975,775 samples, 0.03%)</title><rect x="1183.3" y="1269" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1186.25" y="1279.5" ></text>
</g>
<g >
<title>tcp_mtu_probe (2,948,743 samples, 0.02%)</title><rect x="1168.3" y="949" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1171.29" y="959.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::find (77,935,807 samples, 0.40%)</title><rect x="1048.3" y="933" width="4.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1051.25" y="943.5" ></text>
</g>
<g >
<title>sock_put (1,924,869 samples, 0.01%)</title><rect x="713.1" y="341" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="716.08" y="351.5" ></text>
</g>
<g >
<title>__sock_wfree (2,948,189 samples, 0.02%)</title><rect x="733.7" y="69" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="736.68" y="79.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (3,814,937 samples, 0.02%)</title><rect x="839.5" y="1029" width="0.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="842.55" y="1039.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1,951,780 samples, 0.01%)</title><rect x="1078.6" y="981" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1081.61" y="991.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;long&amp;&gt;::type&amp;&amp; std::move&lt;long&amp;&gt; (1,837,027 samples, 0.01%)</title><rect x="573.5" y="917" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="576.48" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (1,934,532 samples, 0.01%)</title><rect x="553.7" y="885" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="556.70" y="895.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3,994,028 samples, 0.02%)</title><rect x="911.5" y="821" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="914.53" y="831.5" ></text>
</g>
<g >
<title>mod_memcg_state (3,031,969 samples, 0.02%)</title><rect x="771.7" y="245" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="774.67" y="255.5" ></text>
</g>
<g >
<title>mod_timer (47,377,176 samples, 0.24%)</title><rect x="799.9" y="661" width="2.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="802.87" y="671.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (7,931,237 samples, 0.04%)</title><rect x="587.1" y="949" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="590.12" y="959.5" ></text>
</g>
<g >
<title>__slab_free (11,278,991 samples, 0.06%)</title><rect x="991.0" y="757" width="0.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="994.04" y="767.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (172,372,322 samples, 0.89%)</title><rect x="1060.5" y="1045" width="10.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1063.49" y="1055.5" ></text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (131,367,746 samples, 0.68%)</title><rect x="297.3" y="917" width="8.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="300.28" y="927.5" ></text>
</g>
<g >
<title>operator new (10,020,504 samples, 0.05%)</title><rect x="424.0" y="853" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="427.00" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Rb_tree (36,163,191 samples, 0.19%)</title><rect x="612.8" y="949" width="2.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="615.80" y="959.5" ></text>
</g>
<g >
<title>locks_remove_posix (14,510,865 samples, 0.07%)</title><rect x="1002.5" y="917" width="0.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1005.49" y="927.5" ></text>
</g>
<g >
<title>tcp_rcv_established (935,143,670 samples, 4.81%)</title><rect x="716.5" y="325" width="56.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="719.50" y="335.5" >tcp_rc..</text>
</g>
<g >
<title>_raw_spin_lock_bh (5,720,830 samples, 0.03%)</title><rect x="367.5" y="917" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="370.54" y="927.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;void  (1,934,421 samples, 0.01%)</title><rect x="247.0" y="933" width="0.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="250.00" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt;::empty (15,461,422 samples, 0.08%)</title><rect x="172.0" y="965" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="175.03" y="975.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::function&lt;void  (96,335,242 samples, 0.50%)</title><rect x="829.8" y="933" width="5.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="832.75" y="943.5" ></text>
</g>
<g >
<title>ep_done_scan (3,799,789 samples, 0.02%)</title><rect x="22.8" y="1189" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="25.83" y="1199.5" ></text>
</g>
<g >
<title>__fdget_pos (10,561,927 samples, 0.05%)</title><rect x="437.2" y="741" width="0.6" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="440.20" y="751.5" ></text>
</g>
<g >
<title>try_charge_memcg (5,940,567 samples, 0.03%)</title><rect x="315.5" y="901" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="318.49" y="911.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;webserver::Channel**&gt; (2,875,257 samples, 0.01%)</title><rect x="40.0" y="1301" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="43.03" y="1311.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::function&lt;void  (78,994,928 samples, 0.41%)</title><rect x="849.8" y="1077" width="4.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="852.84" y="1087.5" ></text>
</g>
<g >
<title>tcp_poll (7,771,450 samples, 0.04%)</title><rect x="32.4" y="1157" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="35.39" y="1167.5" ></text>
</g>
<g >
<title>kmem_cache_free (33,761,871 samples, 0.17%)</title><rect x="938.2" y="853" width="2.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="941.23" y="863.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInLoopThread (4,896,953 samples, 0.03%)</title><rect x="824.6" y="949" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="827.59" y="959.5" ></text>
</g>
<g >
<title>std::enable_if&lt; (10,789,874 samples, 0.06%)</title><rect x="123.8" y="725" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="126.79" y="735.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,857,160 samples, 0.01%)</title><rect x="1039.7" y="821" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1042.65" y="831.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;bool  (3,032,249 samples, 0.02%)</title><rect x="208.3" y="917" width="0.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="211.26" y="927.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::find (75,410,557 samples, 0.39%)</title><rect x="156.0" y="613" width="4.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="159.05" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,822,301,156 samples, 9.38%)</title><rect x="413.2" y="965" width="110.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="416.19" y="975.5" >std::_Functio..</text>
</g>
<g >
<title>down_write (7,879,212 samples, 0.04%)</title><rect x="964.0" y="869" width="0.5" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="967.00" y="879.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (170,353,165 samples, 0.88%)</title><rect x="1060.6" y="1013" width="10.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1063.61" y="1023.5" ></text>
</g>
<g >
<title>operator new (3,933,799 samples, 0.02%)</title><rect x="166.0" y="501" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="169.02" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (31,306,376 samples, 0.16%)</title><rect x="612.9" y="933" width="1.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="615.92" y="943.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, webserver::TimeStamp&amp;&amp;&gt;::_M_head (1,976,431 samples, 0.01%)</title><rect x="839.1" y="981" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="842.07" y="991.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_lru_noprof (173,423,804 samples, 0.89%)</title><rect x="295.3" y="933" width="10.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="298.26" y="943.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (3,922,585 samples, 0.02%)</title><rect x="1141.7" y="517" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1144.71" y="527.5" ></text>
</g>
<g >
<title>__printf_buffer_write (2,008,222 samples, 0.01%)</title><rect x="69.8" y="949" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="72.78" y="959.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (2,621,900 samples, 0.01%)</title><rect x="968.5" y="821" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="971.54" y="831.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (17,596,712 samples, 0.09%)</title><rect x="1114.4" y="565" width="1.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1117.42" y="575.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (4,363,770 samples, 0.02%)</title><rect x="419.4" y="901" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="422.41" y="911.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,831,995 samples, 0.02%)</title><rect x="851.9" y="1045" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="854.86" y="1055.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (10,934,159 samples, 0.06%)</title><rect x="614.0" y="917" width="0.6" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="616.98" y="927.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*, webserver::TimeStamp, true, true&gt; (1,799,604 samples, 0.01%)</title><rect x="401.4" y="1045" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="404.43" y="1055.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::setBody (43,204,467 samples, 0.22%)</title><rect x="492.7" y="901" width="2.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="495.66" y="911.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (12,909,736 samples, 0.07%)</title><rect x="459.5" y="613" width="0.8" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="462.52" y="623.5" ></text>
</g>
<g >
<title> (7,944,106 samples, 0.04%)</title><rect x="1071.9" y="1125" width="0.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1074.92" y="1135.5" ></text>
</g>
<g >
<title>do_syscall_64 (839,156,051 samples, 4.32%)</title><rect x="345.0" y="1093" width="51.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="348.00" y="1103.5" >do_sy..</text>
</g>
<g >
<title>std::__shared_count&lt; (2,013,029 samples, 0.01%)</title><rect x="104.2" y="949" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="107.24" y="959.5" ></text>
</g>
<g >
<title>aa_inet_accept_perm (11,824,527 samples, 0.06%)</title><rect x="286.0" y="965" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="289.04" y="975.5" ></text>
</g>
<g >
<title>clear_page_erms (3,038,084 samples, 0.02%)</title><rect x="296.8" y="837" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="299.80" y="847.5" ></text>
</g>
<g >
<title>raw_local_deliver (21,281,993 samples, 0.11%)</title><rect x="697.4" y="357" width="1.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="700.41" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,933,717 samples, 0.01%)</title><rect x="841.8" y="1077" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="844.79" y="1087.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::~holder (9,517,904 samples, 0.05%)</title><rect x="1005.5" y="1013" width="0.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1008.45" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (4,843,556 samples, 0.02%)</title><rect x="570.4" y="933" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="573.43" y="943.5" ></text>
</g>
<g >
<title> (12,668,797 samples, 0.07%)</title><rect x="104.5" y="965" width="0.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="107.55" y="975.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (7,742,741 samples, 0.04%)</title><rect x="1029.1" y="901" width="0.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1032.13" y="911.5" ></text>
</g>
<g >
<title>tcp_chrono_stop (1,969,299 samples, 0.01%)</title><rect x="639.6" y="709" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="642.57" y="719.5" ></text>
</g>
<g >
<title>filp_flush (2,772,203 samples, 0.01%)</title><rect x="1004.0" y="949" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1007.03" y="959.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,903,880 samples, 0.01%)</title><rect x="451.7" y="661" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="454.66" y="671.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (112,727,319 samples, 0.58%)</title><rect x="507.8" y="869" width="6.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="510.79" y="879.5" ></text>
</g>
<g >
<title>__release_sock (1,902,095 samples, 0.01%)</title><rect x="968.7" y="821" width="0.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="971.70" y="831.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (3,870,766 samples, 0.02%)</title><rect x="551.8" y="917" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="554.81" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_head (2,859,982 samples, 0.01%)</title><rect x="1011.2" y="949" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1014.17" y="959.5" ></text>
</g>
<g >
<title>refill_stock (33,212,392 samples, 0.17%)</title><rect x="275.3" y="933" width="2.0" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="278.26" y="943.5" ></text>
</g>
<g >
<title>__sys_accept4 (2,834,583 samples, 0.01%)</title><rect x="254.9" y="1045" width="0.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="257.86" y="1055.5" ></text>
</g>
<g >
<title>mod_memcg_state (3,984,846 samples, 0.02%)</title><rect x="303.6" y="885" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="306.61" y="895.5" ></text>
</g>
<g >
<title>webserver::TcpServer::removeConnectionInLoop (149,936,356 samples, 0.77%)</title><rect x="912.2" y="853" width="9.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="915.19" y="863.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (3,868,731 samples, 0.02%)</title><rect x="911.8" y="837" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="914.78" y="847.5" ></text>
</g>
<g >
<title>__kfree_skb (3,200,451 samples, 0.02%)</title><rect x="636.2" y="709" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="639.23" y="719.5" ></text>
</g>
<g >
<title>__GI___getsockname (11,552,930 samples, 0.06%)</title><rect x="240.0" y="949" width="0.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="242.99" y="959.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,833,402 samples, 0.01%)</title><rect x="16.7" y="1285" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="19.66" y="1295.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (2,867,892 samples, 0.01%)</title><rect x="547.6" y="933" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="550.62" y="943.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (4,570,280 samples, 0.02%)</title><rect x="111.6" y="773" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="114.55" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::lower_bound (52,932,045 samples, 0.27%)</title><rect x="865.3" y="1253" width="3.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="868.31" y="1263.5" ></text>
</g>
<g >
<title>tcp_done_with_error (7,710,879 samples, 0.04%)</title><rect x="656.1" y="693" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="659.10" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::get (6,718,655 samples, 0.03%)</title><rect x="1024.8" y="1093" width="0.4" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1027.78" y="1103.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::vector (9,713,571 samples, 0.05%)</title><rect x="879.7" y="1285" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="882.68" y="1295.5" ></text>
</g>
<g >
<title>__check_object_size (2,013,257 samples, 0.01%)</title><rect x="443.4" y="693" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="446.43" y="703.5" ></text>
</g>
<g >
<title>webserver::TcpServer*&amp; std::forward&lt;webserver::TcpServer*&amp;&gt; (1,991,861 samples, 0.01%)</title><rect x="250.7" y="1013" width="0.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="253.68" y="1023.5" ></text>
</g>
<g >
<title>webserver::sockets::getPeerAddr (10,567,526 samples, 0.05%)</title><rect x="242.1" y="965" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="245.10" y="975.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::__get_helper&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (2,960,962 samples, 0.02%)</title><rect x="123.8" y="709" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="126.79" y="719.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (7,739,730 samples, 0.04%)</title><rect x="1023.8" y="1077" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1026.85" y="1087.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (4,818,519 samples, 0.02%)</title><rect x="143.8" y="437" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="146.75" y="447.5" ></text>
</g>
<g >
<title>check_stack_object (2,771,887 samples, 0.01%)</title><rect x="284.4" y="965" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="287.41" y="975.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::_Any_data&amp;&gt;::type&amp;&amp; std::move&lt;std::_Any_data&amp;&gt; (4,974,463 samples, 0.03%)</title><rect x="204.5" y="917" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="207.51" y="927.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_noprof (6,846,130 samples, 0.04%)</title><rect x="813.8" y="725" width="0.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="816.82" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (3,858,204 samples, 0.02%)</title><rect x="11.9" y="1349" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="14.94" y="1359.5" ></text>
</g>
<g >
<title>tty_update_time (7,663,288 samples, 0.04%)</title><rect x="480.7" y="677" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="483.65" y="687.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2,896,625 samples, 0.01%)</title><rect x="583.1" y="917" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="586.10" y="927.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::setCloseCallback (1,828,970 samples, 0.01%)</title><rect x="62.6" y="997" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="65.61" y="1007.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,921,475 samples, 0.02%)</title><rect x="905.3" y="981" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="908.26" y="991.5" ></text>
</g>
<g >
<title>ipv4_dst_check (2,903,024 samples, 0.01%)</title><rect x="1095.4" y="885" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1098.35" y="895.5" ></text>
</g>
<g >
<title>dst_release (6,806,441 samples, 0.04%)</title><rect x="988.2" y="757" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="991.23" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_key (12,796,034 samples, 0.07%)</title><rect x="92.0" y="933" width="0.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="95.00" y="943.5" ></text>
</g>
<g >
<title>__memcg_slab_free_hook (18,997,245 samples, 0.10%)</title><rect x="989.9" y="757" width="1.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="992.88" y="767.5" ></text>
</g>
<g >
<title>cgroup_sk_free (8,781,888 samples, 0.05%)</title><rect x="987.0" y="773" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="990.04" y="783.5" ></text>
</g>
<g >
<title>tcp_data_queue (376,083,141 samples, 1.94%)</title><rect x="1125.7" y="533" width="22.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1128.66" y="543.5" >t..</text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (1,964,607 samples, 0.01%)</title><rect x="125.3" y="805" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="128.27" y="815.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (2,940,669 samples, 0.02%)</title><rect x="446.2" y="645" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="449.16" y="655.5" ></text>
</g>
<g >
<title>tcp_rack_advance (3,966,571 samples, 0.02%)</title><rect x="649.7" y="709" width="0.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="652.75" y="719.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (5,896,405 samples, 0.03%)</title><rect x="612.4" y="965" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="615.44" y="975.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (2,743,996 samples, 0.01%)</title><rect x="12.4" y="1317" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="15.43" y="1327.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (5,850,461 samples, 0.03%)</title><rect x="236.2" y="821" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="239.25" y="831.5" ></text>
</g>
<g >
<title>__rcu_read_lock (2,992,171 samples, 0.02%)</title><rect x="983.5" y="805" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="986.53" y="815.5" ></text>
</g>
<g >
<title>cubictcp_cong_avoid (4,685,385 samples, 0.02%)</title><rect x="632.5" y="725" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="635.49" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::operator++ (9,736,615 samples, 0.05%)</title><rect x="12.9" y="1317" width="0.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="15.87" y="1327.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (4,969,270 samples, 0.03%)</title><rect x="532.0" y="965" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="534.98" y="975.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (10,474,840 samples, 0.05%)</title><rect x="918.4" y="773" width="0.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="921.37" y="783.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~pair (3,027,301 samples, 0.02%)</title><rect x="101.1" y="981" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="104.10" y="991.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (2,023,086 samples, 0.01%)</title><rect x="261.7" y="949" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="264.69" y="959.5" ></text>
</g>
<g >
<title>webserver::HttpParser::HttpParser (7,834,551 samples, 0.04%)</title><rect x="122.5" y="597" width="0.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="125.48" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (133,039,486 samples, 0.68%)</title><rect x="210.0" y="933" width="8.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="213.00" y="943.5" ></text>
</g>
<g >
<title>std::function&lt;void  (8,700,605 samples, 0.04%)</title><rect x="60.8" y="997" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="63.85" y="1007.5" ></text>
</g>
<g >
<title>__mempcpy_avx_unaligned_erms (10,258,244 samples, 0.05%)</title><rect x="488.8" y="853" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="491.82" y="863.5" ></text>
</g>
<g >
<title>calc_wheel_index (1,976,160 samples, 0.01%)</title><rect x="187.6" y="757" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="190.57" y="767.5" ></text>
</g>
<g >
<title>propagate_protected_usage (1,915,426 samples, 0.01%)</title><rect x="820.5" y="709" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="823.53" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::end (2,859,837 samples, 0.01%)</title><rect x="919.9" y="805" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="922.89" y="815.5" ></text>
</g>
<g >
<title>ipv4_mtu (2,972,144 samples, 0.02%)</title><rect x="810.1" y="741" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="813.09" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::~_Vector_base (14,727,158 samples, 0.08%)</title><rect x="39.1" y="1285" width="0.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="42.07" y="1295.5" ></text>
</g>
<g >
<title>malloc (13,306,542 samples, 0.07%)</title><rect x="245.5" y="853" width="0.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="248.54" y="863.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (1,870,189 samples, 0.01%)</title><rect x="369.6" y="901" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="372.57" y="911.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5,024,200 samples, 0.03%)</title><rect x="155.0" y="613" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="157.97" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (5,901,457 samples, 0.03%)</title><rect x="592.4" y="917" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="595.41" y="927.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_ctl (318,002,827 samples, 1.64%)</title><rect x="133.4" y="565" width="19.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="136.41" y="575.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (13,722,814 samples, 0.07%)</title><rect x="418.6" y="901" width="0.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="421.57" y="911.5" ></text>
</g>
<g >
<title>webserver::EventLoop::updateChannel (690,018,048 samples, 3.55%)</title><rect x="127.7" y="789" width="41.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="130.66" y="799.5" >web..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;void  (3,938,640 samples, 0.02%)</title><rect x="413.4" y="949" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="416.38" y="959.5" ></text>
</g>
<g >
<title>__strlen_avx2 (2,968,044 samples, 0.02%)</title><rect x="408.6" y="949" width="0.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="411.64" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_root (1,951,496 samples, 0.01%)</title><rect x="572.3" y="933" width="0.1" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="575.31" y="943.5" ></text>
</g>
<g >
<title>apparmor_d_instantiate (6,011,891 samples, 0.03%)</title><rect x="323.7" y="949" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="326.73" y="959.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::~TcpConnection (1,494,388,172 samples, 7.69%)</title><rect x="929.0" y="1029" width="90.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="931.98" y="1039.5" >webserver:..</text>
</g>
<g >
<title>std::remove_reference&lt;std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;&amp;&gt; (1,988,080 samples, 0.01%)</title><rect x="838.0" y="1013" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="840.97" y="1023.5" ></text>
</g>
<g >
<title>operator new (3,946,845 samples, 0.02%)</title><rect x="556.3" y="837" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="559.31" y="847.5" ></text>
</g>
<g >
<title>operator new (6,081,229 samples, 0.03%)</title><rect x="71.7" y="981" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="74.67" y="991.5" ></text>
</g>
<g >
<title>tcp_rate_skb_sent (1,942,291 samples, 0.01%)</title><rect x="1168.6" y="949" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1171.64" y="959.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,885,218 samples, 0.01%)</title><rect x="454.1" y="613" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="457.05" y="623.5" ></text>
</g>
<g >
<title>security_sock_rcv_skb (6,688,585 samples, 0.03%)</title><rect x="712.4" y="325" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="715.39" y="335.5" ></text>
</g>
<g >
<title>inode_init_always (96,719,294 samples, 0.50%)</title><rect x="288.1" y="949" width="5.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="291.10" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (9,896,710 samples, 0.05%)</title><rect x="864.4" y="1253" width="0.6" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="867.43" y="1263.5" ></text>
</g>
<g >
<title>call_rcu (16,435,502 samples, 0.08%)</title><rect x="949.4" y="773" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="952.41" y="783.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (1,982,278 samples, 0.01%)</title><rect x="327.4" y="965" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="330.38" y="975.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;bool  (1,823,062 samples, 0.01%)</title><rect x="202.2" y="933" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="205.24" y="943.5" ></text>
</g>
<g >
<title>kmalloc_reserve (15,368,086 samples, 0.08%)</title><rect x="721.7" y="245" width="1.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="724.73" y="255.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::connectEstablished (980,587,861 samples, 5.05%)</title><rect x="110.7" y="837" width="59.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="113.67" y="847.5" >webser..</text>
</g>
<g >
<title>file_close_fd_locked (2,980,898 samples, 0.02%)</title><rect x="1001.8" y="933" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1004.83" y="943.5" ></text>
</g>
<g >
<title>operator new (1,915,973 samples, 0.01%)</title><rect x="212.5" y="853" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="215.54" y="863.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (3,705,669 samples, 0.02%)</title><rect x="1040.8" y="821" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1043.78" y="831.5" ></text>
</g>
<g >
<title>webserver::EventLoop::isInLoopThread (2,027,691 samples, 0.01%)</title><rect x="171.3" y="965" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="174.31" y="975.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (36,717,171 samples, 0.19%)</title><rect x="85.3" y="949" width="2.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="88.27" y="959.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_noprof (23,967,027 samples, 0.12%)</title><rect x="292.5" y="917" width="1.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="295.46" y="927.5" ></text>
</g>
<g >
<title>__wake_up_common (2,777,526 samples, 0.01%)</title><rect x="447.1" y="677" width="0.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="450.11" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,371,913,021 samples, 7.06%)</title><rect x="252.6" y="1077" width="83.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="255.63" y="1087.5" >do_syscal..</text>
</g>
<g >
<title>std::_Bind&lt;void  (2,016,280 samples, 0.01%)</title><rect x="248.1" y="869" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="251.08" y="879.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (4,741,486 samples, 0.02%)</title><rect x="764.4" y="197" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="767.43" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1,933,225 samples, 0.01%)</title><rect x="38.1" y="1253" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="41.12" y="1263.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (7,131,854 samples, 0.04%)</title><rect x="521.6" y="917" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="524.61" y="927.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6,820,926 samples, 0.04%)</title><rect x="500.2" y="805" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="503.21" y="815.5" ></text>
</g>
<g >
<title>inet_steal_sock.constprop.0 (3,917,920 samples, 0.02%)</title><rect x="697.2" y="357" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="700.17" y="367.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (12,683,975 samples, 0.07%)</title><rect x="490.2" y="885" width="0.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="493.19" y="895.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3,009,415 samples, 0.02%)</title><rect x="130.2" y="757" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="133.15" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_head (1,885,052 samples, 0.01%)</title><rect x="126.4" y="725" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="129.42" y="735.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,941,409 samples, 0.01%)</title><rect x="595.6" y="917" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="598.62" y="927.5" ></text>
</g>
<g >
<title>webserver::HttpParser::parseRequest (662,969,908 samples, 3.41%)</title><rect x="529.0" y="981" width="40.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="531.96" y="991.5" >web..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator (3,757,499 samples, 0.02%)</title><rect x="1047.7" y="933" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1050.67" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_end (2,860,433 samples, 0.01%)</title><rect x="162.5" y="565" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="165.49" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (148,362,047 samples, 0.76%)</title><rect x="220.2" y="933" width="9.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="223.16" y="943.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (4,830,098 samples, 0.02%)</title><rect x="714.4" y="325" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="717.40" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (6,708,962 samples, 0.03%)</title><rect x="518.3" y="885" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="521.30" y="895.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel (8,691,123 samples, 0.04%)</title><rect x="969.8" y="805" width="0.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="972.76" y="815.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1,986,427 samples, 0.01%)</title><rect x="909.1" y="965" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="912.05" y="975.5" ></text>
</g>
<g >
<title>tcp_add_backlog (2,832,907 samples, 0.01%)</title><rect x="699.1" y="357" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="702.07" y="367.5" ></text>
</g>
<g >
<title>_copy_from_user (5,808,569 samples, 0.03%)</title><rect x="183.2" y="821" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="186.21" y="831.5" ></text>
</g>
<g >
<title>webserver::TcpConnection*&amp; std::__get_helper&lt;0ul, webserver::TcpConnection*&gt; (4,752,421 samples, 0.02%)</title><rect x="1182.4" y="1173" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1185.37" y="1183.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,003,369 samples, 0.02%)</title><rect x="483.9" y="821" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="486.94" y="831.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (5,895,139 samples, 0.03%)</title><rect x="69.9" y="949" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="72.90" y="959.5" ></text>
</g>
<g >
<title>ima_file_free (16,074,786 samples, 0.08%)</title><rect x="957.3" y="901" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="960.32" y="911.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,965,475 samples, 0.01%)</title><rect x="100.5" y="949" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="103.55" y="959.5" ></text>
</g>
<g >
<title>mod_objcg_state (4,689,610 samples, 0.02%)</title><rect x="321.4" y="901" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="324.37" y="911.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runInLoop (2,882,421 samples, 0.01%)</title><rect x="1022.4" y="1109" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1025.38" y="1119.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Poller*, webserver::Channel*&gt; &gt;::type&amp; std::get&lt;0ul, webserver::Poller*, webserver::Channel*&gt; (5,911,765 samples, 0.03%)</title><rect x="169.0" y="661" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="171.98" y="671.5" ></text>
</g>
<g >
<title>operator new (8,786,647 samples, 0.05%)</title><rect x="502.3" y="773" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="505.28" y="783.5" ></text>
</g>
<g >
<title>select_idle_core.isra.0 (2,078,339 samples, 0.01%)</title><rect x="755.0" y="117" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="758.03" y="127.5" ></text>
</g>
<g >
<title>page_counter_uncharge (1,957,653 samples, 0.01%)</title><rect x="382.1" y="837" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="385.09" y="847.5" ></text>
</g>
<g >
<title>init_file (62,014,785 samples, 0.32%)</title><rect x="309.1" y="949" width="3.8" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="312.10" y="959.5" ></text>
</g>
<g >
<title>put_pid (5,871,279 samples, 0.03%)</title><rect x="996.5" y="789" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="999.50" y="799.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (37,691,181 samples, 0.19%)</title><rect x="1012.7" y="933" width="2.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1015.72" y="943.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (27,218,274 samples, 0.14%)</title><rect x="88.1" y="965" width="1.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="91.10" y="975.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,889,077 samples, 0.01%)</title><rect x="1003.6" y="933" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1006.61" y="943.5" ></text>
</g>
<g >
<title>timer_delete (4,903,728 samples, 0.03%)</title><rect x="977.3" y="757" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="980.34" y="767.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__not_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__not_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;, char const*&gt; &gt; &gt;::value, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator=&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (36,543,894 samples, 0.19%)</title><rect x="566.3" y="933" width="2.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="569.29" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (19,688,452 samples, 0.10%)</title><rect x="866.3" y="1221" width="1.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="869.26" y="1231.5" ></text>
</g>
<g >
<title>inet_getname (1,930,126 samples, 0.01%)</title><rect x="334.3" y="1013" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="337.25" y="1023.5" ></text>
</g>
<g >
<title>__call_rcu_common (1,904,014 samples, 0.01%)</title><rect x="945.2" y="805" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="948.23" y="815.5" ></text>
</g>
<g >
<title>tcp_urg (1,978,894 samples, 0.01%)</title><rect x="656.6" y="741" width="0.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="659.56" y="751.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (24,970,916 samples, 0.13%)</title><rect x="73.0" y="965" width="1.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="75.97" y="975.5" ></text>
</g>
<g >
<title>tcp_rearm_rto.part.0 (57,878,824 samples, 0.30%)</title><rect x="799.3" y="693" width="3.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="802.29" y="703.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (4,002,544 samples, 0.02%)</title><rect x="1004.7" y="997" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1007.73" y="1007.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (1,963,216 samples, 0.01%)</title><rect x="171.2" y="949" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="174.19" y="959.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, true&gt; (9,794,875 samples, 0.05%)</title><rect x="505.1" y="885" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="508.10" y="895.5" ></text>
</g>
<g >
<title>wakeup_source_unregister (6,971,340 samples, 0.04%)</title><rect x="1045.3" y="853" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1048.28" y="863.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::_Tuple_impl (17,298,725 samples, 0.09%)</title><rect x="907.5" y="901" width="1.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="910.53" y="911.5" ></text>
</g>
<g >
<title>_itoa_word (12,416,736 samples, 0.06%)</title><rect x="513.9" y="853" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="516.88" y="863.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,946,370 samples, 0.01%)</title><rect x="270.1" y="917" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="273.15" y="927.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (2,864,291 samples, 0.01%)</title><rect x="1180.3" y="1061" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1183.27" y="1071.5" ></text>
</g>
<g >
<title>tcp_v4_fill_cb (1,831,986 samples, 0.01%)</title><rect x="1150.2" y="565" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1153.18" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;* std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; (37,816,492 samples, 0.19%)</title><rect x="165.2" y="549" width="2.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="168.19" y="559.5" ></text>
</g>
<g >
<title>release_sock (1,995,977 samples, 0.01%)</title><rect x="181.4" y="837" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="184.44" y="847.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,218,194,734 samples, 6.27%)</title><rect x="930.4" y="981" width="74.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="933.36" y="991.5" >do_sysca..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (4,911,539 samples, 0.03%)</title><rect x="159.0" y="581" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="161.97" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,976,624 samples, 0.02%)</title><rect x="125.9" y="773" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="128.93" y="783.5" ></text>
</g>
<g >
<title>security_sock_graft (24,396,641 samples, 0.13%)</title><rect x="262.1" y="965" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="265.10" y="975.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (2,970,408 samples, 0.02%)</title><rect x="104.2" y="981" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="107.18" y="991.5" ></text>
</g>
<g >
<title>tcp_write_queue_purge (3,922,768 samples, 0.02%)</title><rect x="980.1" y="789" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="983.07" y="799.5" ></text>
</g>
<g >
<title>memset@plt (2,945,198 samples, 0.02%)</title><rect x="589.8" y="933" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="592.84" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::max_size (10,813,712 samples, 0.06%)</title><rect x="215.0" y="901" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="218.01" y="911.5" ></text>
</g>
<g >
<title>tcp_fin (4,597,590 samples, 0.02%)</title><rect x="1148.6" y="533" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1151.62" y="543.5" ></text>
</g>
<g >
<title>webserver::sockets::shutDownWrite (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="1125" width="0.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1023.36" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (2,921,609 samples, 0.02%)</title><rect x="499.7" y="821" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="502.67" y="831.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;char&gt; (8,422,160 samples, 0.04%)</title><rect x="212.1" y="869" width="0.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="215.14" y="879.5" ></text>
</g>
<g >
<title>sock_def_wakeup (55,251,099 samples, 0.28%)</title><rect x="1079.6" y="1013" width="3.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1082.55" y="1023.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::holder (27,823,954 samples, 0.14%)</title><rect x="115.4" y="661" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="118.41" y="671.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe.part.0 (2,906,357 samples, 0.01%)</title><rect x="667.2" y="741" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="670.20" y="751.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;webserver::http::Version&amp;&gt;::type&amp;&amp; std::move&lt;webserver::http::Version&amp;&gt; (1,993,317 samples, 0.01%)</title><rect x="572.0" y="933" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="575.02" y="943.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,390,543,443 samples, 17.46%)</title><rect x="617.6" y="933" width="206.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="620.56" y="943.5" >entry_SYSCALL_64_after_hwfr..</text>
</g>
<g >
<title>__x64_sys_close (6,822,399 samples, 0.04%)</title><rect x="931.3" y="965" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="934.30" y="975.5" ></text>
</g>
<g >
<title>_copy_from_user (1,940,075 samples, 0.01%)</title><rect x="181.0" y="837" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="184.02" y="847.5" ></text>
</g>
<g >
<title>eth_type_trans (4,760,014 samples, 0.02%)</title><rect x="733.9" y="69" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="736.86" y="79.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (6,983,718 samples, 0.04%)</title><rect x="39.2" y="1237" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="42.24" y="1247.5" ></text>
</g>
<g >
<title>webserver::TimeStamp&amp;&amp; std::forward&lt;webserver::TimeStamp&gt; (2,869,233 samples, 0.01%)</title><rect x="856.8" y="1125" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="859.83" y="1135.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::_M_ptr (3,332,873 samples, 0.02%)</title><rect x="1060.1" y="1093" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1063.11" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::swap (10,554,463 samples, 0.05%)</title><rect x="572.4" y="933" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="575.43" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,962,743 samples, 0.01%)</title><rect x="579.0" y="949" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="582.01" y="959.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (2,019,595 samples, 0.01%)</title><rect x="832.4" y="901" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="835.37" y="911.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (6,369,415 samples, 0.03%)</title><rect x="1180.8" y="821" width="0.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1183.80" y="831.5" ></text>
</g>
<g >
<title>__printf_buffer_write (2,907,353 samples, 0.01%)</title><rect x="513.1" y="853" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="516.06" y="863.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::readerBegin (15,792,808 samples, 0.08%)</title><rect x="541.4" y="965" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="544.42" y="975.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (7,473,831 samples, 0.04%)</title><rect x="243.6" y="901" width="0.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="246.57" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_right (2,916,481 samples, 0.02%)</title><rect x="614.6" y="917" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="617.65" y="927.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;webserver::TcpConnection,  (3,914,694 samples, 0.02%)</title><rect x="103.9" y="901" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="106.94" y="911.5" ></text>
</g>
<g >
<title>__overflow (1,946,307 samples, 0.01%)</title><rect x="485.3" y="869" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="488.31" y="879.5" ></text>
</g>
<g >
<title>apparmor_socket_sock_rcv_skb (3,851,908 samples, 0.02%)</title><rect x="712.1" y="325" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="715.10" y="335.5" ></text>
</g>
<g >
<title>sk_page_frag_refill (7,819,867 samples, 0.04%)</title><rect x="662.6" y="773" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="665.60" y="783.5" ></text>
</g>
<g >
<title>move_addr_to_user (2,006,000 samples, 0.01%)</title><rect x="228.8" y="869" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="231.80" y="879.5" ></text>
</g>
<g >
<title>kthread_is_per_cpu (7,768,052 samples, 0.04%)</title><rect x="466.5" y="517" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="469.53" y="527.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (1,897,762 samples, 0.01%)</title><rect x="698.0" y="341" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="701.00" y="351.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (6,042,795 samples, 0.03%)</title><rect x="177.9" y="917" width="0.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="180.90" y="927.5" ></text>
</g>
<g >
<title>__do_softirq (1,670,860,214 samples, 8.60%)</title><rect x="683.3" y="533" width="101.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="686.32" y="543.5" >__do_softirq</text>
</g>
<g >
<title>std::_Function_base::_Function_base (6,739,084 samples, 0.03%)</title><rect x="194.9" y="949" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="197.94" y="959.5" ></text>
</g>
<g >
<title>kvfree_call_rcu (34,245,775 samples, 0.18%)</title><rect x="1037.8" y="837" width="2.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1040.80" y="847.5" ></text>
</g>
<g >
<title>tcp_fastopen_destroy_cipher (4,866,427 samples, 0.03%)</title><rect x="973.2" y="805" width="0.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="976.17" y="815.5" ></text>
</g>
<g >
<title>mod_memcg_state (19,472,071 samples, 0.10%)</title><rect x="816.4" y="725" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="819.39" y="735.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (5,658,989 samples, 0.03%)</title><rect x="396.6" y="1109" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="399.62" y="1119.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3,910,386 samples, 0.02%)</title><rect x="101.6" y="965" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="104.58" y="975.5" ></text>
</g>
<g >
<title>inet_send_prepare (2,026,505 samples, 0.01%)</title><rect x="625.5" y="821" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="628.53" y="831.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;webserver::TcpConnection,  (3,882,129 samples, 0.02%)</title><rect x="1007.9" y="981" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1010.90" y="991.5" ></text>
</g>
<g >
<title>__x64_sys_close (1,166,527,803 samples, 6.01%)</title><rect x="932.9" y="949" width="70.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="935.85" y="959.5" >__x64_sy..</text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator (3,030,425 samples, 0.02%)</title><rect x="867.7" y="1221" width="0.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="870.70" y="1231.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;char, void&gt;::value, char*&gt;::type std::__relocate_a_1&lt;char, char&gt; (4,908,177 samples, 0.03%)</title><rect x="216.7" y="885" width="0.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="219.73" y="895.5" ></text>
</g>
<g >
<title>allocate_slab (6,849,383 samples, 0.04%)</title><rect x="148.0" y="469" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="150.96" y="479.5" ></text>
</g>
<g >
<title>consume_stock (2,957,428 samples, 0.02%)</title><rect x="274.2" y="933" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="277.23" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,952,445 samples, 0.01%)</title><rect x="1129.6" y="469" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1132.62" y="479.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; std::forward_as_tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (8,805,618 samples, 0.05%)</title><rect x="896.7" y="1061" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="899.73" y="1071.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInLoopThread (1,893,567 samples, 0.01%)</title><rect x="912.0" y="853" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="915.01" y="863.5" ></text>
</g>
<g >
<title>mod_memcg_state (18,902,132 samples, 0.10%)</title><rect x="1171.8" y="949" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1174.81" y="959.5" ></text>
</g>
<g >
<title>refill_stock (7,424,879 samples, 0.04%)</title><rect x="304.7" y="869" width="0.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="307.70" y="879.5" ></text>
</g>
<g >
<title>__netif_receive_skb (750,820,527 samples, 3.87%)</title><rect x="1106.4" y="677" width="45.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1109.44" y="687.5" >__ne..</text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (5,880,014 samples, 0.03%)</title><rect x="841.9" y="1125" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="844.90" y="1135.5" ></text>
</g>
<g >
<title>do_accept (1,229,929,827 samples, 6.33%)</title><rect x="255.7" y="1013" width="74.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="258.73" y="1023.5" >do_accept</text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::get (2,953,213 samples, 0.02%)</title><rect x="37.0" y="1269" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="39.98" y="1279.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (2,840,249 samples, 0.01%)</title><rect x="921.4" y="885" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="924.36" y="895.5" ></text>
</g>
<g >
<title>tcp_rcv_space_adjust (37,903,937 samples, 0.20%)</title><rect x="384.8" y="917" width="2.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="387.80" y="927.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (1,989,441 samples, 0.01%)</title><rect x="1055.4" y="1061" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1058.37" y="1071.5" ></text>
</g>
<g >
<title>try_to_wake_up (9,931,254 samples, 0.05%)</title><rect x="1129.0" y="421" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1132.02" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6,738,003 samples, 0.03%)</title><rect x="601.1" y="949" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="604.14" y="959.5" ></text>
</g>
<g >
<title>default_send_IPI_single_phys (2,014,557 samples, 0.01%)</title><rect x="757.0" y="149" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="760.00" y="159.5" ></text>
</g>
<g >
<title>get_unused_fd_flags (46,739,417 samples, 0.24%)</title><rect x="330.7" y="1013" width="2.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="333.69" y="1023.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2,953,623 samples, 0.02%)</title><rect x="207.3" y="917" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="210.26" y="927.5" ></text>
</g>
<g >
<title>tcp_established_options (1,889,455 samples, 0.01%)</title><rect x="1173.8" y="965" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1176.84" y="975.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (1,322,985,743 samples, 6.81%)</title><rect x="694.6" y="373" width="80.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="697.60" y="383.5" >ip_protoc..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6,856,766 samples, 0.04%)</title><rect x="589.4" y="933" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="592.43" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (40,986,006 samples, 0.21%)</title><rect x="592.0" y="949" width="2.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="594.99" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::find (2,024,542 samples, 0.01%)</title><rect x="1047.5" y="933" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1050.54" y="943.5" ></text>
</g>
<g >
<title>webserver::http::versionToString[abi:cxx11] (12,820,642 samples, 0.07%)</title><rect x="611.7" y="949" width="0.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="614.67" y="959.5" ></text>
</g>
<g >
<title>char const* std::find&lt;char const*, char&gt; (30,485,498 samples, 0.16%)</title><rect x="562.2" y="949" width="1.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="565.17" y="959.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::__get_helper&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (4,817,976 samples, 0.02%)</title><rect x="923.3" y="1013" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="926.34" y="1023.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::formatWithoutBody (225,988,328 samples, 1.16%)</title><rect x="598.7" y="965" width="13.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="601.71" y="975.5" ></text>
</g>
<g >
<title>operator new (1,941,608 samples, 0.01%)</title><rect x="123.0" y="613" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="125.96" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,710,864 samples, 0.04%)</title><rect x="102.2" y="933" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="105.23" y="943.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (2,026,288 samples, 0.01%)</title><rect x="896.9" y="1045" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="899.91" y="1055.5" ></text>
</g>
<g >
<title>std::_Placeholder&lt;1&gt;&amp; std::__get_helper&lt;1ul, std::_Placeholder&lt;1&gt;&gt; (2,787,437 samples, 0.01%)</title><rect x="924.1" y="1029" width="0.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="927.05" y="1039.5" ></text>
</g>
<g >
<title>__fsnotify_inode_delete (21,505,655 samples, 0.11%)</title><rect x="946.4" y="789" width="1.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="949.42" y="799.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt;::_Tuple_impl (3,756,060 samples, 0.02%)</title><rect x="897.0" y="1029" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="900.03" y="1039.5" ></text>
</g>
<g >
<title>simple_copy_to_iter (74,606,433 samples, 0.38%)</title><rect x="372.1" y="885" width="4.5" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="375.11" y="895.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (2,863,989 samples, 0.01%)</title><rect x="163.1" y="533" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="166.07" y="543.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (1,888,948 samples, 0.01%)</title><rect x="301.3" y="885" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="304.27" y="895.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (3,014,355 samples, 0.02%)</title><rect x="361.5" y="917" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="364.48" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (1,930,476 samples, 0.01%)</title><rect x="573.9" y="933" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="576.89" y="943.5" ></text>
</g>
<g >
<title>dentry_unlink_inode (251,890,812 samples, 1.30%)</title><rect x="940.3" y="869" width="15.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="943.28" y="879.5" ></text>
</g>
<g >
<title>__printf_buffer (84,767,660 samples, 0.44%)</title><rect x="507.8" y="853" width="5.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="510.85" y="863.5" ></text>
</g>
<g >
<title>_IO_fflush (8,938,798 samples, 0.05%)</title><rect x="416.1" y="901" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="419.06" y="911.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (12,688,113 samples, 0.07%)</title><rect x="581.1" y="901" width="0.7" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="584.05" y="911.5" ></text>
</g>
<g >
<title>malloc (6,908,378 samples, 0.04%)</title><rect x="213.5" y="869" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="216.53" y="879.5" ></text>
</g>
<g >
<title>tcp_recvmsg_locked (393,804,156 samples, 2.03%)</title><rect x="363.2" y="933" width="23.9" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="366.17" y="943.5" >t..</text>
</g>
<g >
<title>default_wake_function (113,710,757 samples, 0.59%)</title><rect x="1133.2" y="437" width="6.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1136.19" y="447.5" ></text>
</g>
<g >
<title>aa_inet_sock_perm (11,689,381 samples, 0.06%)</title><rect x="238.1" y="821" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="241.07" y="831.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt; (3,937,832 samples, 0.02%)</title><rect x="215.4" y="869" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="218.43" y="879.5" ></text>
</g>
<g >
<title>__mod_memcg_state (1,934,729 samples, 0.01%)</title><rect x="816.2" y="725" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="819.21" y="735.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~map (2,016,760 samples, 0.01%)</title><rect x="118.3" y="613" width="0.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="121.28" y="623.5" ></text>
</g>
<g >
<title>move_addr_to_user (28,902,758 samples, 0.15%)</title><rect x="283.4" y="997" width="1.8" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="286.41" y="1007.5" ></text>
</g>
<g >
<title>slab_update_freelist.isra.0 (1,938,089 samples, 0.01%)</title><rect x="995.5" y="741" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="998.49" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_M_deallocate (2,859,768 samples, 0.01%)</title><rect x="38.7" y="1285" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="41.66" y="1295.5" ></text>
</g>
<g >
<title>do_syscall_64 (288,262,207 samples, 1.48%)</title><rect x="1028.4" y="917" width="17.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1031.43" y="927.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::__normal_iterator (10,838,909 samples, 0.06%)</title><rect x="878.3" y="1237" width="0.6" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="881.26" y="1247.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (634,311,025 samples, 3.27%)</title><rect x="130.9" y="725" width="38.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="133.92" y="735.5" >std..</text>
</g>
<g >
<title>webserver::ConnBuffer::writerBegin (3,756,397 samples, 0.02%)</title><rect x="543.9" y="965" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="546.86" y="975.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (20,194,641 samples, 0.10%)</title><rect x="88.5" y="949" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="91.52" y="959.5" ></text>
</g>
<g >
<title>dst_release (1,831,944 samples, 0.01%)</title><rect x="742.2" y="293" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="745.21" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (213,970,866 samples, 1.10%)</title><rect x="909.2" y="965" width="13.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="912.23" y="975.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,957,238 samples, 0.01%)</title><rect x="278.9" y="981" width="0.2" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="281.95" y="991.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (4,875,536 samples, 0.03%)</title><rect x="520.5" y="917" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="523.54" y="927.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (13,427,582,622 samples, 69.13%)</title><rect x="45.7" y="1253" width="815.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="48.68" y="1263.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Acceptor*&gt;::_M_head (2,009,721 samples, 0.01%)</title><rect x="859.7" y="1141" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="862.74" y="1151.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_ptr (8,724,895 samples, 0.04%)</title><rect x="1021.3" y="1093" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1024.27" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_left (1,971,151 samples, 0.01%)</title><rect x="917.8" y="789" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="920.78" y="799.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (10,675,641 samples, 0.05%)</title><rect x="928.2" y="1029" width="0.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="931.16" y="1039.5" ></text>
</g>
<g >
<title>void std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (23,129,614 samples, 0.12%)</title><rect x="557.4" y="853" width="1.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="560.39" y="863.5" ></text>
</g>
<g >
<title>webserver::EventLoop::isInLoopThread (1,968,888 samples, 0.01%)</title><rect x="824.8" y="933" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="827.76" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (4,894,931 samples, 0.03%)</title><rect x="1052.5" y="901" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1055.52" y="911.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (6,947,575 samples, 0.04%)</title><rect x="55.2" y="1093" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="58.22" y="1103.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (2,018,396 samples, 0.01%)</title><rect x="591.2" y="965" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="594.16" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (2,816,970 samples, 0.01%)</title><rect x="611.4" y="933" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="614.44" y="943.5" ></text>
</g>
<g >
<title>__offtime (8,740,349 samples, 0.05%)</title><rect x="515.3" y="869" width="0.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="518.29" y="879.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~_Tuple_impl (4,863,285 samples, 0.03%)</title><rect x="902.2" y="965" width="0.3" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="905.24" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (6,941,642 samples, 0.04%)</title><rect x="519.1" y="917" width="0.4" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="522.06" y="927.5" ></text>
</g>
<g >
<title>_raw_spin_lock (3,005,616 samples, 0.02%)</title><rect x="1042.0" y="853" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1045.00" y="863.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,992,405 samples, 0.01%)</title><rect x="301.4" y="885" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="304.44" y="895.5" ></text>
</g>
<g >
<title>consume_stock (2,883,294 samples, 0.01%)</title><rect x="766.6" y="213" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="769.62" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (21,323,210 samples, 0.11%)</title><rect x="516.5" y="885" width="1.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="519.47" y="895.5" ></text>
</g>
<g >
<title>x64_sys_call (2,951,663 samples, 0.02%)</title><rect x="336.0" y="1077" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="339.04" y="1087.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (2,966,347 samples, 0.02%)</title><rect x="1051.1" y="885" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1054.13" y="895.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,899,374 samples, 0.01%)</title><rect x="1060.0" y="1061" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1062.99" y="1071.5" ></text>
</g>
<g >
<title>cpus_share_cache (1,838,823 samples, 0.01%)</title><rect x="751.6" y="149" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="754.57" y="159.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr (4,946,227 samples, 0.03%)</title><rect x="903.8" y="901" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="906.83" y="911.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp;&amp; std::forward&lt;webserver::ConnBuffer*&gt; (1,966,517 samples, 0.01%)</title><rect x="842.3" y="1125" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="845.26" y="1135.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (4,999,662 samples, 0.03%)</title><rect x="424.6" y="885" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="427.61" y="895.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (12,134,592 samples, 0.06%)</title><rect x="883.7" y="1205" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="886.66" y="1215.5" ></text>
</g>
<g >
<title>page_counter_try_charge (2,884,778 samples, 0.01%)</title><rect x="764.8" y="229" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="767.78" y="239.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,917,862 samples, 0.03%)</title><rect x="208.0" y="917" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="210.96" y="927.5" ></text>
</g>
<g >
<title>tcp_v4_send_reset (7,563,244 samples, 0.04%)</title><rect x="774.5" y="341" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="777.52" y="351.5" ></text>
</g>
<g >
<title>kfree_skbmem (1,855,141 samples, 0.01%)</title><rect x="780.3" y="485" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="783.26" y="495.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::HttpRequest (18,953,792 samples, 0.10%)</title><rect x="115.9" y="629" width="1.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="118.95" y="639.5" ></text>
</g>
<g >
<title>bool boost::typeindex::operator==&lt;boost::typeindex::stl_type_index, std::type_info&gt; (12,738,196 samples, 0.07%)</title><rect x="526.7" y="949" width="0.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="529.69" y="959.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::get (1,935,834 samples, 0.01%)</title><rect x="198.6" y="965" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="201.59" y="975.5" ></text>
</g>
<g >
<title>webserver::Channel::run (13,512,721,530 samples, 69.57%)</title><rect x="40.6" y="1301" width="820.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="43.57" y="1311.5" >webserver::Channel::run</text>
</g>
<g >
<title>_raw_spin_lock_irq (2,000,610 samples, 0.01%)</title><rect x="944.7" y="805" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="947.71" y="815.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (7,824,565 samples, 0.04%)</title><rect x="1186.6" y="1237" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.63" y="1247.5" ></text>
</g>
<g >
<title>webserver::Channel* const&amp; std::forward&lt;webserver::Channel* const&amp;&gt; (2,026,871 samples, 0.01%)</title><rect x="879.6" y="1269" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="882.55" y="1279.5" ></text>
</g>
<g >
<title>__GI___libc_write (3,402,630,170 samples, 17.52%)</title><rect x="617.3" y="949" width="206.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="620.28" y="959.5" >__GI___libc_write</text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (4,570,280 samples, 0.02%)</title><rect x="111.6" y="789" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="114.55" y="799.5" ></text>
</g>
<g >
<title>webserver::detail::defaultLoggerOutputFunc (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="1093" width="0.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1183.50" y="1103.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (2,814,497 samples, 0.01%)</title><rect x="400.0" y="1029" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="402.97" y="1039.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3,003,437 samples, 0.02%)</title><rect x="1009.9" y="933" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1012.93" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,945,251 samples, 0.01%)</title><rect x="911.9" y="805" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="914.89" y="815.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (1,350,312,814 samples, 6.95%)</title><rect x="1089.4" y="981" width="82.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1092.41" y="991.5" >__tcp_pus..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (282,493,684 samples, 1.45%)</title><rect x="17.9" y="1285" width="17.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="20.89" y="1295.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,873,711 samples, 0.03%)</title><rect x="889.4" y="1157" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="892.42" y="1167.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Rb_tree (4,961,721 samples, 0.03%)</title><rect x="1006.7" y="917" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1009.70" y="927.5" ></text>
</g>
<g >
<title>std::tuple&lt;int&amp;&amp;&gt; std::forward_as_tuple&lt;int&gt; (16,920,067 samples, 0.09%)</title><rect x="57.4" y="1045" width="1.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="60.44" y="1055.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,801,431 samples, 0.01%)</title><rect x="912.6" y="837" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="915.63" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Rb_tree (3,941,832 samples, 0.02%)</title><rect x="121.1" y="629" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="124.09" y="639.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::Poller*, webserver::Channel*&gt;::tuple&lt;webserver::Poller*, webserver::Channel*&amp;, true&gt; (5,998,148 samples, 0.03%)</title><rect x="128.3" y="741" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="131.31" y="751.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (9,711,274 samples, 0.05%)</title><rect x="901.9" y="997" width="0.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="904.94" y="1007.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Poller*, webserver::Channel*&gt;::_Tuple_impl (2,032,801 samples, 0.01%)</title><rect x="130.2" y="693" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="133.21" y="703.5" ></text>
</g>
<g >
<title>_int_free (1,927,742 samples, 0.01%)</title><rect x="848.0" y="1013" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="851.01" y="1023.5" ></text>
</g>
<g >
<title>release_sock (8,782,257 samples, 0.05%)</title><rect x="224.7" y="837" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="227.67" y="847.5" ></text>
</g>
<g >
<title>_copy_from_iter (4,866,476 samples, 0.03%)</title><rect x="664.8" y="757" width="0.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="667.84" y="767.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;bool  (2,957,021 samples, 0.02%)</title><rect x="248.2" y="933" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="251.20" y="943.5" ></text>
</g>
<g >
<title>ep_refcount_dec_and_test (4,030,400 samples, 0.02%)</title><rect x="1042.6" y="853" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1045.59" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (1,892,783 samples, 0.01%)</title><rect x="1068.0" y="885" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1071.01" y="895.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (467,126,106 samples, 2.41%)</title><rect x="1026.8" y="1029" width="28.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1029.81" y="1039.5" >vo..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, void&gt; (1,927,290 samples, 0.01%)</title><rect x="192.9" y="965" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="195.91" y="975.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::Channel*, false&gt;::_M_head (2,935,889 samples, 0.02%)</title><rect x="1021.6" y="1029" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1024.62" y="1039.5" ></text>
</g>
<g >
<title>apparmor_socket_getsockname (9,631,453 samples, 0.05%)</title><rect x="223.0" y="853" width="0.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="225.96" y="863.5" ></text>
</g>
<g >
<title>_atomic_dec_and_lock (1,894,318 samples, 0.01%)</title><rect x="941.3" y="853" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="944.35" y="863.5" ></text>
</g>
<g >
<title>webserver::Socket::~Socket (2,940,032 samples, 0.02%)</title><rect x="1019.6" y="1013" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1022.59" y="1023.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (6,739,885 samples, 0.03%)</title><rect x="895.6" y="1093" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="898.60" y="1103.5" ></text>
</g>
<g >
<title>tcp_set_keepalive (8,919,449 samples, 0.05%)</title><rect x="187.7" y="837" width="0.6" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="190.75" y="847.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2,784,054 samples, 0.01%)</title><rect x="824.0" y="949" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="827.00" y="959.5" ></text>
</g>
<g >
<title>bpf_skops_write_hdr_opt.isra.0 (1,975,228 samples, 0.01%)</title><rect x="795.3" y="725" width="0.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="798.35" y="735.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (1,983,995 samples, 0.01%)</title><rect x="623.7" y="837" width="0.1" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="626.67" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (2,011,684 samples, 0.01%)</title><rect x="163.5" y="565" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="166.49" y="575.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (13,319,166,746 samples, 68.58%)</title><rect x="49.9" y="1157" width="809.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="52.90" y="1167.5" >void std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>mod_memcg_state (18,339,130 samples, 0.09%)</title><rect x="763.7" y="229" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="766.67" y="239.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; (2,927,315 samples, 0.02%)</title><rect x="1056.2" y="1045" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1059.20" y="1055.5" ></text>
</g>
<g >
<title>webserver::Logger::~Logger (13,305,627 samples, 0.07%)</title><rect x="1180.4" y="1109" width="0.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1183.44" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Rb_tree_impl (4,892,724 samples, 0.03%)</title><rect x="122.5" y="533" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="125.54" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (3,006,780 samples, 0.02%)</title><rect x="164.0" y="581" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="166.96" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;void  (26,735,055 samples, 0.14%)</title><rect x="242.9" y="949" width="1.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="245.92" y="959.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (3,033,501 samples, 0.02%)</title><rect x="550.2" y="869" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="553.19" y="879.5" ></text>
</g>
<g >
<title>page_counter_try_charge (13,939,433 samples, 0.07%)</title><rect x="274.4" y="933" width="0.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="277.41" y="943.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,026,426 samples, 0.01%)</title><rect x="920.8" y="821" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="923.76" y="831.5" ></text>
</g>
<g >
<title>ip_finish_output (1,054,400,091 samples, 5.43%)</title><rect x="1097.2" y="869" width="64.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1100.16" y="879.5" >ip_fini..</text>
</g>
<g >
<title>webserver::EpollPoller::updateChannel (1,978,526 samples, 0.01%)</title><rect x="168.8" y="645" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="171.80" y="655.5" ></text>
</g>
<g >
<title>__mod_timer (30,875,637 samples, 0.16%)</title><rect x="799.9" y="645" width="1.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="802.87" y="655.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (8,602,726 samples, 0.04%)</title><rect x="427.9" y="885" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="430.92" y="895.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,855,813 samples, 0.01%)</title><rect x="951.9" y="805" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="954.90" y="815.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::now (34,355,301 samples, 0.18%)</title><rect x="857.0" y="1125" width="2.1" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="860.01" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (2,003,253 samples, 0.01%)</title><rect x="1067.6" y="885" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1070.60" y="895.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::removeChannel (1,921,020 samples, 0.01%)</title><rect x="1070.5" y="981" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1073.55" y="991.5" ></text>
</g>
<g >
<title>unsigned int std::__detail::__to_chars_len&lt;unsigned long&gt; (3,955,900 samples, 0.02%)</title><rect x="590.1" y="949" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="593.14" y="959.5" ></text>
</g>
<g >
<title>mem_cgroup_charge_skmem (25,785,725 samples, 0.13%)</title><rect x="1171.6" y="965" width="1.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1174.57" y="975.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (2,061,551 samples, 0.01%)</title><rect x="899.6" y="1013" width="0.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="902.61" y="1023.5" ></text>
</g>
<g >
<title>sk_reset_timer (47,718,079 samples, 0.25%)</title><rect x="1120.9" y="501" width="2.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1123.86" y="511.5" ></text>
</g>
<g >
<title>ktime_get (5,762,501 samples, 0.03%)</title><rect x="1164.1" y="949" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1167.07" y="959.5" ></text>
</g>
<g >
<title>ip_local_out (1,087,220,102 samples, 5.60%)</title><rect x="1095.5" y="901" width="66.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1098.53" y="911.5" >ip_loca..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,931,212 samples, 0.02%)</title><rect x="1015.3" y="917" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1018.31" y="927.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,827,894 samples, 0.01%)</title><rect x="797.1" y="725" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="800.15" y="735.5" ></text>
</g>
<g >
<title>tcp_small_queue_check.isra.0 (1,958,556 samples, 0.01%)</title><rect x="667.4" y="741" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="670.38" y="751.5" ></text>
</g>
<g >
<title>webserver::EventThreadPool::getNextLoop (4,843,558 samples, 0.02%)</title><rect x="62.3" y="997" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="65.32" y="1007.5" ></text>
</g>
<g >
<title>__memset (5,979,873 samples, 0.03%)</title><rect x="813.2" y="741" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="816.17" y="751.5" ></text>
</g>
<g >
<title>try_charge_memcg (2,973,325 samples, 0.02%)</title><rect x="1173.0" y="949" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1175.96" y="959.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt; (7,831,582 samples, 0.04%)</title><rect x="875.1" y="1205" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="878.07" y="1215.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2,023,967 samples, 0.01%)</title><rect x="247.7" y="933" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="250.72" y="943.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (111,696,789 samples, 0.58%)</title><rect x="369.9" y="901" width="6.8" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="372.91" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_erase_aux (14,421,034 samples, 0.07%)</title><rect x="1062.5" y="901" width="0.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1065.54" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (3,885,233 samples, 0.02%)</title><rect x="499.3" y="837" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="502.31" y="847.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8,346,820 samples, 0.04%)</title><rect x="46.1" y="1237" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="49.10" y="1247.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (114,636,883 samples, 0.59%)</title><rect x="369.8" y="917" width="7.0" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="372.80" y="927.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp;&amp; std::forward&lt;webserver::ConnBuffer*&amp;&amp;&gt; (1,892,291 samples, 0.01%)</title><rect x="838.8" y="997" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="841.84" y="1007.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,867,964 samples, 0.01%)</title><rect x="551.4" y="901" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="554.39" y="911.5" ></text>
</g>
<g >
<title>__x64_sys_write (10,781,732 samples, 0.06%)</title><rect x="339.8" y="981" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="342.83" y="991.5" ></text>
</g>
<g >
<title>__copy_skb_header (3,929,014 samples, 0.02%)</title><rect x="1163.0" y="901" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1166.00" y="911.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::shared_ptr (9,601,413 samples, 0.05%)</title><rect x="43.1" y="1269" width="0.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="46.07" y="1279.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (42,603,242 samples, 0.22%)</title><rect x="1012.4" y="949" width="2.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1015.42" y="959.5" ></text>
</g>
<g >
<title>_int_free (1,980,137 samples, 0.01%)</title><rect x="927.6" y="997" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="930.56" y="1007.5" ></text>
</g>
<g >
<title>std::function&lt;void  (32,209,056 samples, 0.17%)</title><rect x="247.1" y="965" width="2.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="250.12" y="975.5" ></text>
</g>
<g >
<title>skb_release_head_state (2,004,728 samples, 0.01%)</title><rect x="1155.1" y="709" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1158.08" y="719.5" ></text>
</g>
<g >
<title>expand_files (2,894,208 samples, 0.01%)</title><rect x="333.2" y="997" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="336.25" y="1007.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (7,821,821 samples, 0.04%)</title><rect x="500.1" y="821" width="0.5" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="503.15" y="831.5" ></text>
</g>
<g >
<title>ip_finish_output (1,976,156 samples, 0.01%)</title><rect x="1096.4" y="885" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1099.41" y="895.5" ></text>
</g>
<g >
<title>clear_page_erms (2,929,404 samples, 0.02%)</title><rect x="148.0" y="421" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="150.96" y="431.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; &gt;::type&amp; std::get&lt;1ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; (2,787,437 samples, 0.01%)</title><rect x="924.1" y="1045" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="927.05" y="1055.5" ></text>
</g>
<g >
<title>tcp_data_ready (37,034,005 samples, 0.19%)</title><rect x="1128.0" y="517" width="2.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1130.95" y="527.5" ></text>
</g>
<g >
<title>select_task_rq (80,111,781 samples, 0.41%)</title><rect x="750.3" y="181" width="4.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="753.29" y="191.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2,545,399 samples, 0.01%)</title><rect x="565.4" y="901" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="568.44" y="911.5" ></text>
</g>
<g >
<title>std::enable_if&lt; (2,917,172 samples, 0.02%)</title><rect x="399.6" y="1045" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="402.55" y="1055.5" ></text>
</g>
<g >
<title>__memset (2,915,392 samples, 0.02%)</title><rect x="1087.1" y="965" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1090.11" y="975.5" ></text>
</g>
<g >
<title>__mod_memcg_state (2,013,757 samples, 0.01%)</title><rect x="377.8" y="869" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="380.80" y="879.5" ></text>
</g>
<g >
<title>tcp_validate_incoming (4,436,984 samples, 0.02%)</title><rect x="1149.9" y="533" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1152.85" y="543.5" ></text>
</g>
<g >
<title>std::_Bind_helper&lt;std::__or_&lt;std::is_integral&lt;std::decay&lt;void  (6,867,751 samples, 0.04%)</title><rect x="1058.7" y="1109" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1061.68" y="1119.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,907,999 samples, 0.02%)</title><rect x="102.5" y="901" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="105.52" y="911.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (29,385,616 samples, 0.15%)</title><rect x="496.8" y="885" width="1.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="499.80" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_lower_bound (41,104,753 samples, 0.21%)</title><rect x="156.5" y="581" width="2.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="159.47" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_get_node (6,840,228 samples, 0.04%)</title><rect x="96.7" y="901" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="99.65" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator (1,906,872 samples, 0.01%)</title><rect x="155.6" y="613" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="158.57" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (1,947,221 samples, 0.01%)</title><rect x="1068.2" y="901" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1071.24" y="911.5" ></text>
</g>
<g >
<title>__strlen_avx2 (5,870,895 samples, 0.03%)</title><rect x="411.8" y="965" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="414.82" y="975.5" ></text>
</g>
<g >
<title>remove_wait_queue (7,772,406 samples, 0.04%)</title><rect x="479.8" y="677" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="482.76" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (3,928,952 samples, 0.02%)</title><rect x="159.0" y="565" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="162.03" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::begin (13,788,797 samples, 0.07%)</title><rect x="878.1" y="1253" width="0.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="881.08" y="1263.5" ></text>
</g>
<g >
<title>tcp_data_queue (3,934,592 samples, 0.02%)</title><rect x="716.3" y="325" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="719.26" y="335.5" ></text>
</g>
<g >
<title>__check_object_size (40,389,090 samples, 0.21%)</title><rect x="372.4" y="869" width="2.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="375.41" y="879.5" ></text>
</g>
<g >
<title>boost::any::~any (2,877,631 samples, 0.01%)</title><rect x="123.5" y="645" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="126.49" y="655.5" ></text>
</g>
<g >
<title>boost::any::~any (5,839,230 samples, 0.03%)</title><rect x="926.9" y="1029" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="929.92" y="1039.5" ></text>
</g>
<g >
<title>import_iovec (5,669,975 samples, 0.03%)</title><rect x="349.4" y="1029" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="352.44" y="1039.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (4,909,459 samples, 0.03%)</title><rect x="477.0" y="645" width="0.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="480.03" y="655.5" ></text>
</g>
<g >
<title>tcp_ack_update_window.isra.0 (1,956,008 samples, 0.01%)</title><rect x="740.4" y="293" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="743.36" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;void  (24,354,309 samples, 0.13%)</title><rect x="247.6" y="949" width="1.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="250.60" y="959.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (201,429,695 samples, 1.04%)</title><rect x="909.9" y="933" width="12.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="912.93" y="943.5" ></text>
</g>
<g >
<title>tcp_rcv_established (534,859,441 samples, 2.75%)</title><rect x="1117.6" y="549" width="32.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1120.63" y="559.5" >tc..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (6,899,380 samples, 0.04%)</title><rect x="421.4" y="869" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="424.39" y="879.5" ></text>
</g>
<g >
<title>skb_page_frag_refill (3,861,755 samples, 0.02%)</title><rect x="665.1" y="773" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="668.13" y="783.5" ></text>
</g>
<g >
<title>char const* std::find&lt;char const*, char&gt; (3,954,716 samples, 0.02%)</title><rect x="531.5" y="965" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="534.50" y="975.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (1,876,903 samples, 0.01%)</title><rect x="1140.0" y="421" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1142.98" y="431.5" ></text>
</g>
<g >
<title>std::_Bind_helper&lt;std::__or_&lt;std::is_integral&lt;std::decay&lt;void  (26,394,188 samples, 0.14%)</title><rect x="190.8" y="965" width="1.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="193.76" y="975.5" ></text>
</g>
<g >
<title>ip_finish_output (134,824,484 samples, 0.69%)</title><rect x="728.1" y="181" width="8.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="731.08" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (11,778,439 samples, 0.06%)</title><rect x="606.8" y="885" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="609.83" y="895.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (209,326,342 samples, 1.08%)</title><rect x="112.6" y="789" width="12.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="115.55" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator* (3,923,830 samples, 0.02%)</title><rect x="606.2" y="933" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="609.23" y="943.5" ></text>
</g>
<g >
<title>skb_clone_tx_timestamp (5,897,875 samples, 0.03%)</title><rect x="789.2" y="549" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="792.24" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt;::begin (3,013,150 samples, 0.02%)</title><rect x="171.9" y="965" width="0.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="174.85" y="975.5" ></text>
</g>
<g >
<title>_raw_spin_lock (4,049,308 samples, 0.02%)</title><rect x="1122.9" y="469" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1125.91" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (11,771,447 samples, 0.06%)</title><rect x="428.6" y="901" width="0.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="431.56" y="911.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,981,567 samples, 0.01%)</title><rect x="115.8" y="629" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="118.83" y="639.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (8,999,513 samples, 0.05%)</title><rect x="757.1" y="149" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="760.12" y="159.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (987,476,820 samples, 5.08%)</title><rect x="1100.6" y="805" width="60.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1103.64" y="815.5" >__dev_..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,924,878 samples, 0.01%)</title><rect x="44.8" y="1269" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="47.84" y="1279.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (32,461,488 samples, 0.17%)</title><rect x="498.8" y="853" width="2.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="501.82" y="863.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe.part.0 (31,418,971 samples, 0.16%)</title><rect x="804.3" y="725" width="1.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="807.34" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::get (5,880,014 samples, 0.03%)</title><rect x="841.9" y="1093" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="844.90" y="1103.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (446,579,850 samples, 2.30%)</title><rect x="897.6" y="1061" width="27.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="900.62" y="1071.5" >v..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_ptr (17,219,407 samples, 0.09%)</title><rect x="1010.4" y="997" width="1.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1013.36" y="1007.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,917,865 samples, 0.01%)</title><rect x="1045.9" y="933" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1048.94" y="943.5" ></text>
</g>
<g >
<title>__refill_stock (32,552,627 samples, 0.17%)</title><rect x="380.2" y="853" width="2.0" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="383.23" y="863.5" ></text>
</g>
<g >
<title>llist_add_batch (7,585,549 samples, 0.04%)</title><rect x="1139.0" y="389" width="0.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1141.97" y="399.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, false&gt;::_M_head (2,943,601 samples, 0.02%)</title><rect x="124.1" y="661" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="127.14" y="671.5" ></text>
</g>
<g >
<title>kfree (2,712,136 samples, 0.01%)</title><rect x="970.5" y="805" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="973.47" y="815.5" ></text>
</g>
<g >
<title>_find_next_zero_bit (5,720,453 samples, 0.03%)</title><rect x="330.9" y="997" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="333.94" y="1007.5" ></text>
</g>
<g >
<title>move_addr_to_user (16,496,617 samples, 0.08%)</title><rect x="225.2" y="853" width="1.0" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="228.21" y="863.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (310,891,656 samples, 1.60%)</title><rect x="457.7" y="629" width="18.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="460.72" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,541,860,524 samples, 7.94%)</title><rect x="926.4" y="1061" width="93.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="929.39" y="1071.5" >std::_Sp_co..</text>
</g>
<g >
<title>try_charge_memcg (107,575,615 samples, 0.55%)</title><rect x="765.1" y="229" width="6.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="768.13" y="239.5" ></text>
</g>
<g >
<title>operator delete (5,913,340 samples, 0.03%)</title><rect x="403.7" y="997" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="406.66" y="1007.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,965,648 samples, 0.01%)</title><rect x="821.0" y="757" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="823.99" y="767.5" ></text>
</g>
<g >
<title>tcp_rbtree_insert (5,007,817 samples, 0.03%)</title><rect x="1168.8" y="949" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1171.75" y="959.5" ></text>
</g>
<g >
<title>tcp_rbtree_insert (2,933,737 samples, 0.02%)</title><rect x="1166.5" y="933" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1169.45" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (4,917,761 samples, 0.03%)</title><rect x="892.5" y="1061" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="895.46" y="1071.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (22,421,927 samples, 0.12%)</title><rect x="1137.6" y="389" width="1.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1140.61" y="399.5" ></text>
</g>
<g >
<title>release_sock (7,654,714 samples, 0.04%)</title><rect x="982.0" y="837" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="985.00" y="847.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::type&amp; std::get&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; (7,916,756 samples, 0.04%)</title><rect x="170.6" y="869" width="0.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="173.59" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (2,004,579 samples, 0.01%)</title><rect x="499.2" y="837" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="502.19" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (2,029,048 samples, 0.01%)</title><rect x="548.9" y="917" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="551.88" y="927.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (80,514,427 samples, 0.41%)</title><rect x="797.9" y="725" width="4.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="800.91" y="735.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (472,166,110 samples, 2.43%)</title><rect x="1026.5" y="1045" width="28.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1029.50" y="1055.5" >st..</text>
</g>
<g >
<title>rcu_do_batch (4,023,429 samples, 0.02%)</title><rect x="784.2" y="469" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="787.17" y="479.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,008,943 samples, 0.01%)</title><rect x="977.6" y="773" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="980.64" y="783.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3,957,212 samples, 0.02%)</title><rect x="296.8" y="853" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="299.80" y="863.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (7,096,079 samples, 0.04%)</title><rect x="100.7" y="949" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="103.67" y="959.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,894,930 samples, 0.01%)</title><rect x="852.0" y="997" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="854.97" y="1007.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (306,508,821 samples, 1.58%)</title><rect x="719.7" y="309" width="18.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="722.67" y="319.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (10,708,959 samples, 0.06%)</title><rect x="213.3" y="901" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="216.30" y="911.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,762,986 samples, 0.01%)</title><rect x="243.9" y="885" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="246.86" y="895.5" ></text>
</g>
<g >
<title>bpf_skops_write_hdr_opt.isra.0 (2,958,318 samples, 0.02%)</title><rect x="1094.0" y="933" width="0.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1096.95" y="943.5" ></text>
</g>
<g >
<title>__mod_memcg_state (2,897,153 samples, 0.01%)</title><rect x="959.7" y="821" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="962.66" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_check_len (24,460,880 samples, 0.13%)</title><rect x="214.6" y="917" width="1.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="217.59" y="927.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::function&lt;void  (22,183,238 samples, 0.11%)</title><rect x="1187.8" y="1237" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.76" y="1247.5" ></text>
</g>
<g >
<title>iovec_from_user.part.0 (1,981,730 samples, 0.01%)</title><rect x="390.5" y="981" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="393.53" y="991.5" ></text>
</g>
<g >
<title>tcp_cleanup_congestion_control (3,835,210 samples, 0.02%)</title><rect x="972.3" y="805" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="975.35" y="815.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (510,316,014 samples, 2.63%)</title><rect x="894.0" y="1125" width="31.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="897.02" y="1135.5" >st..</text>
</g>
<g >
<title>malloc (4,900,939 samples, 0.03%)</title><rect x="89.1" y="917" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="92.09" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, webserver::Channel*&gt;::_Tuple_impl&lt;webserver::Channel*&amp;&gt; (3,009,805 samples, 0.02%)</title><rect x="1058.8" y="1045" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1061.80" y="1055.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (8,692,324 samples, 0.04%)</title><rect x="978.2" y="789" width="0.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="981.18" y="799.5" ></text>
</g>
<g >
<title>__skb_clone (4,858,745 samples, 0.03%)</title><rect x="672.7" y="709" width="0.3" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="675.67" y="719.5" ></text>
</g>
<g >
<title>refill_stock (2,937,220 samples, 0.02%)</title><rect x="765.0" y="229" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="767.96" y="239.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (9,744,579 samples, 0.05%)</title><rect x="87.5" y="949" width="0.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="90.50" y="959.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (3,909,389 samples, 0.02%)</title><rect x="561.2" y="933" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="564.18" y="943.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (39,529,746 samples, 0.20%)</title><rect x="82.6" y="933" width="2.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="85.64" y="943.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (3,972,756 samples, 0.02%)</title><rect x="46.8" y="1221" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="49.78" y="1231.5" ></text>
</g>
<g >
<title>put_cpu_partial (4,634,383 samples, 0.02%)</title><rect x="991.4" y="741" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="994.44" y="751.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (4,840,300,578 samples, 24.92%)</title><rect x="888.2" y="1189" width="294.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="891.18" y="1199.5" >std::__invoke_result&lt;void </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (5,795,577 samples, 0.03%)</title><rect x="593.8" y="933" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="596.76" y="943.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,819,132 samples, 0.01%)</title><rect x="996.4" y="789" width="0.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="999.38" y="799.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; (3,752,799 samples, 0.02%)</title><rect x="1025.0" y="1061" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1027.96" y="1071.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (27,682,030 samples, 0.14%)</title><rect x="1128.3" y="485" width="1.7" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1131.29" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::end (9,905,550 samples, 0.05%)</title><rect x="869.8" y="1269" width="0.6" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="872.82" y="1279.5" ></text>
</g>
<g >
<title>webserver::Socket::write (7,815,255 samples, 0.04%)</title><rect x="616.0" y="965" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="618.96" y="975.5" ></text>
</g>
<g >
<title>x64_sys_call (322,779,314 samples, 1.66%)</title><rect x="133.3" y="581" width="19.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="136.34" y="591.5" ></text>
</g>
<g >
<title>webserver::Channel::tie (1,755,687 samples, 0.01%)</title><rect x="110.4" y="837" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="113.44" y="847.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (7,934,734 samples, 0.04%)</title><rect x="575.6" y="869" width="0.5" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="578.62" y="879.5" ></text>
</g>
<g >
<title>inet_accept (11,869,944 samples, 0.06%)</title><rect x="333.5" y="1013" width="0.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="336.53" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_end (1,986,413 samples, 0.01%)</title><rect x="156.2" y="597" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="159.17" y="607.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (7,606,986 samples, 0.04%)</title><rect x="1024.3" y="1077" width="0.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1027.32" y="1087.5" ></text>
</g>
<g >
<title>webserver::Acceptor*&amp; std::__get_helper&lt;0ul, webserver::Acceptor*&gt; (5,942,056 samples, 0.03%)</title><rect x="860.5" y="1173" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="863.46" y="1183.5" ></text>
</g>
<g >
<title>ip_rcv_finish_core.isra.0 (7,550,443 samples, 0.04%)</title><rect x="1151.3" y="629" width="0.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1154.30" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_S_max_size (8,529,448 samples, 0.04%)</title><rect x="217.2" y="901" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="220.20" y="911.5" ></text>
</g>
<g >
<title>tcp_established_options (3,055,396 samples, 0.02%)</title><rect x="811.3" y="757" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="814.34" y="767.5" ></text>
</g>
<g >
<title>kfree (3,889,478 samples, 0.02%)</title><rect x="390.6" y="1013" width="0.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="393.65" y="1023.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (3,845,311 samples, 0.02%)</title><rect x="37.3" y="1301" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="40.34" y="1311.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (9,729,650 samples, 0.05%)</title><rect x="1059.5" y="1093" width="0.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1062.52" y="1103.5" ></text>
</g>
<g >
<title>tcp_rbtree_insert (2,022,074 samples, 0.01%)</title><rect x="803.2" y="725" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="806.20" y="735.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_noprof (13,810,636 samples, 0.07%)</title><rect x="312.0" y="917" width="0.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="315.03" y="927.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (26,776,404 samples, 0.14%)</title><rect x="756.0" y="165" width="1.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="759.04" y="175.5" ></text>
</g>
<g >
<title>tcp_poll (97,311,880 samples, 0.50%)</title><rect x="140.5" y="485" width="5.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="143.47" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (5,803,234 samples, 0.03%)</title><rect x="494.6" y="837" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="497.56" y="847.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (14,741,829 samples, 0.08%)</title><rect x="906.2" y="933" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="909.16" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (28,852,995 samples, 0.15%)</title><rect x="426.7" y="901" width="1.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="429.69" y="911.5" ></text>
</g>
<g >
<title>apparmor_sk_free_security (4,841,678 samples, 0.02%)</title><rect x="986.6" y="773" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="989.63" y="783.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;void  (2,923,430 samples, 0.02%)</title><rect x="246.8" y="917" width="0.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="249.77" y="927.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,850,011 samples, 0.02%)</title><rect x="833.3" y="869" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="836.27" y="879.5" ></text>
</g>
<g >
<title>tcp_stream_memory_free (1,966,400 samples, 0.01%)</title><rect x="146.3" y="469" width="0.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="149.27" y="479.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (5,018,833 samples, 0.03%)</title><rect x="997.1" y="789" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1000.09" y="799.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::~__new_allocator (6,860,245 samples, 0.04%)</title><rect x="429.8" y="901" width="0.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="432.80" y="911.5" ></text>
</g>
<g >
<title>malloc (2,953,805 samples, 0.02%)</title><rect x="102.2" y="901" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="105.23" y="911.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (2,957,915 samples, 0.02%)</title><rect x="657.2" y="757" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="660.23" y="767.5" ></text>
</g>
<g >
<title>inode_init_once (2,024,707 samples, 0.01%)</title><rect x="297.2" y="821" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="300.16" y="831.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,893,463 samples, 0.01%)</title><rect x="848.4" y="1061" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="851.43" y="1071.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2,015,459 samples, 0.01%)</title><rect x="548.0" y="933" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="550.97" y="943.5" ></text>
</g>
<g >
<title>tcp_v4_send_check (3,815,837 samples, 0.02%)</title><rect x="807.1" y="725" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="810.09" y="735.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::~holder (20,575,674 samples, 0.11%)</title><rect x="117.7" y="661" width="1.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="120.75" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_begin (1,727,942 samples, 0.01%)</title><rect x="865.2" y="1253" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.21" y="1263.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::find (70,514,172 samples, 0.36%)</title><rect x="156.3" y="597" width="4.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="159.29" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (1,933,717 samples, 0.01%)</title><rect x="841.8" y="1125" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="844.79" y="1135.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="997" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1023.36" y="1007.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,688,377 samples, 0.01%)</title><rect x="423.8" y="853" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="426.78" y="863.5" ></text>
</g>
<g >
<title>___slab_alloc (3,848,284 samples, 0.02%)</title><rect x="293.7" y="901" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="296.68" y="911.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (8,457,530 samples, 0.04%)</title><rect x="11.4" y="1349" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="14.42" y="1359.5" ></text>
</g>
<g >
<title>webserver::Channel::~Channel (66,128,925 samples, 0.34%)</title><rect x="1011.5" y="981" width="4.0" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1014.53" y="991.5" ></text>
</g>
<g >
<title>tcp_rate_skb_sent (2,647,699 samples, 0.01%)</title><rect x="803.0" y="725" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="806.04" y="735.5" ></text>
</g>
<g >
<title>clear_inode (2,936,892 samples, 0.02%)</title><rect x="942.8" y="837" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="945.82" y="847.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (1,854,664 samples, 0.01%)</title><rect x="1067.4" y="853" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1070.43" y="863.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (1,942,322 samples, 0.01%)</title><rect x="902.4" y="901" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="905.35" y="911.5" ></text>
</g>
<g >
<title>__skb_clone (8,723,765 samples, 0.04%)</title><rect x="1162.7" y="917" width="0.5" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1165.70" y="927.5" ></text>
</g>
<g >
<title>accept (12,315,734 samples, 0.06%)</title><rect x="11.4" y="1365" width="0.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="14.42" y="1375.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2,010,394 samples, 0.01%)</title><rect x="546.0" y="949" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="549.02" y="959.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::operator (3,791,578 samples, 0.02%)</title><rect x="1056.1" y="1109" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1059.15" y="1119.5" ></text>
</g>
<g >
<title>lock_sock_nested (10,989,326 samples, 0.06%)</title><rect x="279.1" y="981" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="282.06" y="991.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::operator (2,963,724 samples, 0.02%)</title><rect x="13.6" y="1317" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="16.58" y="1327.5" ></text>
</g>
<g >
<title>webserver::Channel*&amp; std::forward&lt;webserver::Channel*&amp;&gt; (2,005,846 samples, 0.01%)</title><rect x="1070.4" y="981" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1073.43" y="991.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; &gt;::type&amp;&amp; std::get&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; (4,788,557 samples, 0.02%)</title><rect x="838.2" y="1013" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="841.21" y="1023.5" ></text>
</g>
<g >
<title>__mod_memcg_state (1,958,751 samples, 0.01%)</title><rect x="322.0" y="869" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="325.00" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_const_iterator (11,611,693 samples, 0.06%)</title><rect x="1069.0" y="917" width="0.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1072.02" y="927.5" ></text>
</g>
<g >
<title>__cond_resched (1,929,905 samples, 0.01%)</title><rect x="267.6" y="965" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="270.56" y="975.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,887,480 samples, 0.01%)</title><rect x="737.4" y="229" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="740.40" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::EventThreadPool, std::default_delete&lt;webserver::EventThreadPool&gt; &gt;::operator (12,668,797 samples, 0.07%)</title><rect x="104.5" y="981" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="107.55" y="991.5" ></text>
</g>
<g >
<title>woken_wake_function (3,728,184 samples, 0.02%)</title><rect x="1129.7" y="469" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1132.74" y="479.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (1,238,751,892 samples, 6.38%)</title><rect x="699.7" y="357" width="75.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="702.72" y="367.5" >tcp_v4_rcv</text>
</g>
<g >
<title>sk_stop_timer (3,961,354 samples, 0.02%)</title><rect x="978.9" y="789" width="0.3" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="981.95" y="799.5" ></text>
</g>
<g >
<title>operator new (15,228,658 samples, 0.08%)</title><rect x="245.4" y="869" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="248.42" y="879.5" ></text>
</g>
<g >
<title>netif_rx_internal (3,945,220 samples, 0.02%)</title><rect x="788.4" y="533" width="0.3" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="791.42" y="543.5" ></text>
</g>
<g >
<title>__radix_tree_lookup (18,341,153 samples, 0.09%)</title><rect x="463.7" y="533" width="1.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="466.69" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (6,851,266 samples, 0.04%)</title><rect x="1183.9" y="1269" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1186.90" y="1279.5" ></text>
</g>
<g >
<title>_raw_write_lock_irq (2,947,352 samples, 0.02%)</title><rect x="139.6" y="517" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="142.64" y="527.5" ></text>
</g>
<g >
<title>neigh_hh_output (993,387,575 samples, 5.11%)</title><rect x="1100.5" y="821" width="60.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1103.46" y="831.5" >neigh_..</text>
</g>
<g >
<title>new_inode_pseudo (318,729,770 samples, 1.64%)</title><rect x="287.4" y="981" width="19.4" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="290.39" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_get_Node_allocator (2,931,905 samples, 0.02%)</title><rect x="165.4" y="533" width="0.1" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="168.36" y="543.5" ></text>
</g>
<g >
<title>webserver::TcpConnection*&amp; std::__get_helper&lt;0ul, webserver::TcpConnection*&gt; (2,018,360 samples, 0.01%)</title><rect x="1183.1" y="1189" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1186.07" y="1199.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (8,745,575 samples, 0.05%)</title><rect x="359.0" y="933" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="361.96" y="943.5" ></text>
</g>
<g >
<title>__GI___shutdown (1,971,826 samples, 0.01%)</title><rect x="10.8" y="1333" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="13.77" y="1343.5" ></text>
</g>
<g >
<title>__GI___snprintf (115,768,611 samples, 0.60%)</title><rect x="507.6" y="885" width="7.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="510.60" y="895.5" ></text>
</g>
<g >
<title>raw_v4_input (9,760,616 samples, 0.05%)</title><rect x="698.1" y="341" width="0.6" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="701.11" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_end (1,901,637 samples, 0.01%)</title><rect x="1057.1" y="1061" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1060.09" y="1071.5" ></text>
</g>
<g >
<title>x64_sys_call (2,743,318 samples, 0.01%)</title><rect x="396.3" y="1093" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="399.28" y="1103.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (12,006,765 samples, 0.06%)</title><rect x="1051.4" y="885" width="0.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1054.43" y="895.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,022,371 samples, 0.01%)</title><rect x="229.0" y="869" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="232.05" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_right (3,745,414 samples, 0.02%)</title><rect x="576.4" y="901" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="579.40" y="911.5" ></text>
</g>
<g >
<title>drain_stock (15,492,974 samples, 0.08%)</title><rect x="276.2" y="901" width="1.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="279.22" y="911.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,018,366 samples, 0.01%)</title><rect x="1007.1" y="981" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1010.06" y="991.5" ></text>
</g>
<g >
<title>webserver::TcpConnection*&amp; std::__get_helper&lt;0ul, webserver::TcpConnection*&gt; (2,894,851 samples, 0.01%)</title><rect x="860.0" y="1157" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="862.98" y="1167.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::find (22,437,963 samples, 0.12%)</title><rect x="1057.0" y="1077" width="1.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1060.03" y="1087.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (649,923,605 samples, 3.35%)</title><rect x="1110.8" y="581" width="39.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1113.81" y="591.5" >tcp..</text>
</g>
<g >
<title>webserver::TcpConnection::closeInLoop (2,979,273,787 samples, 15.34%)</title><rect x="890.6" y="1157" width="181.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="893.62" y="1167.5" >webserver::TcpConnectio..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (2,849,650 samples, 0.01%)</title><rect x="592.0" y="933" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="594.99" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (39,713,693 samples, 0.20%)</title><rect x="267.7" y="965" width="2.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="270.74" y="975.5" ></text>
</g>
<g >
<title>webserver::EventLoop::isInLoopThread (2,991,565 samples, 0.02%)</title><rect x="251.1" y="1109" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="254.13" y="1119.5" ></text>
</g>
<g >
<title>__srcu_read_lock (2,029,297 samples, 0.01%)</title><rect x="947.4" y="741" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="950.43" y="751.5" ></text>
</g>
<g >
<title>malloc (1,923,490 samples, 0.01%)</title><rect x="97.0" y="853" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="99.95" y="863.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (7,931,812 samples, 0.04%)</title><rect x="1178.7" y="1109" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1181.68" y="1119.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::~HttpRequest (7,011,563 samples, 0.04%)</title><rect x="118.4" y="613" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="121.40" y="623.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (1,030,974,237 samples, 5.31%)</title><rect x="108.6" y="885" width="62.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="111.56" y="895.5" >void s..</text>
</g>
<g >
<title>std::tuple&lt;webserver::Poller*, webserver::Channel*&gt;::tuple (2,032,801 samples, 0.01%)</title><rect x="130.2" y="709" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="133.21" y="719.5" ></text>
</g>
<g >
<title>webserver::EventLoop::isInLoopThread (1,936,238 samples, 0.01%)</title><rect x="1071.0" y="1093" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1074.02" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_destroy_node (5,062,501 samples, 0.03%)</title><rect x="574.5" y="901" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="577.54" y="911.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, bool&gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (45,253,837 samples, 0.23%)</title><rect x="594.6" y="949" width="2.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="597.60" y="959.5" ></text>
</g>
<g >
<title>std::function&lt;void  (6,815,569 samples, 0.04%)</title><rect x="853.2" y="1045" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="856.16" y="1055.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,778,559 samples, 0.01%)</title><rect x="333.4" y="997" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="336.42" y="1007.5" ></text>
</g>
<g >
<title>release_sock (10,416,255 samples, 0.05%)</title><rect x="282.7" y="981" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="285.72" y="991.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (81,781,260 samples, 0.42%)</title><rect x="1118.9" y="533" width="5.0" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1121.91" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2,020,157 samples, 0.01%)</title><rect x="77.5" y="965" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="80.47" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (1,842,948 samples, 0.01%)</title><rect x="829.2" y="933" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="832.18" y="943.5" ></text>
</g>
<g >
<title>__strchrnul_ifunc@plt (1,942,052 samples, 0.01%)</title><rect x="70.3" y="949" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="73.26" y="959.5" ></text>
</g>
<g >
<title>tcp_inbound_hash (2,005,905 samples, 0.01%)</title><rect x="699.2" y="357" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="702.24" y="367.5" ></text>
</g>
<g >
<title>malloc (2,049,867 samples, 0.01%)</title><rect x="587.4" y="917" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="590.36" y="927.5" ></text>
</g>
<g >
<title>inet_label_sock_perm (2,991,959 samples, 0.02%)</title><rect x="227.8" y="805" width="0.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="230.80" y="815.5" ></text>
</g>
<g >
<title> (1,906,872 samples, 0.01%)</title><rect x="155.6" y="597" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="158.57" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (3,986,110 samples, 0.02%)</title><rect x="125.9" y="821" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="128.87" y="831.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_drop_node (1,872,258 samples, 0.01%)</title><rect x="1062.4" y="901" width="0.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1065.43" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (38,185,425 samples, 0.20%)</title><rect x="574.3" y="917" width="2.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="577.31" y="927.5" ></text>
</g>
<g >
<title>ipv4_dst_check (2,019,716 samples, 0.01%)</title><rect x="736.6" y="213" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="739.63" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_write (3,361,456,502 samples, 17.31%)</title><rect x="619.2" y="885" width="204.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="622.21" y="895.5" >__x64_sys_write</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (91,138,261 samples, 0.47%)</title><rect x="485.4" y="901" width="5.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="488.43" y="911.5" ></text>
</g>
<g >
<title>process_backlog (3,970,025 samples, 0.02%)</title><rect x="783.5" y="485" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="786.50" y="495.5" ></text>
</g>
<g >
<title>mem_cgroup_charge_skmem (131,736,743 samples, 0.68%)</title><rect x="763.7" y="245" width="8.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="766.67" y="255.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3,908,739 samples, 0.02%)</title><rect x="397.1" y="1077" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="400.08" y="1087.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (5,799,547 samples, 0.03%)</title><rect x="97.8" y="885" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="100.76" y="895.5" ></text>
</g>
<g >
<title>do_syscall_64 (211,869,112 samples, 1.09%)</title><rect x="176.8" y="933" width="12.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="179.77" y="943.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (21,694,200 samples, 0.11%)</title><rect x="905.7" y="965" width="1.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="908.73" y="975.5" ></text>
</g>
<g >
<title>webserver::Channel::disableAll (554,557,374 samples, 2.86%)</title><rect x="1021.8" y="1141" width="33.7" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1024.80" y="1151.5" >we..</text>
</g>
<g >
<title>__sk_mem_raise_allocated (148,495,655 samples, 0.76%)</title><rect x="763.0" y="261" width="9.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="766.02" y="271.5" ></text>
</g>
<g >
<title>std::ostream::put (870,090,919 samples, 4.48%)</title><rect x="432.6" y="885" width="52.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="435.56" y="895.5" >std::..</text>
</g>
<g >
<title>std::function&lt;void  (638,006,483 samples, 3.28%)</title><rect x="130.8" y="757" width="38.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="133.82" y="767.5" >std..</text>
</g>
<g >
<title>sk_forced_mem_schedule (79,612,409 samples, 0.41%)</title><rect x="816.2" y="757" width="4.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="819.15" y="767.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_equal_to_iter::operator (1,948,001 samples, 0.01%)</title><rect x="533.5" y="933" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="536.53" y="943.5" ></text>
</g>
<g >
<title>webserver::HttpParser::reset (4,862,678 samples, 0.03%)</title><rect x="405.6" y="997" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="408.56" y="1007.5" ></text>
</g>
<g >
<title>mod_memcg_state (31,090,923 samples, 0.16%)</title><rect x="377.9" y="869" width="1.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="380.92" y="879.5" ></text>
</g>
<g >
<title>skb_network_protocol (3,026,270 samples, 0.02%)</title><rect x="1160.0" y="773" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1163.03" y="783.5" ></text>
</g>
<g >
<title>sock_read_iter (2,933,502 samples, 0.02%)</title><rect x="395.5" y="1013" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="398.46" y="1023.5" ></text>
</g>
<g >
<title>ip_rcv_finish_core.isra.0 (3,791,972 samples, 0.02%)</title><rect x="778.9" y="421" width="0.2" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="781.90" y="431.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::setConnectCallback (2,009,484 samples, 0.01%)</title><rect x="62.7" y="997" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="65.72" y="1007.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (4,909,297 samples, 0.03%)</title><rect x="167.5" y="565" width="0.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="170.54" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::begin (5,017,833 samples, 0.03%)</title><rect x="37.6" y="1301" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="40.57" y="1311.5" ></text>
</g>
<g >
<title>ip_finish_output (3,903,792 samples, 0.02%)</title><rect x="675.3" y="661" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="678.33" y="671.5" ></text>
</g>
<g >
<title>try_to_wake_up (2,955,787 samples, 0.02%)</title><rect x="1180.9" y="725" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1183.92" y="735.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (14,356,210 samples, 0.07%)</title><rect x="786.8" y="501" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="789.83" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (1,906,714 samples, 0.01%)</title><rect x="864.2" y="1269" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="867.25" y="1279.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (3,872,412 samples, 0.02%)</title><rect x="592.5" y="901" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="595.53" y="911.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,969,255 samples, 0.01%)</title><rect x="1165.1" y="949" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1168.08" y="959.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,936,800 samples, 0.01%)</title><rect x="896.2" y="1077" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="899.18" y="1087.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::setBody (1,998,162 samples, 0.01%)</title><rect x="523.4" y="917" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="526.37" y="927.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4,840,871 samples, 0.02%)</title><rect x="558.2" y="837" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="561.15" y="847.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (2,833,327 samples, 0.01%)</title><rect x="207.1" y="917" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="210.09" y="927.5" ></text>
</g>
<g >
<title>__GI___snprintf (92,119,331 samples, 0.47%)</title><rect x="65.7" y="981" width="5.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="68.66" y="991.5" ></text>
</g>
<g >
<title>sock_def_readable (4,917,601 samples, 0.03%)</title><rect x="1127.5" y="517" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1130.53" y="527.5" ></text>
</g>
<g >
<title>mod_timer (3,907,736 samples, 0.02%)</title><rect x="805.9" y="693" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="808.89" y="703.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (25,194,428 samples, 0.13%)</title><rect x="907.1" y="981" width="1.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="910.05" y="991.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::Poller*, false&gt;::_M_head (1,987,373 samples, 0.01%)</title><rect x="130.6" y="693" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="133.58" y="703.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;, true, true&gt; (4,954,366 samples, 0.03%)</title><rect x="73.6" y="949" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="76.56" y="959.5" ></text>
</g>
<g >
<title>[unknown] (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="1045" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1023.36" y="1055.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (1,983,802 samples, 0.01%)</title><rect x="57.3" y="1045" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="60.25" y="1055.5" ></text>
</g>
<g >
<title>ksys_write (763,693,752 samples, 3.93%)</title><rect x="437.1" y="757" width="46.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="440.09" y="767.5" >ksys..</text>
</g>
<g >
<title>webserver::Poller* const&amp; std::__get_helper&lt;0ul, webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; (3,972,644 samples, 0.02%)</title><rect x="130.5" y="725" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="133.45" y="735.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator (1,845,049 samples, 0.01%)</title><rect x="1050.8" y="869" width="0.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1053.84" y="879.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::~HttpRequest (49,928,739 samples, 0.26%)</title><rect x="573.7" y="965" width="3.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="576.65" y="975.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (8,276,902 samples, 0.04%)</title><rect x="360.3" y="901" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="363.27" y="911.5" ></text>
</g>
<g >
<title>lock_timer_base (3,815,325 samples, 0.02%)</title><rect x="802.5" y="645" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="805.46" y="655.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::type (8,666,387 samples, 0.04%)</title><rect x="527.6" y="965" width="0.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="530.59" y="975.5" ></text>
</g>
<g >
<title>propagate_protected_usage (3,678,829 samples, 0.02%)</title><rect x="1146.5" y="421" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1149.55" y="431.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,904,362 samples, 0.01%)</title><rect x="823.3" y="837" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="826.25" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (3,019,965 samples, 0.02%)</title><rect x="498.3" y="837" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="501.28" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (10,638,094 samples, 0.05%)</title><rect x="162.7" y="565" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="165.66" y="575.5" ></text>
</g>
<g >
<title>__check_object_size (3,783,168 samples, 0.02%)</title><rect x="236.8" y="837" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="239.84" y="847.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::function&lt;void  (29,259,890 samples, 0.15%)</title><rect x="1187.3" y="1269" width="1.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.33" y="1279.5" ></text>
</g>
<g >
<title>inet_getname (27,307,691 samples, 0.14%)</title><rect x="223.5" y="853" width="1.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="226.55" y="863.5" ></text>
</g>
<g >
<title>llist_add_batch (8,741,983 samples, 0.05%)</title><rect x="471.9" y="501" width="0.5" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="474.91" y="511.5" ></text>
</g>
<g >
<title>apparmor_file_permission (10,273,572 samples, 0.05%)</title><rect x="441.0" y="693" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="443.97" y="703.5" ></text>
</g>
<g >
<title>sk_stream_kill_queues (7,973,474 samples, 0.04%)</title><rect x="970.7" y="805" width="0.5" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="973.69" y="815.5" ></text>
</g>
<g >
<title>kmalloc_reserve (11,514,757 samples, 0.06%)</title><rect x="813.5" y="741" width="0.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="816.54" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;webserver::TcpConnection*,  (1,971,264 samples, 0.01%)</title><rect x="927.7" y="1013" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="930.74" y="1023.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;bool  (2,928,873 samples, 0.02%)</title><rect x="244.1" y="933" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="247.09" y="943.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,026,257 samples, 0.01%)</title><rect x="900.2" y="981" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="903.22" y="991.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (92,600,048 samples, 0.48%)</title><rect x="849.0" y="1093" width="5.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="852.01" y="1103.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2,855,509 samples, 0.01%)</title><rect x="118.1" y="613" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="121.10" y="623.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (7,967,689 samples, 0.04%)</title><rect x="158.5" y="565" width="0.5" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="161.49" y="575.5" ></text>
</g>
<g >
<title>tcp_push (2,337,462,838 samples, 12.03%)</title><rect x="665.8" y="773" width="142.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="668.79" y="783.5" >tcp_push</text>
</g>
<g >
<title>sk_reset_timer (33,835,427 samples, 0.17%)</title><rect x="185.6" y="789" width="2.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="188.64" y="799.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (7,737,181 samples, 0.04%)</title><rect x="10.9" y="1189" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="13.89" y="1199.5" ></text>
</g>
<g >
<title>webserver::Poller*&amp; std::__get_helper&lt;0ul, webserver::Poller*, webserver::Channel*&gt; (5,417,935 samples, 0.03%)</title><rect x="1054.1" y="965" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1057.06" y="975.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::handleRead (1,917,626 samples, 0.01%)</title><rect x="859.3" y="1157" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="862.32" y="1167.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::lower_bound (56,689,936 samples, 0.29%)</title><rect x="865.1" y="1269" width="3.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="868.09" y="1279.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,555,573,145 samples, 8.01%)</title><rect x="925.8" y="1093" width="94.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="928.85" y="1103.5" >std::_Sp_co..</text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (3,968,819 samples, 0.02%)</title><rect x="582.4" y="901" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="585.40" y="911.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_head (2,012,992 samples, 0.01%)</title><rect x="1016.4" y="933" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1019.38" y="943.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,917,134 samples, 0.01%)</title><rect x="418.7" y="885" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="421.69" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (59,576,041 samples, 0.31%)</title><rect x="579.7" y="949" width="3.6" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="582.66" y="959.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (41,517,086 samples, 0.21%)</title><rect x="82.5" y="949" width="2.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="85.52" y="959.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::setHeaderValue (222,423,624 samples, 1.15%)</title><rect x="547.2" y="949" width="13.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="550.21" y="959.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::__normal_iterator (7,054,886 samples, 0.04%)</title><rect x="870.0" y="1253" width="0.4" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="872.99" y="1263.5" ></text>
</g>
<g >
<title>do_epoll_wait (1,951,869 samples, 0.01%)</title><rect x="34.5" y="1237" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="37.52" y="1247.5" ></text>
</g>
<g >
<title>tcp_v4_reqsk_destructor (5,981,679 samples, 0.03%)</title><rect x="280.8" y="981" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="283.82" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (4,951,453 samples, 0.03%)</title><rect x="610.9" y="917" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="613.85" y="927.5" ></text>
</g>
<g >
<title>boost::any::~any (18,950,549 samples, 0.10%)</title><rect x="1006.0" y="1013" width="1.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1009.03" y="1023.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (161,468,769 samples, 0.83%)</title><rect x="114.0" y="725" width="9.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="116.98" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (9,176,977 samples, 0.05%)</title><rect x="585.7" y="965" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="588.67" y="975.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (4,818,519 samples, 0.02%)</title><rect x="143.8" y="421" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="146.75" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;void,  (8,943,966 samples, 0.05%)</title><rect x="42.5" y="1269" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="45.53" y="1279.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_get_Tp_allocator (4,802,775 samples, 0.02%)</title><rect x="214.1" y="917" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="217.12" y="927.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;char&gt; (1,984,791 samples, 0.01%)</title><rect x="212.7" y="885" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="215.65" y="895.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1,930,505 samples, 0.01%)</title><rect x="263.6" y="981" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="266.58" y="991.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (25,991,146 samples, 0.13%)</title><rect x="711.3" y="341" width="1.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="714.33" y="351.5" ></text>
</g>
<g >
<title>srso_alias_return_thunk (1,922,362 samples, 0.01%)</title><rect x="1130.1" y="485" width="0.1" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1133.08" y="495.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (7,853,991 samples, 0.04%)</title><rect x="733.2" y="37" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="736.20" y="47.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInLoopThread (4,876,235 samples, 0.03%)</title><rect x="920.4" y="837" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="923.35" y="847.5" ></text>
</g>
<g >
<title>security_d_instantiate (29,482,909 samples, 0.15%)</title><rect x="324.1" y="949" width="1.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="327.10" y="959.5" ></text>
</g>
<g >
<title>__rcu_read_lock (1,787,729 samples, 0.01%)</title><rect x="476.1" y="597" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="479.08" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (4,819,525 samples, 0.02%)</title><rect x="921.0" y="821" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="924.00" y="831.5" ></text>
</g>
<g >
<title>raw_local_deliver (15,406,610 samples, 0.08%)</title><rect x="1109.8" y="581" width="0.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1112.81" y="591.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInLoopThread (2,883,234 samples, 0.01%)</title><rect x="526.2" y="981" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="529.16" y="991.5" ></text>
</g>
<g >
<title>mod_objcg_state (3,948,870 samples, 0.02%)</title><rect x="302.9" y="901" width="0.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="305.86" y="911.5" ></text>
</g>
<g >
<title>operator new (1,788,450 samples, 0.01%)</title><rect x="167.0" y="517" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="170.03" y="527.5" ></text>
</g>
<g >
<title>kmalloc_reserve (1,928,317 samples, 0.01%)</title><rect x="1171.5" y="981" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1174.45" y="991.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (7,734,093 samples, 0.04%)</title><rect x="157.8" y="533" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="160.78" y="543.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,896,555 samples, 0.01%)</title><rect x="1063.0" y="837" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1066.01" y="847.5" ></text>
</g>
<g >
<title>__sk_dst_check (6,782,841 samples, 0.03%)</title><rect x="1095.1" y="901" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1098.12" y="911.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (3,024,840 samples, 0.02%)</title><rect x="656.8" y="773" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="659.81" y="783.5" ></text>
</g>
<g >
<title>__do_softirq (872,311,005 samples, 4.49%)</title><rect x="1102.6" y="757" width="53.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1105.58" y="767.5" >__do_..</text>
</g>
<g >
<title>_raw_spin_unlock_bh (6,962,395 samples, 0.04%)</title><rect x="657.0" y="773" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="659.99" y="783.5" ></text>
</g>
<g >
<title>select_task_rq (42,034,768 samples, 0.22%)</title><rect x="1134.0" y="405" width="2.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1137.04" y="415.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (1,885,218 samples, 0.01%)</title><rect x="454.1" y="597" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="457.05" y="607.5" ></text>
</g>
<g >
<title>char* std::__uninitialized_default_n&lt;char*, unsigned long&gt; (34,901,106 samples, 0.18%)</title><rect x="210.7" y="901" width="2.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="213.65" y="911.5" ></text>
</g>
<g >
<title>memcg_list_lru_alloc (38,470,227 samples, 0.20%)</title><rect x="300.5" y="901" width="2.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="303.52" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (2,029,528 samples, 0.01%)</title><rect x="588.2" y="965" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="591.25" y="975.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::_M_ptr (1,965,704 samples, 0.01%)</title><rect x="1023.5" y="1093" width="0.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1026.49" y="1103.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (11,694,340 samples, 0.06%)</title><rect x="500.0" y="837" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="502.97" y="847.5" ></text>
</g>
<g >
<title>hook_file_alloc_security (7,902,727 samples, 0.04%)</title><rect x="309.8" y="933" width="0.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="312.77" y="943.5" ></text>
</g>
<g >
<title>webserver::Channel*&amp; std::_Mu&lt;webserver::Channel*, false, false&gt;::operator (2,394,902 samples, 0.01%)</title><rect x="1054.7" y="981" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1057.74" y="991.5" ></text>
</g>
<g >
<title>__cond_resched (7,807,778 samples, 0.04%)</title><rect x="451.2" y="661" width="0.5" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="454.19" y="671.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (1,997,005 samples, 0.01%)</title><rect x="607.4" y="869" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="610.43" y="879.5" ></text>
</g>
<g >
<title>std::default_delete&lt;webserver::Channel&gt;&amp; std::__get_helper&lt;1ul, std::default_delete&lt;webserver::Channel&gt;&gt; (9,851,976 samples, 0.05%)</title><rect x="1015.9" y="949" width="0.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1018.90" y="959.5" ></text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.2.5 (3,908,916 samples, 0.02%)</title><rect x="431.1" y="869" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="434.07" y="879.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (13,428,524 samples, 0.07%)</title><rect x="1138.2" y="373" width="0.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1141.16" y="383.5" ></text>
</g>
<g >
<title>operator new (4,040,936 samples, 0.02%)</title><rect x="516.8" y="869" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="519.77" y="879.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (3,866,070 samples, 0.02%)</title><rect x="109.5" y="837" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="112.49" y="847.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp;&amp; std::forward&lt;webserver::ConnBuffer*&gt; (1,988,697 samples, 0.01%)</title><rect x="405.2" y="997" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="408.20" y="1007.5" ></text>
</g>
<g >
<title> (3,791,578 samples, 0.02%)</title><rect x="1056.1" y="1093" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1059.15" y="1103.5" ></text>
</g>
<g >
<title>__build_skb_around (2,597,016 samples, 0.01%)</title><rect x="813.0" y="741" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="815.95" y="751.5" ></text>
</g>
<g >
<title>__memcg_slab_free_hook (16,661,221 samples, 0.09%)</title><rect x="939.2" y="837" width="1.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="942.17" y="847.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl::_Vector_impl (3,928,121 samples, 0.02%)</title><rect x="38.1" y="1269" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="41.12" y="1279.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (1,882,199 samples, 0.01%)</title><rect x="607.9" y="933" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="610.91" y="943.5" ></text>
</g>
<g >
<title>mod_timer (42,953,277 samples, 0.22%)</title><rect x="1121.1" y="485" width="2.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1124.15" y="495.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (13,385,375,352 samples, 68.92%)</title><rect x="48.0" y="1189" width="813.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="51.01" y="1199.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>__ep_remove (2,913,909 samples, 0.02%)</title><rect x="1030.1" y="869" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1033.08" y="879.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::setHeaderValue (179,201,086 samples, 0.92%)</title><rect x="495.3" y="901" width="10.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="498.29" y="911.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core.constprop.0 (7,664,261 samples, 0.04%)</title><rect x="1107.0" y="645" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1109.97" y="655.5" ></text>
</g>
<g >
<title>std::_Function_base::_Function_base (1,951,132 samples, 0.01%)</title><rect x="202.6" y="917" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="205.64" y="927.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (2,861,952 samples, 0.01%)</title><rect x="580.6" y="869" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="583.65" y="879.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,066,842,134 samples, 5.49%)</title><rect x="106.5" y="965" width="64.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="109.50" y="975.5" >std::fu..</text>
</g>
<g >
<title>pty_write (11,638,741 samples, 0.06%)</title><rect x="477.9" y="661" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="480.86" y="671.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (14,722,376 samples, 0.08%)</title><rect x="86.6" y="933" width="0.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="89.61" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,025,597 samples, 0.01%)</title><rect x="101.0" y="917" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="103.97" y="927.5" ></text>
</g>
<g >
<title>webserver::http::trim (11,358,633 samples, 0.06%)</title><rect x="560.7" y="949" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="563.73" y="959.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="1061" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1023.36" y="1071.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (13,578,100 samples, 0.07%)</title><rect x="129.3" y="725" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="132.33" y="735.5" ></text>
</g>
<g >
<title>sk_leave_memory_pressure (3,193,633 samples, 0.02%)</title><rect x="772.0" y="261" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="775.04" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::lower_bound (1,942,479 samples, 0.01%)</title><rect x="863.7" y="1269" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="866.65" y="1279.5" ></text>
</g>
<g >
<title>minmax_running_min (3,951,414 samples, 0.02%)</title><rect x="647.6" y="693" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="650.56" y="703.5" ></text>
</g>
<g >
<title>std::operator!= (1,932,560 samples, 0.01%)</title><rect x="1069.7" y="917" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1072.73" y="927.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::findCRLF (2,567,676 samples, 0.01%)</title><rect x="525.1" y="981" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="528.13" y="991.5" ></text>
</g>
<g >
<title>_int_free (1,990,946 samples, 0.01%)</title><rect x="118.9" y="629" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="121.88" y="639.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (5,864,546 samples, 0.03%)</title><rect x="593.2" y="901" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="596.17" y="911.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;webserver::TcpConnection&gt;::weak_ptr (2,012,186 samples, 0.01%)</title><rect x="193.2" y="949" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="196.21" y="959.5" ></text>
</g>
<g >
<title> (4,873,240 samples, 0.03%)</title><rect x="36.9" y="1285" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="39.86" y="1295.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2,910,653 samples, 0.01%)</title><rect x="585.5" y="965" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="588.50" y="975.5" ></text>
</g>
<g >
<title>mutex_lock (2,011,125 samples, 0.01%)</title><rect x="32.9" y="1173" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="35.93" y="1183.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (2,023,631 samples, 0.01%)</title><rect x="900.3" y="997" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="903.34" y="1007.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (1,927,864 samples, 0.01%)</title><rect x="644.0" y="613" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="646.99" y="623.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;webserver::TcpConnection&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::find (67,144,796 samples, 0.35%)</title><rect x="916.3" y="837" width="4.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="919.27" y="847.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;3ul, std::_Placeholder&lt;3&gt; &gt;::_M_head (2,896,992 samples, 0.01%)</title><rect x="840.2" y="997" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="843.20" y="1007.5" ></text>
</g>
<g >
<title>propagate_protected_usage (1,951,823 samples, 0.01%)</title><rect x="382.0" y="789" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="384.97" y="799.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_M_deallocate (8,864,521 samples, 0.05%)</title><rect x="39.1" y="1269" width="0.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="42.13" y="1279.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,906,598 samples, 0.03%)</title><rect x="201.3" y="949" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="204.35" y="959.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~_Tuple_impl (7,804,775 samples, 0.04%)</title><rect x="906.6" y="885" width="0.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="909.58" y="895.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,011,992 samples, 0.01%)</title><rect x="437.9" y="741" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="440.91" y="751.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::_Placeholder&lt;1&gt;, true&gt;::_M_head (1,814,801 samples, 0.01%)</title><rect x="924.1" y="1013" width="0.1" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="927.11" y="1023.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (2,968,115 samples, 0.02%)</title><rect x="163.8" y="565" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="166.78" y="575.5" ></text>
</g>
<g >
<title>aa_inet_msg_perm (8,796,993 samples, 0.05%)</title><rect x="822.3" y="789" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="825.26" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,976,276 samples, 0.01%)</title><rect x="426.6" y="901" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="429.57" y="911.5" ></text>
</g>
<g >
<title>set_task_cpu (7,694,028 samples, 0.04%)</title><rect x="755.3" y="181" width="0.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="758.28" y="191.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,825,741 samples, 0.02%)</title><rect x="583.0" y="933" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="586.04" y="943.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (30,638,523 samples, 0.16%)</title><rect x="1008.3" y="997" width="1.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1011.25" y="1007.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2,010,338 samples, 0.01%)</title><rect x="539.9" y="853" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="542.94" y="863.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (2,021,909 samples, 0.01%)</title><rect x="217.8" y="917" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="220.78" y="927.5" ></text>
</g>
<g >
<title>_IO_putc (6,806,234 samples, 0.04%)</title><rect x="431.9" y="885" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="434.92" y="895.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpConnection*&gt;::_Tuple_impl&lt;webserver::TcpConnection*&gt; (1,921,424 samples, 0.01%)</title><rect x="847.1" y="1061" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="850.05" y="1071.5" ></text>
</g>
<g >
<title>kmalloc_reserve (1,928,633 samples, 0.01%)</title><rect x="737.8" y="261" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="740.76" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_S_relocate (33,289,295 samples, 0.17%)</title><rect x="876.1" y="1253" width="2.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="879.06" y="1263.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (12,765,747 samples, 0.07%)</title><rect x="550.6" y="901" width="0.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="553.61" y="911.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (2,003,776 samples, 0.01%)</title><rect x="229.5" y="933" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="232.52" y="943.5" ></text>
</g>
<g >
<title>__alloc_pages_noprof (3,925,880 samples, 0.02%)</title><rect x="148.0" y="453" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="150.96" y="463.5" ></text>
</g>
<g >
<title>file_init_path (14,708,464 samples, 0.08%)</title><rect x="326.3" y="965" width="0.9" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="329.31" y="975.5" ></text>
</g>
<g >
<title>__mod_memcg_state (2,039,785 samples, 0.01%)</title><rect x="940.1" y="773" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="943.05" y="783.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt; (3,981,696 samples, 0.02%)</title><rect x="217.5" y="885" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="220.48" y="895.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (1,800,657 samples, 0.01%)</title><rect x="603.3" y="885" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="606.29" y="895.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runInLoop (496,691,211 samples, 2.56%)</title><rect x="1025.3" y="1093" width="30.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1028.31" y="1103.5" >we..</text>
</g>
<g >
<title>kmalloc_reserve (20,349,891 samples, 0.10%)</title><rect x="1087.3" y="965" width="1.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1090.28" y="975.5" ></text>
</g>
<g >
<title>_copy_to_iter (29,266,112 samples, 0.15%)</title><rect x="374.9" y="869" width="1.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="377.87" y="879.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (9,530,898 samples, 0.05%)</title><rect x="206.5" y="917" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="209.46" y="927.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::lower_bound (20,717,964 samples, 0.11%)</title><rect x="606.5" y="933" width="1.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="609.53" y="943.5" ></text>
</g>
<g >
<title>locks_remove_file (2,914,579 samples, 0.02%)</title><rect x="999.1" y="917" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1002.06" y="927.5" ></text>
</g>
<g >
<title>__check_object_size (2,981,838 samples, 0.02%)</title><rect x="661.8" y="773" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="664.76" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2,944,185 samples, 0.02%)</title><rect x="119.3" y="661" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="122.30" y="671.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (4,651,387 samples, 0.02%)</title><rect x="229.2" y="933" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="232.17" y="943.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Poller*, webserver::Channel*&gt;::_Tuple_impl&lt;webserver::Poller*, webserver::Channel*&amp;, void&gt; (3,005,371 samples, 0.02%)</title><rect x="128.4" y="725" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="131.37" y="735.5" ></text>
</g>
<g >
<title>tty_write_room (8,842,279 samples, 0.05%)</title><rect x="477.3" y="645" width="0.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="480.33" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Poller*, webserver::Channel*&gt;::_M_head (1,974,580 samples, 0.01%)</title><rect x="169.2" y="629" width="0.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="172.22" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_begin (2,758,688 samples, 0.01%)</title><rect x="1062.1" y="917" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1065.08" y="927.5" ></text>
</g>
<g >
<title>__memcg_slab_free_hook (10,535,964 samples, 0.05%)</title><rect x="271.0" y="949" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="274.04" y="959.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::now (7,722,284 samples, 0.04%)</title><rect x="506.3" y="901" width="0.5" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="509.30" y="911.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1237" width="0.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="13.89" y="1247.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;webserver::Channel*&gt;::allocate (10,743,528 samples, 0.06%)</title><rect x="872.6" y="1237" width="0.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="875.57" y="1247.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (5,971,949 samples, 0.03%)</title><rect x="548.3" y="901" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="551.28" y="911.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (2,010,049 samples, 0.01%)</title><rect x="909.8" y="933" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="912.81" y="943.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_lru_noprof (76,136,337 samples, 0.39%)</title><rect x="317.9" y="933" width="4.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="320.86" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,163,740 samples, 0.01%)</title><rect x="359.5" y="933" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="362.49" y="943.5" ></text>
</g>
<g >
<title>__d_instantiate (3,825,216 samples, 0.02%)</title><rect x="307.7" y="965" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="310.69" y="975.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpConnection*&gt;::tuple&lt;webserver::TcpConnection*, true, true&gt; (9,923,141 samples, 0.05%)</title><rect x="191.2" y="933" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="194.17" y="943.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (1,935,234 samples, 0.01%)</title><rect x="110.1" y="837" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="113.14" y="847.5" ></text>
</g>
<g >
<title>__alloc_pages_noprof (3,957,212 samples, 0.02%)</title><rect x="296.8" y="869" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="299.80" y="879.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (889,635,710 samples, 4.58%)</title><rect x="431.4" y="901" width="54.0" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="434.38" y="911.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3,853,605 samples, 0.02%)</title><rect x="585.3" y="949" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="588.26" y="959.5" ></text>
</g>
<g >
<title>tick_nohz_handler (1,946,370 samples, 0.01%)</title><rect x="270.1" y="885" width="0.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="273.15" y="895.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (15,061,434 samples, 0.08%)</title><rect x="564.7" y="933" width="0.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="567.68" y="943.5" ></text>
</g>
<g >
<title>sock_alloc (7,939,469 samples, 0.04%)</title><rect x="334.6" y="1013" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="337.55" y="1023.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt;::_M_head (3,972,644 samples, 0.02%)</title><rect x="130.5" y="709" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="133.45" y="719.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::swap (47,363,141 samples, 0.24%)</title><rect x="570.8" y="965" width="2.9" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="573.77" y="975.5" ></text>
</g>
<g >
<title>webserver::Socket::shutDownWrite (1,790,564,390 samples, 9.22%)</title><rect x="1072.5" y="1141" width="108.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1075.47" y="1151.5" >webserver::So..</text>
</g>
<g >
<title>__raw_spin_lock_irqsave (1,907,657 samples, 0.01%)</title><rect x="991.6" y="693" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="994.61" y="703.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (7,259,033 samples, 0.04%)</title><rect x="116.7" y="613" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="119.66" y="623.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (50,167,022 samples, 0.26%)</title><rect x="548.6" y="933" width="3.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="551.64" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (38,922,893 samples, 0.20%)</title><rect x="101.8" y="965" width="2.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="104.82" y="975.5" ></text>
</g>
<g >
<title>do_readv (785,185,367 samples, 4.04%)</title><rect x="347.9" y="1045" width="47.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="350.94" y="1055.5" >do_r..</text>
</g>
<g >
<title>webserver::HttpParser::~HttpParser (10,953,123 samples, 0.06%)</title><rect x="120.7" y="677" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="123.67" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_erase_aux (24,583,067 samples, 0.13%)</title><rect x="913.0" y="805" width="1.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="915.98" y="815.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (3,910,535 samples, 0.02%)</title><rect x="181.1" y="837" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="184.14" y="847.5" ></text>
</g>
<g >
<title>hook_inode_free_security_rcu (2,004,481 samples, 0.01%)</title><rect x="784.2" y="453" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="787.17" y="463.5" ></text>
</g>
<g >
<title>webserver::Logger::~Logger (13,669,087 samples, 0.07%)</title><rect x="339.7" y="1125" width="0.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="342.71" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_mbegin (1,961,899 samples, 0.01%)</title><rect x="121.2" y="597" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="124.21" y="607.5" ></text>
</g>
<g >
<title>__mod_memcg_state (8,827,529 samples, 0.05%)</title><rect x="643.6" y="629" width="0.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="646.57" y="639.5" ></text>
</g>
<g >
<title>std::operator== (3,973,851 samples, 0.02%)</title><rect x="160.3" y="581" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="163.34" y="591.5" ></text>
</g>
<g >
<title>wq_select_unbound_cpu (7,079,727 samples, 0.04%)</title><rect x="474.3" y="565" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="477.28" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::erase (129,799,446 samples, 0.67%)</title><rect x="1062.0" y="933" width="7.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1064.96" y="943.5" ></text>
</g>
<g >
<title>bool boost::typeindex::operator==&lt;boost::typeindex::stl_type_index, std::type_info&gt; (2,933,845 samples, 0.02%)</title><rect x="408.3" y="981" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="411.35" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_drop_node (21,397,013 samples, 0.11%)</title><rect x="913.2" y="789" width="1.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="916.16" y="799.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,821,547 samples, 0.01%)</title><rect x="54.0" y="1109" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="57.00" y="1119.5" ></text>
</g>
<g >
<title>apparmor_sock_graft (4,723,344 samples, 0.02%)</title><rect x="261.8" y="965" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="264.81" y="975.5" ></text>
</g>
<g >
<title>webserver::Socket::accept (6,848,976 samples, 0.04%)</title><rect x="338.4" y="1141" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="341.43" y="1151.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::tuple (18,309,702 samples, 0.09%)</title><rect x="907.5" y="933" width="1.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="910.47" y="943.5" ></text>
</g>
<g >
<title>tcp_ack (18,436,244 samples, 0.09%)</title><rect x="739.4" y="309" width="1.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="742.36" y="319.5" ></text>
</g>
<g >
<title>timer_shutdown_sync (1,899,238 samples, 0.01%)</title><rect x="711.2" y="325" width="0.1" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="714.22" y="335.5" ></text>
</g>
<g >
<title>_int_free (2,952,897 samples, 0.02%)</title><rect x="605.2" y="901" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="608.17" y="911.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::HttpServer*, false&gt;::_M_head (1,905,756 samples, 0.01%)</title><rect x="124.6" y="677" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="127.62" y="687.5" ></text>
</g>
<g >
<title>__close (1,252,811,945 samples, 6.45%)</title><rect x="929.3" y="1013" width="76.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="932.34" y="1023.5" >__close</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8,788,575 samples, 0.05%)</title><rect x="205.2" y="901" width="0.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="208.23" y="911.5" ></text>
</g>
<g >
<title>ip_skb_dst_mtu (3,730,648 samples, 0.02%)</title><rect x="791.9" y="613" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="794.92" y="623.5" ></text>
</g>
<g >
<title>void std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (8,710,922 samples, 0.04%)</title><rect x="596.7" y="885" width="0.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="599.70" y="895.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="1109" width="0.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1023.36" y="1119.5" ></text>
</g>
<g >
<title> (13,743,167 samples, 0.07%)</title><rect x="602.6" y="933" width="0.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="605.56" y="943.5" ></text>
</g>
<g >
<title>webserver::Acceptor*&amp; std::forward&lt;webserver::Acceptor*&amp;&gt; (2,917,001 samples, 0.02%)</title><rect x="860.8" y="1173" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="863.82" y="1183.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (1,792,342 samples, 0.01%)</title><rect x="524.8" y="981" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="527.79" y="991.5" ></text>
</g>
<g >
<title>__sk_dst_check (3,044,892 samples, 0.02%)</title><rect x="793.4" y="693" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="796.44" y="703.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (12,457,426 samples, 0.06%)</title><rect x="1010.6" y="981" width="0.7" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1013.58" y="991.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__not_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__not_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;, char const*&gt; &gt; &gt;::value, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (20,833,812 samples, 0.11%)</title><rect x="494.0" y="869" width="1.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="497.02" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (19,741,987 samples, 0.10%)</title><rect x="914.8" y="805" width="1.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="917.77" y="815.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (3,923,364 samples, 0.02%)</title><rect x="362.9" y="933" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="365.94" y="943.5" ></text>
</g>
<g >
<title>n_tty_write (498,487,492 samples, 2.57%)</title><rect x="449.0" y="677" width="30.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="452.00" y="687.5" >n_..</text>
</g>
<g >
<title>void std::_Bind&lt;void  (465,311,340 samples, 2.40%)</title><rect x="896.5" y="1077" width="28.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="899.54" y="1087.5" >v..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_Rb_tree_iterator (1,957,457 samples, 0.01%)</title><rect x="920.1" y="805" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="923.06" y="815.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::deallocate (6,832,419 samples, 0.04%)</title><rect x="914.0" y="757" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="916.98" y="767.5" ></text>
</g>
<g >
<title>tcp_data_queue (47,466,459 samples, 0.24%)</title><rect x="650.8" y="725" width="2.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="653.76" y="735.5" ></text>
</g>
<g >
<title>__strlen_avx2 (2,000,056 samples, 0.01%)</title><rect x="612.0" y="917" width="0.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="614.97" y="927.5" ></text>
</g>
<g >
<title>webserver::TcpServer::removeConnection (347,510,746 samples, 1.79%)</title><rect x="901.5" y="1013" width="21.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="904.53" y="1023.5" ></text>
</g>
<g >
<title>cubictcp_cwnd_event (2,861,457 samples, 0.01%)</title><rect x="795.5" y="725" width="0.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="798.47" y="735.5" ></text>
</g>
<g >
<title>operator delete (2,860,314 samples, 0.01%)</title><rect x="1023.9" y="1029" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1026.91" y="1039.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (4,838,957 samples, 0.02%)</title><rect x="248.4" y="933" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="251.38" y="943.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,860,781 samples, 0.01%)</title><rect x="578.8" y="949" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="581.83" y="959.5" ></text>
</g>
<g >
<title>__tzfile_compute (4,772,864 samples, 0.02%)</title><rect x="515.8" y="869" width="0.3" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="518.82" y="879.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (3,978,802 samples, 0.02%)</title><rect x="852.9" y="1045" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="855.92" y="1055.5" ></text>
</g>
<g >
<title>__GI___getsockname (163,872,022 samples, 0.84%)</title><rect x="219.7" y="949" width="9.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="222.68" y="959.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (1,825,488,411 samples, 9.40%)</title><rect x="680.8" y="581" width="110.9" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="683.79" y="591.5" >__dev_queue_x..</text>
</g>
<g >
<title>x64_sys_call (2,898,578 samples, 0.01%)</title><rect x="1178.3" y="1093" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1181.27" y="1103.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl::~_Vector_impl (2,916,584 samples, 0.02%)</title><rect x="38.9" y="1285" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="41.89" y="1295.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_node (15,728,423 samples, 0.08%)</title><rect x="556.1" y="853" width="1.0" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="559.13" y="863.5" ></text>
</g>
<g >
<title>do_softirq.part.0 (883,113,770 samples, 4.55%)</title><rect x="1102.0" y="773" width="53.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1104.98" y="783.5" >do_so..</text>
</g>
<g >
<title>malloc (6,569,264 samples, 0.03%)</title><rect x="206.6" y="837" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="209.64" y="847.5" ></text>
</g>
<g >
<title>inode_wait_for_writeback (18,270,198 samples, 0.09%)</title><rect x="952.1" y="821" width="1.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="955.07" y="831.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::resolveMethod (22,484,306 samples, 0.12%)</title><rect x="564.6" y="949" width="1.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="567.56" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; (37,679,619 samples, 0.19%)</title><rect x="96.5" y="917" width="2.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="99.48" y="927.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runInLoop (226,457,698 samples, 1.17%)</title><rect x="908.7" y="997" width="13.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="911.70" y="1007.5" ></text>
</g>
<g >
<title>testProgram (19,422,460,801 samples, 100.00%)</title><rect x="10.0" y="1397" width="1180.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.00" y="1407.5" >testProgram</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; __gnu_cxx::__ops::__iter_equals_val&lt;char const&gt; (1,921,318 samples, 0.01%)</title><rect x="545.0" y="933" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="547.95" y="943.5" ></text>
</g>
<g >
<title>__sock_release (574,852,191 samples, 2.96%)</title><rect x="963.4" y="885" width="34.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="966.36" y="895.5" >__..</text>
</g>
<g >
<title>__raw_spin_lock_irqsave (2,021,702 samples, 0.01%)</title><rect x="1129.5" y="389" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1132.50" y="399.5" ></text>
</g>
<g >
<title>tcp_do_parse_auth_options (2,835,316 samples, 0.01%)</title><rect x="1115.9" y="549" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1118.90" y="559.5" ></text>
</g>
<g >
<title>__refill_stock (6,475,562 samples, 0.03%)</title><rect x="304.8" y="853" width="0.4" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="307.76" y="863.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9,855,757 samples, 0.05%)</title><rect x="36.2" y="1301" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="39.20" y="1311.5" ></text>
</g>
<g >
<title>webserver::MutexLockGuard::~MutexLockGuard (2,894,571 samples, 0.01%)</title><rect x="836.9" y="949" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="839.90" y="959.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::hasWritten (1,920,535 samples, 0.01%)</title><rect x="846.3" y="1109" width="0.1" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="849.29" y="1119.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (11,683,902 samples, 0.06%)</title><rect x="1186.5" y="1253" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1189.51" y="1263.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (2,999,328 samples, 0.02%)</title><rect x="1130.8" y="501" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1133.79" y="511.5" ></text>
</g>
<g >
<title>skb_clone_tx_timestamp (3,037,853 samples, 0.02%)</title><rect x="1158.4" y="773" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1161.37" y="783.5" ></text>
</g>
<g >
<title>malloc (5,786,409 samples, 0.03%)</title><rect x="556.7" y="805" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="559.74" y="815.5" ></text>
</g>
<g >
<title>apparmor_socket_accept (12,770,678 samples, 0.07%)</title><rect x="259.6" y="997" width="0.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="262.57" y="1007.5" ></text>
</g>
<g >
<title>dentry_free (35,645,494 samples, 0.18%)</title><rect x="938.1" y="869" width="2.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="941.11" y="879.5" ></text>
</g>
<g >
<title>webserver::HttpParser::~HttpParser (11,265,373 samples, 0.06%)</title><rect x="1006.3" y="965" width="0.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1009.32" y="975.5" ></text>
</g>
<g >
<title>consume_obj_stock (1,855,855 samples, 0.01%)</title><rect x="151.6" y="469" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="154.61" y="479.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (1,346,369,545 samples, 6.93%)</title><rect x="694.2" y="389" width="81.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="697.25" y="399.5" >ip_local_..</text>
</g>
<g >
<title>srso_alias_safe_ret (4,789,422 samples, 0.02%)</title><rect x="335.0" y="1013" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="338.04" y="1023.5" ></text>
</g>
<g >
<title>__memset (2,983,883 samples, 0.02%)</title><rect x="311.1" y="917" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="314.13" y="927.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (50,846,524 samples, 0.26%)</title><rect x="1136.9" y="405" width="3.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1139.89" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_ptr (1,935,856 samples, 0.01%)</title><rect x="92.2" y="885" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="95.24" y="895.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,983,291 samples, 0.01%)</title><rect x="53.5" y="1125" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="56.53" y="1135.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::readableBytes (1,948,884 samples, 0.01%)</title><rect x="405.3" y="997" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="408.32" y="1007.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (5,905,666 samples, 0.03%)</title><rect x="175.3" y="933" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="178.29" y="943.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (8,863,551 samples, 0.05%)</title><rect x="847.7" y="1093" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="850.65" y="1103.5" ></text>
</g>
<g >
<title>malloc (3,037,340 samples, 0.02%)</title><rect x="495.0" y="805" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="497.98" y="815.5" ></text>
</g>
<g >
<title>mod_memcg_state (2,897,153 samples, 0.01%)</title><rect x="959.7" y="837" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="962.66" y="847.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,951,055 samples, 0.01%)</title><rect x="1039.5" y="821" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1042.54" y="831.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::tuple&lt;true, true&gt; (2,968,425 samples, 0.02%)</title><rect x="200.5" y="933" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="203.54" y="943.5" ></text>
</g>
<g >
<title>__put_user_nocheck_4 (20,827,402 samples, 0.11%)</title><rect x="258.0" y="997" width="1.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="261.00" y="1007.5" ></text>
</g>
<g >
<title>apparmor_file_permission (4,895,363 samples, 0.03%)</title><rect x="440.6" y="709" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="443.61" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (12,773,335 samples, 0.07%)</title><rect x="853.6" y="1045" width="0.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="856.58" y="1055.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (1,986,972 samples, 0.01%)</title><rect x="838.1" y="1013" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="841.09" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::begin (2,926,294 samples, 0.02%)</title><rect x="1063.4" y="901" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1066.42" y="911.5" ></text>
</g>
<g >
<title>memcpy@plt (1,977,114 samples, 0.01%)</title><rect x="601.6" y="949" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="604.55" y="959.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;webserver::TcpConnection*,  (4,854,751 samples, 0.02%)</title><rect x="102.5" y="917" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="105.46" y="927.5" ></text>
</g>
<g >
<title>__fput_sync (1,113,070,512 samples, 5.73%)</title><rect x="933.4" y="933" width="67.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="936.40" y="943.5" >__fput_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_lower_bound (53,500,709 samples, 0.28%)</title><rect x="1048.9" y="901" width="3.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1051.91" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (5,036,217 samples, 0.03%)</title><rect x="421.8" y="869" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="424.81" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (2,976,056 samples, 0.02%)</title><rect x="503.7" y="789" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="506.65" y="799.5" ></text>
</g>
<g >
<title>sock_setsockopt (120,451,675 samples, 0.62%)</title><rect x="181.0" y="853" width="7.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="183.97" y="863.5" ></text>
</g>
<g >
<title>int&amp;&amp; std::forward&lt;int&gt; (4,980,512 samples, 0.03%)</title><rect x="52.8" y="1125" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="55.80" y="1135.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;::_Tuple_impl&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*, webserver::TimeStamp, void&gt; (13,463,846 samples, 0.07%)</title><rect x="400.3" y="1013" width="0.8" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="403.32" y="1023.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (2,000,406 samples, 0.01%)</title><rect x="547.9" y="933" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="550.85" y="943.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::Acceptor*, false&gt;::_M_head (2,009,721 samples, 0.01%)</title><rect x="859.7" y="1125" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="862.74" y="1135.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_skmem (75,987,642 samples, 0.39%)</title><rect x="377.7" y="885" width="4.6" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="380.71" y="895.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::setPath (37,550,254 samples, 0.19%)</title><rect x="566.2" y="949" width="2.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="569.23" y="959.5" ></text>
</g>
<g >
<title>__mod_timer (17,582,646 samples, 0.09%)</title><rect x="1166.9" y="869" width="1.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1169.92" y="879.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2,923,644 samples, 0.02%)</title><rect x="492.5" y="901" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="495.48" y="911.5" ></text>
</g>
<g >
<title>__inet_accept (4,813,572 samples, 0.02%)</title><rect x="257.7" y="997" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="260.71" y="1007.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (3,031,549 samples, 0.02%)</title><rect x="1096.2" y="885" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1099.22" y="895.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (7,869,802 samples, 0.04%)</title><rect x="189.7" y="933" width="0.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="192.71" y="943.5" ></text>
</g>
<g >
<title>webserver::Channel::getPollState (6,907,558 samples, 0.04%)</title><rect x="1053.3" y="933" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1056.28" y="943.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; std::forward_as_tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (3,829,873 samples, 0.02%)</title><rect x="113.5" y="741" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="116.51" y="751.5" ></text>
</g>
<g >
<title>begin_current_label_crit_section (4,815,094 samples, 0.02%)</title><rect x="1176.2" y="981" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1179.17" y="991.5" ></text>
</g>
<g >
<title>inode_has_buffers (5,966,488 samples, 0.03%)</title><rect x="951.2" y="805" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="954.18" y="815.5" ></text>
</g>
<g >
<title>webserver::Channel::getPollState (1,835,289 samples, 0.01%)</title><rect x="1070.3" y="949" width="0.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1073.31" y="959.5" ></text>
</g>
<g >
<title>kmem_cache_free (9,799,880 samples, 0.05%)</title><rect x="961.5" y="885" width="0.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="964.53" y="895.5" ></text>
</g>
<g >
<title>__sk_mem_reduce_allocated (1,987,279 samples, 0.01%)</title><rect x="647.3" y="693" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="650.26" y="703.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (5,918,698 samples, 0.03%)</title><rect x="228.1" y="853" width="0.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="231.10" y="863.5" ></text>
</g>
<g >
<title>pty_write (6,369,415 samples, 0.03%)</title><rect x="1180.8" y="837" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1183.80" y="847.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, webserver::TimeStamp&amp;&amp;&gt;::_Tuple_impl&lt;webserver::TimeStamp&gt; (3,862,281 samples, 0.02%)</title><rect x="400.5" y="981" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="403.49" y="991.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runInLoop (2,884,635 samples, 0.01%)</title><rect x="900.5" y="1013" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="903.47" y="1023.5" ></text>
</g>
<g >
<title>epoll_ctl (305,841,894 samples, 1.57%)</title><rect x="1027.8" y="949" width="18.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1030.84" y="959.5" ></text>
</g>
<g >
<title>page_counter_try_charge (12,682,218 samples, 0.07%)</title><rect x="819.8" y="709" width="0.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="822.76" y="719.5" ></text>
</g>
<g >
<title>sock_poll (106,079,388 samples, 0.55%)</title><rect x="139.9" y="501" width="6.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="142.94" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (1,013,481,379 samples, 5.22%)</title><rect x="108.8" y="869" width="61.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="111.79" y="879.5" >std::_..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Poller*, webserver::Channel*&gt;::_Tuple_impl&lt;webserver::Poller*, webserver::Channel*&amp;, void&gt; (2,966,343 samples, 0.02%)</title><rect x="1023.1" y="1045" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1026.07" y="1055.5" ></text>
</g>
<g >
<title>tcp_v4_destroy_sock (112,723,577 samples, 0.58%)</title><rect x="973.5" y="805" width="6.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="976.46" y="815.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,998,979 samples, 0.02%)</title><rect x="979.4" y="789" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="982.41" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_drop_node (12,591,956 samples, 0.06%)</title><rect x="1062.7" y="885" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1065.65" y="895.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (7,680,957 samples, 0.04%)</title><rect x="895.0" y="1109" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="897.96" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_mbegin (2,968,839 samples, 0.02%)</title><rect x="91.8" y="933" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="94.82" y="943.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3,882,855 samples, 0.02%)</title><rect x="565.9" y="933" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="568.93" y="943.5" ></text>
</g>
<g >
<title>sk_setsockopt (4,960,631 samples, 0.03%)</title><rect x="180.7" y="853" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="183.67" y="863.5" ></text>
</g>
<g >
<title>void std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (22,585,706 samples, 0.12%)</title><rect x="503.0" y="805" width="1.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="506.00" y="815.5" ></text>
</g>
<g >
<title>tzset_internal (1,986,240 samples, 0.01%)</title><rect x="517.8" y="885" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="520.76" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (45,928,237 samples, 0.24%)</title><rect x="556.0" y="869" width="2.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="559.01" y="879.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,832,788 samples, 0.01%)</title><rect x="82.7" y="917" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="85.70" y="927.5" ></text>
</g>
<g >
<title>n_tty_write (9,772,824 samples, 0.05%)</title><rect x="339.9" y="885" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="342.89" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (59,608,529 samples, 0.31%)</title><rect x="500.9" y="853" width="3.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="503.92" y="863.5" ></text>
</g>
<g >
<title>tcp_skb_entail (12,626,750 samples, 0.07%)</title><rect x="811.5" y="773" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="814.53" y="783.5" ></text>
</g>
<g >
<title>ipv4_mtu (5,776,513 samples, 0.03%)</title><rect x="1173.5" y="965" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1176.49" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_right (1,938,514 samples, 0.01%)</title><rect x="92.8" y="933" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="95.78" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (3,931,641 samples, 0.02%)</title><rect x="903.9" y="885" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="906.89" y="895.5" ></text>
</g>
<g >
<title>malloc (1,882,401 samples, 0.01%)</title><rect x="517.3" y="853" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="520.29" y="863.5" ></text>
</g>
<g >
<title>obj_cgroup_uncharge_pages (3,056,039 samples, 0.02%)</title><rect x="940.0" y="805" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="942.99" y="815.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (18,590,112 samples, 0.10%)</title><rect x="410.5" y="981" width="1.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="413.52" y="991.5" ></text>
</g>
<g >
<title>boost::any::~any (22,593,499 samples, 0.12%)</title><rect x="117.7" y="677" width="1.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="120.69" y="687.5" ></text>
</g>
<g >
<title>_raw_spin_trylock (1,761,913 samples, 0.01%)</title><rect x="955.6" y="885" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="958.64" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (8,730,717 samples, 0.04%)</title><rect x="423.2" y="869" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="426.19" y="879.5" ></text>
</g>
<g >
<title>sk_reset_timer (1,940,087 samples, 0.01%)</title><rect x="796.9" y="725" width="0.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="799.91" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::vector (11,851,982 samples, 0.06%)</title><rect x="218.4" y="949" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="221.36" y="959.5" ></text>
</g>
<g >
<title>security_socket_getpeername (21,265,560 samples, 0.11%)</title><rect x="237.5" y="853" width="1.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="240.49" y="863.5" ></text>
</g>
<g >
<title>__printf_buffer_write (17,127,290 samples, 0.09%)</title><rect x="511.8" y="837" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="514.78" y="847.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::get (2,924,877 samples, 0.02%)</title><rect x="1055.7" y="1125" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1058.73" y="1135.5" ></text>
</g>
<g >
<title>mutex_lock (4,889,093 samples, 0.03%)</title><rect x="457.1" y="645" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="460.14" y="655.5" ></text>
</g>
<g >
<title>webserver::Channel* const&amp; std::__get_helper&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (1,936,336 samples, 0.01%)</title><rect x="1072.3" y="1061" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1075.29" y="1071.5" ></text>
</g>
<g >
<title>_int_free (2,869,105 samples, 0.01%)</title><rect x="419.5" y="885" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="422.50" y="895.5" ></text>
</g>
<g >
<title>select_task_rq_fair (2,967,253 samples, 0.02%)</title><rect x="1136.6" y="405" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1139.59" y="415.5" ></text>
</g>
<g >
<title>webserver::Channel::update (1,979,011 samples, 0.01%)</title><rect x="1071.1" y="1141" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1074.14" y="1151.5" ></text>
</g>
<g >
<title>std::tuple&lt;&gt; std::forward_as_tuple&lt;&gt; (1,964,552 samples, 0.01%)</title><rect x="910.1" y="917" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="913.05" y="927.5" ></text>
</g>
<g >
<title>tcp_write_xmit (1,343,511,562 samples, 6.92%)</title><rect x="1089.8" y="965" width="81.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1092.83" y="975.5" >tcp_write..</text>
</g>
<g >
<title>std::tuple&lt;webserver::Poller*, webserver::Channel*&gt;::tuple&lt;webserver::Poller*, webserver::Channel*&amp;, true&gt; (4,983,014 samples, 0.03%)</title><rect x="1023.1" y="1061" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1026.07" y="1071.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1,970,734 samples, 0.01%)</title><rect x="622.8" y="821" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="625.85" y="831.5" ></text>
</g>
<g >
<title>webserver::EventLoop::hasChannel (42,840,573 samples, 0.22%)</title><rect x="1056.0" y="1125" width="2.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1058.97" y="1135.5" ></text>
</g>
<g >
<title> (2,061,551 samples, 0.01%)</title><rect x="899.6" y="997" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="902.61" y="1007.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (4,989,494 samples, 0.03%)</title><rect x="476.2" y="597" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="479.18" y="607.5" ></text>
</g>
<g >
<title>ip_rcv_core (2,996,840 samples, 0.02%)</title><rect x="778.7" y="421" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="781.72" y="431.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (8,623,595 samples, 0.04%)</title><rect x="618.6" y="901" width="0.6" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="621.63" y="911.5" ></text>
</g>
<g >
<title>cubictcp_acked (5,712,124 samples, 0.03%)</title><rect x="637.0" y="709" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="640.02" y="719.5" ></text>
</g>
<g >
<title>malloc (1,960,784 samples, 0.01%)</title><rect x="117.2" y="645" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="120.16" y="655.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (4,882,542 samples, 0.03%)</title><rect x="1021.5" y="1077" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1024.50" y="1087.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (2,944,966 samples, 0.02%)</title><rect x="214.4" y="917" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="217.41" y="927.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (11,552,930 samples, 0.06%)</title><rect x="240.0" y="933" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="242.99" y="943.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (1,926,620 samples, 0.01%)</title><rect x="576.1" y="885" width="0.1" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="579.10" y="895.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (156,811,616 samples, 0.81%)</title><rect x="1060.9" y="981" width="9.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1063.90" y="991.5" ></text>
</g>
<g >
<title>void std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; (22,136,170 samples, 0.11%)</title><rect x="97.4" y="901" width="1.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="100.42" y="911.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,860,032 samples, 0.01%)</title><rect x="505.3" y="869" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="508.28" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (3,950,630 samples, 0.02%)</title><rect x="597.9" y="949" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="600.88" y="959.5" ></text>
</g>
<g >
<title>page_counter_cancel (1,870,468 samples, 0.01%)</title><rect x="276.4" y="885" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="279.40" y="895.5" ></text>
</g>
<g >
<title>x64_sys_call (1,346,919,365 samples, 6.93%)</title><rect x="254.2" y="1061" width="81.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="257.15" y="1071.5" >x64_sys_c..</text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (2,858,790 samples, 0.01%)</title><rect x="205.6" y="869" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="208.59" y="879.5" ></text>
</g>
<g >
<title>__memcg_slab_free_hook (45,187,125 samples, 0.23%)</title><rect x="1034.5" y="821" width="2.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1037.52" y="831.5" ></text>
</g>
<g >
<title>malloc (2,980,818 samples, 0.02%)</title><rect x="1059.8" y="1045" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1062.81" y="1055.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::_Tuple_impl (18,309,702 samples, 0.09%)</title><rect x="907.5" y="917" width="1.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="910.47" y="927.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,947,979 samples, 0.01%)</title><rect x="806.1" y="693" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="809.13" y="703.5" ></text>
</g>
<g >
<title>std::function&lt;void  (51,073,295 samples, 0.26%)</title><rect x="201.8" y="949" width="3.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="204.77" y="959.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (4,841,166 samples, 0.02%)</title><rect x="1150.6" y="613" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1153.65" y="623.5" ></text>
</g>
<g >
<title>security_sk_free (60,463,274 samples, 0.31%)</title><rect x="992.0" y="773" width="3.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="995.00" y="783.5" ></text>
</g>
<g >
<title>std::function&lt;void  (7,747,355 samples, 0.04%)</title><rect x="851.7" y="1061" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="854.74" y="1071.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;webserver::Channel*, void&gt;::value, webserver::Channel**&gt;::type std::__relocate_a_1&lt;webserver::Channel*, webserver::Channel*&gt; (12,711,893 samples, 0.07%)</title><rect x="876.9" y="1221" width="0.8" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="879.91" y="1231.5" ></text>
</g>
<g >
<title>inet_sk_rx_dst_set (1,948,293 samples, 0.01%)</title><rect x="714.3" y="325" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="717.28" y="335.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::clone (11,406,316 samples, 0.06%)</title><rect x="122.4" y="629" width="0.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="125.38" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_Rb_tree_iterator (2,859,837 samples, 0.01%)</title><rect x="919.9" y="789" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="922.89" y="799.5" ></text>
</g>
<g >
<title>tcp_recvmsg (480,566,715 samples, 2.47%)</title><rect x="358.0" y="949" width="29.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="360.96" y="959.5" >tc..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (70,280,468 samples, 0.36%)</title><rect x="90.9" y="949" width="4.2" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="93.86" y="959.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt;::end (4,878,819 samples, 0.03%)</title><rect x="173.0" y="965" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="175.97" y="975.5" ></text>
</g>
<g >
<title>std::enable_if&lt; (28,006,526 samples, 0.14%)</title><rect x="837.7" y="1029" width="1.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="840.73" y="1039.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (14,850,333 samples, 0.08%)</title><rect x="471.0" y="501" width="0.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="474.01" y="511.5" ></text>
</g>
<g >
<title>page_counter_cancel (1,884,739 samples, 0.01%)</title><rect x="315.7" y="821" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="318.73" y="831.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (4,197,365 samples, 0.02%)</title><rect x="35.2" y="1285" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="38.18" y="1295.5" ></text>
</g>
<g >
<title>tcp_mstamp_refresh (7,957,087 samples, 0.04%)</title><rect x="772.6" y="309" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="775.65" y="319.5" ></text>
</g>
<g >
<title>std::function&lt;void  (18,541,180 samples, 0.10%)</title><rect x="207.7" y="933" width="1.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="210.68" y="943.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (7,279,873,625 samples, 37.48%)</title><rect x="398.7" y="1077" width="442.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="401.74" y="1087.5" >void std::__invoke_impl&lt;void, std::_Bind&lt;void </text>
</g>
<g >
<title>__ip_local_out (3,921,737 samples, 0.02%)</title><rect x="727.0" y="197" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="730.02" y="207.5" ></text>
</g>
<g >
<title>webserver::Poller*&amp; std::__get_helper&lt;0ul, webserver::Poller*, webserver::Channel*&gt; (3,926,540 samples, 0.02%)</title><rect x="1070.7" y="981" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1073.66" y="991.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (3,906,441 samples, 0.02%)</title><rect x="340.2" y="837" width="0.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="343.24" y="847.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (9,905,510 samples, 0.05%)</title><rect x="1140.2" y="469" width="0.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1143.16" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::_M_valptr (2,814,938 samples, 0.01%)</title><rect x="913.5" y="757" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="916.46" y="767.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,970,264 samples, 0.02%)</title><rect x="627.4" y="789" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="630.44" y="799.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (33,826,511 samples, 0.17%)</title><rect x="303.1" y="901" width="2.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="306.10" y="911.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,910,060 samples, 0.01%)</title><rect x="1078.5" y="997" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1081.55" y="1007.5" ></text>
</g>
<g >
<title>_int_free (2,848,320 samples, 0.01%)</title><rect x="130.0" y="677" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="132.98" y="687.5" ></text>
</g>
<g >
<title>loopback_xmit (40,022,189 samples, 0.21%)</title><rect x="1155.9" y="773" width="2.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1158.94" y="783.5" ></text>
</g>
<g >
<title>void  (1,964,186 samples, 0.01%)</title><rect x="840.4" y="1029" width="0.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="843.43" y="1039.5" ></text>
</g>
<g >
<title>skb_rbtree_purge (1,893,036 samples, 0.01%)</title><rect x="1127.4" y="517" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1130.41" y="527.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~tuple (5,762,610 samples, 0.03%)</title><rect x="902.2" y="981" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="905.18" y="991.5" ></text>
</g>
<g >
<title>char* std::__relocate_a&lt;char*, char*, std::allocator&lt;char&gt; &gt; (7,865,912 samples, 0.04%)</title><rect x="216.6" y="901" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="219.55" y="911.5" ></text>
</g>
<g >
<title>select_idle_cpu (5,032,896 samples, 0.03%)</title><rect x="754.9" y="133" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="757.85" y="143.5" ></text>
</g>
<g >
<title>void std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_M_realloc_insert&lt;webserver::Channel* const&amp;&gt; (150,310,108 samples, 0.77%)</title><rect x="870.4" y="1269" width="9.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="873.42" y="1279.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (4,986,388 samples, 0.03%)</title><rect x="698.8" y="357" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="701.76" y="367.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (20,233,803 samples, 0.10%)</title><rect x="1013.6" y="885" width="1.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1016.60" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_M_move_data (2,878,286 samples, 0.01%)</title><rect x="572.8" y="917" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="575.77" y="927.5" ></text>
</g>
<g >
<title>operator new (2,824,953 samples, 0.01%)</title><rect x="247.9" y="869" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="250.91" y="879.5" ></text>
</g>
<g >
<title>ip_output (153,163,165 samples, 0.79%)</title><rect x="727.3" y="197" width="9.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="730.26" y="207.5" ></text>
</g>
<g >
<title>__cond_resched (1,852,672 samples, 0.01%)</title><rect x="629.9" y="757" width="0.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="632.95" y="767.5" ></text>
</g>
<g >
<title>tcp_check_space (9,994,601 samples, 0.05%)</title><rect x="1116.7" y="549" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1119.72" y="559.5" ></text>
</g>
<g >
<title>_itoa_word (2,005,624 samples, 0.01%)</title><rect x="601.0" y="917" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="604.02" y="927.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp;&amp; std::forward&lt;webserver::ConnBuffer*&gt; (2,927,264 samples, 0.02%)</title><rect x="841.5" y="1109" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="844.55" y="1119.5" ></text>
</g>
<g >
<title>native_sched_clock (1,995,282 samples, 0.01%)</title><rect x="1139.7" y="341" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1142.68" y="351.5" ></text>
</g>
<g >
<title>pty_write (3,906,441 samples, 0.02%)</title><rect x="340.2" y="853" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="343.24" y="863.5" ></text>
</g>
<g >
<title>x64_sys_call (10,781,732 samples, 0.06%)</title><rect x="339.8" y="997" width="0.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="342.83" y="1007.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,965,734 samples, 0.02%)</title><rect x="336.2" y="1093" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="339.22" y="1103.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; std::forward_as_tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (3,959,056 samples, 0.02%)</title><rect x="896.3" y="1077" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="899.30" y="1087.5" ></text>
</g>
<g >
<title>__memset (1,675,316 samples, 0.01%)</title><rect x="143.4" y="453" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="146.36" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::max_size (14,808,457 samples, 0.08%)</title><rect x="874.7" y="1237" width="0.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="877.71" y="1247.5" ></text>
</g>
<g >
<title>__napi_poll (1,541,701,213 samples, 7.94%)</title><rect x="686.4" y="485" width="93.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="689.42" y="495.5" >__napi_poll</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (6,848,076 samples, 0.04%)</title><rect x="424.9" y="885" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="427.91" y="895.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::HttpRequest (8,541,106 samples, 0.04%)</title><rect x="570.3" y="965" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="573.26" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (3,743,194 samples, 0.02%)</title><rect x="519.5" y="917" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="522.48" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,886,069 samples, 0.03%)</title><rect x="831.1" y="869" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="834.12" y="879.5" ></text>
</g>
<g >
<title>ip_output (1,067,895,650 samples, 5.50%)</title><rect x="1096.5" y="885" width="64.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1099.53" y="895.5" >ip_output</text>
</g>
<g >
<title>__virt_addr_valid (4,021,446 samples, 0.02%)</title><rect x="445.9" y="629" width="0.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="448.92" y="639.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::TcpConnection*&gt; &gt;::type&amp; std::get&lt;0ul, webserver::TcpConnection*&gt; (4,901,793 samples, 0.03%)</title><rect x="859.9" y="1173" width="0.3" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="862.86" y="1183.5" ></text>
</g>
<g >
<title>_int_free (11,769,273 samples, 0.06%)</title><rect x="83.5" y="885" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="86.46" y="895.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1,992,571 samples, 0.01%)</title><rect x="518.4" y="869" width="0.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="521.36" y="879.5" ></text>
</g>
<g >
<title>__tcp_cleanup_rbuf (23,484,702 samples, 0.12%)</title><rect x="383.3" y="901" width="1.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="386.32" y="911.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;webserver::Channel*&gt;::deallocate (6,983,718 samples, 0.04%)</title><rect x="39.2" y="1253" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="42.24" y="1263.5" ></text>
</g>
<g >
<title>drain_stock (34,253,469 samples, 0.18%)</title><rect x="644.8" y="613" width="2.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="647.82" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_S_max_size (9,807,301 samples, 0.05%)</title><rect x="875.0" y="1221" width="0.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="877.95" y="1231.5" ></text>
</g>
<g >
<title>down_read (13,317,758 samples, 0.07%)</title><rect x="447.7" y="677" width="0.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="450.74" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (8,863,551 samples, 0.05%)</title><rect x="847.7" y="1077" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="850.65" y="1087.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (10,734,714 samples, 0.06%)</title><rect x="830.1" y="917" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="833.05" y="927.5" ></text>
</g>
<g >
<title>mem_cgroup_charge_skmem (84,089,376 samples, 0.43%)</title><rect x="272.2" y="965" width="5.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="275.22" y="975.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (12,443,810 samples, 0.06%)</title><rect x="243.3" y="917" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="246.27" y="927.5" ></text>
</g>
<g >
<title>ip_rcv (727,809,447 samples, 3.75%)</title><rect x="1107.5" y="645" width="44.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1110.54" y="655.5" >ip_rcv</text>
</g>
<g >
<title>webserver::TcpConnection::isConnected (6,862,853 samples, 0.04%)</title><rect x="901.0" y="1013" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="904.05" y="1023.5" ></text>
</g>
<g >
<title>security_inode_alloc (3,009,210 samples, 0.02%)</title><rect x="294.6" y="949" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="297.56" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (1,813,141 samples, 0.01%)</title><rect x="582.9" y="917" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="585.87" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_Alloc_node::_Alloc_node (2,037,642 samples, 0.01%)</title><rect x="161.6" y="581" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="164.65" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4,948,306 samples, 0.03%)</title><rect x="546.7" y="933" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="549.67" y="943.5" ></text>
</g>
<g >
<title>__x64_sys_readv (789,058,332 samples, 4.06%)</title><rect x="347.8" y="1061" width="48.0" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="350.81" y="1071.5" >__x6..</text>
</g>
<g >
<title>ep_item_poll.isra.0 (110,061,495 samples, 0.57%)</title><rect x="139.8" y="517" width="6.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="142.82" y="527.5" ></text>
</g>
<g >
<title>aa_inet_opt_perm (3,778,461 samples, 0.02%)</title><rect x="180.4" y="821" width="0.2" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="183.38" y="831.5" ></text>
</g>
<g >
<title>webserver::MutexLock::lock (1,971,598 samples, 0.01%)</title><rect x="1189.2" y="1269" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.17" y="1279.5" ></text>
</g>
<g >
<title>raw_v4_input (6,687,671 samples, 0.03%)</title><rect x="1110.3" y="565" width="0.4" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1113.34" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,890,782 samples, 0.01%)</title><rect x="787.5" y="485" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="790.53" y="495.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,851,323 samples, 0.01%)</title><rect x="789.7" y="549" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="792.66" y="559.5" ></text>
</g>
<g >
<title>add_wait_queue (3,895,763 samples, 0.02%)</title><rect x="142.9" y="469" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="145.88" y="479.5" ></text>
</g>
<g >
<title>__queue_work.part.0 (4,445,472 samples, 0.02%)</title><rect x="1180.9" y="773" width="0.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1183.92" y="783.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_ptr (4,087,556 samples, 0.02%)</title><rect x="199.8" y="917" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="202.83" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (19,281,176 samples, 0.10%)</title><rect x="1008.9" y="949" width="1.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1011.94" y="959.5" ></text>
</g>
<g >
<title>std::function&lt;void  (219,789,797 samples, 1.13%)</title><rect x="908.9" y="981" width="13.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="911.93" y="991.5" ></text>
</g>
<g >
<title>ip_send_unicast_reply (5,637,712 samples, 0.03%)</title><rect x="774.6" y="325" width="0.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="777.58" y="335.5" ></text>
</g>
<g >
<title>security_file_permission (34,457,429 samples, 0.18%)</title><rect x="392.8" y="997" width="2.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="395.77" y="1007.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::type&amp; std::get&lt;1ul, webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; (1,938,757 samples, 0.01%)</title><rect x="921.8" y="885" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="924.77" y="895.5" ></text>
</g>
<g >
<title>woken_wake_function (196,898,363 samples, 1.01%)</title><rect x="747.9" y="229" width="12.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="750.94" y="239.5" ></text>
</g>
<g >
<title>webserver::Channel::getPollState (2,982,484 samples, 0.02%)</title><rect x="153.7" y="629" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="156.73" y="639.5" ></text>
</g>
<g >
<title>ip_finish_output2 (2,011,971 samples, 0.01%)</title><rect x="1161.1" y="853" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1164.10" y="863.5" ></text>
</g>
<g >
<title>alloc_empty_file (131,428,092 samples, 0.68%)</title><rect x="308.1" y="965" width="8.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="311.09" y="975.5" ></text>
</g>
<g >
<title>boost::any::any (2,020,455 samples, 0.01%)</title><rect x="71.4" y="981" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="74.37" y="991.5" ></text>
</g>
<g >
<title>page_counter_cancel (3,008,900 samples, 0.02%)</title><rect x="769.7" y="165" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="772.75" y="175.5" ></text>
</g>
<g >
<title>memcpy@plt (1,970,617 samples, 0.01%)</title><rect x="77.4" y="965" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="80.35" y="975.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_allocate (14,612,990 samples, 0.08%)</title><rect x="213.1" y="917" width="0.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="216.06" y="927.5" ></text>
</g>
<g >
<title>release_sock (4,870,891 samples, 0.03%)</title><rect x="183.7" y="821" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="186.69" y="831.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (3,027,821 samples, 0.02%)</title><rect x="1139.4" y="389" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1142.44" y="399.5" ></text>
</g>
<g >
<title>wake_up_bit (8,818,686 samples, 0.05%)</title><rect x="954.2" y="821" width="0.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="957.20" y="831.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2,976,251 samples, 0.02%)</title><rect x="52.6" y="1125" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="55.62" y="1135.5" ></text>
</g>
<g >
<title>__memset (7,754,855 samples, 0.04%)</title><rect x="291.6" y="917" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="294.63" y="927.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,971,264 samples, 0.01%)</title><rect x="927.7" y="997" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="930.74" y="1007.5" ></text>
</g>
<g >
<title>operator new (3,037,340 samples, 0.02%)</title><rect x="495.0" y="821" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="497.98" y="831.5" ></text>
</g>
<g >
<title>fsnotify_destroy_marks (19,470,961 samples, 0.10%)</title><rect x="946.5" y="773" width="1.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="949.49" y="783.5" ></text>
</g>
<g >
<title>__tcp_select_window (3,988,080 samples, 0.02%)</title><rect x="673.0" y="709" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="675.96" y="719.5" ></text>
</g>
<g >
<title>_int_free (6,037,481 samples, 0.03%)</title><rect x="1018.6" y="917" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1021.59" y="927.5" ></text>
</g>
<g >
<title>__x64_sys_shutdown (18,606,970 samples, 0.10%)</title><rect x="1073.4" y="1077" width="1.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1076.37" y="1087.5" ></text>
</g>
<g >
<title>skb_clone (14,643,947 samples, 0.08%)</title><rect x="1162.3" y="933" width="0.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1165.34" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (10,324,504 samples, 0.05%)</title><rect x="496.1" y="853" width="0.6" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="499.12" y="863.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (5,848,838 samples, 0.03%)</title><rect x="247.8" y="933" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="250.84" y="943.5" ></text>
</g>
<g >
<title>inet_csk_accept (248,172,479 samples, 1.28%)</title><rect x="263.9" y="981" width="15.0" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="266.87" y="991.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;webserver::TcpConnection&gt;::~enable_shared_from_this (6,857,050 samples, 0.04%)</title><rect x="1007.7" y="1013" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1010.72" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator++ (5,656,805 samples, 0.03%)</title><rect x="602.2" y="949" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="605.22" y="959.5" ></text>
</g>
<g >
<title>__GI___getpeername (6,925,603 samples, 0.04%)</title><rect x="175.3" y="949" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="178.29" y="959.5" ></text>
</g>
<g >
<title>malloc (5,879,740 samples, 0.03%)</title><rect x="197.7" y="901" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="200.72" y="911.5" ></text>
</g>
<g >
<title>mem_cgroup_sk_free (3,665,333 samples, 0.02%)</title><rect x="991.8" y="773" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="994.78" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (3,922,789 samples, 0.02%)</title><rect x="911.1" y="853" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="914.12" y="863.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (6,546,428 samples, 0.03%)</title><rect x="198.1" y="917" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="201.08" y="927.5" ></text>
</g>
<g >
<title>ip_local_deliver (1,693,665 samples, 0.01%)</title><rect x="1107.4" y="645" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1110.44" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&amp; std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (1,986,419 samples, 0.01%)</title><rect x="504.0" y="789" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="507.01" y="799.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,011,743 samples, 0.01%)</title><rect x="981.0" y="837" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="983.97" y="847.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,894,657 samples, 0.01%)</title><rect x="980.6" y="837" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="983.62" y="847.5" ></text>
</g>
<g >
<title>boost::any::type (2,846,835 samples, 0.01%)</title><rect x="409.1" y="981" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="412.12" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator++ (4,811,570 samples, 0.02%)</title><rect x="1063.9" y="901" width="0.3" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1066.90" y="911.5" ></text>
</g>
<g >
<title>pty_write (315,671,300 samples, 1.63%)</title><rect x="457.4" y="645" width="19.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="460.43" y="655.5" ></text>
</g>
<g >
<title>fd_install (2,994,076 samples, 0.02%)</title><rect x="335.3" y="1029" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="338.33" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1285" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.89" y="1295.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (4,633,193 samples, 0.02%)</title><rect x="78.6" y="981" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="81.60" y="991.5" ></text>
</g>
<g >
<title>webserver::HttpParser::parseRequestHeader (278,700,711 samples, 1.43%)</title><rect x="544.5" y="965" width="16.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="547.48" y="975.5" ></text>
</g>
<g >
<title>tcp_v4_destroy_sock (1,982,327 samples, 0.01%)</title><rect x="980.5" y="821" width="0.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="983.50" y="831.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::retrieveAll (1,895,578 samples, 0.01%)</title><rect x="543.6" y="949" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="546.57" y="959.5" ></text>
</g>
<g >
<title>kmem_cache_free (30,144,387 samples, 0.16%)</title><rect x="270.3" y="965" width="1.8" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="273.27" y="975.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (14,732,939 samples, 0.08%)</title><rect x="566.3" y="917" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="569.30" y="927.5" ></text>
</g>
<g >
<title>__GI___shutdown (1,755,113,056 samples, 9.04%)</title><rect x="1072.5" y="1125" width="106.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1075.53" y="1135.5" >__GI___shutdown</text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (1,906,950 samples, 0.01%)</title><rect x="402.5" y="1013" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="405.55" y="1023.5" ></text>
</g>
<g >
<title>kfree_skbmem (1,913,263 samples, 0.01%)</title><rect x="647.4" y="693" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="650.44" y="703.5" ></text>
</g>
<g >
<title>__put_user_nocheck_4 (17,913,156 samples, 0.09%)</title><rect x="20.7" y="1189" width="1.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="23.73" y="1199.5" ></text>
</g>
<g >
<title>void  (1,888,065 samples, 0.01%)</title><rect x="402.7" y="1013" width="0.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="405.66" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_key (2,936,819 samples, 0.02%)</title><rect x="92.2" y="917" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="95.18" y="927.5" ></text>
</g>
<g >
<title>page_counter_cancel (1,897,411 samples, 0.01%)</title><rect x="1148.3" y="373" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1151.27" y="383.5" ></text>
</g>
<g >
<title>n_tty_write (4,909,807 samples, 0.03%)</title><rect x="482.1" y="693" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="485.08" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (6,880,785 samples, 0.04%)</title><rect x="125.5" y="789" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="128.45" y="799.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (4,691,141 samples, 0.02%)</title><rect x="197.1" y="933" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="200.13" y="943.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (7,403,491 samples, 0.04%)</title><rect x="801.3" y="597" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="804.30" y="607.5" ></text>
</g>
<g >
<title>call_function_single_prep_ipi (13,883,324 samples, 0.07%)</title><rect x="471.0" y="485" width="0.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="474.01" y="495.5" ></text>
</g>
<g >
<title>import_iovec (14,928,084 samples, 0.08%)</title><rect x="389.7" y="1013" width="0.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="392.74" y="1023.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (11,795,412 samples, 0.06%)</title><rect x="315.1" y="917" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="318.13" y="927.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (2,883,248 samples, 0.01%)</title><rect x="396.1" y="1093" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="399.11" y="1103.5" ></text>
</g>
<g >
<title>operator new (1,978,702 samples, 0.01%)</title><rect x="829.9" y="917" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="832.93" y="927.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (187,745,612 samples, 0.97%)</title><rect x="113.8" y="741" width="11.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="116.81" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (3,868,731 samples, 0.02%)</title><rect x="911.8" y="853" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="914.78" y="863.5" ></text>
</g>
<g >
<title>neigh_hh_output (91,316,011 samples, 0.47%)</title><rect x="730.4" y="133" width="5.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="733.38" y="143.5" ></text>
</g>
<g >
<title>__fdget_pos (2,023,649 samples, 0.01%)</title><rect x="347.8" y="1045" width="0.1" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="350.81" y="1055.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator* (3,003,210 samples, 0.02%)</title><rect x="602.0" y="949" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="604.97" y="959.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp;&amp; std::forward&lt;webserver::ConnBuffer*&gt; (2,922,877 samples, 0.02%)</title><rect x="840.9" y="1061" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="843.85" y="1071.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (1,906,872 samples, 0.01%)</title><rect x="155.6" y="581" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="158.57" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (2,803,761 samples, 0.01%)</title><rect x="580.8" y="917" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="583.82" y="927.5" ></text>
</g>
<g >
<title>std::function&lt;void  (3,041,591 samples, 0.02%)</title><rect x="1187.3" y="1253" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1190.33" y="1263.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (1,986,622 samples, 0.01%)</title><rect x="171.1" y="869" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="174.07" y="879.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,896,049 samples, 0.03%)</title><rect x="205.5" y="885" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="208.47" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (1,987,356 samples, 0.01%)</title><rect x="1057.7" y="1029" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1060.69" y="1039.5" ></text>
</g>
<g >
<title>dentry_unlink_inode (3,001,939 samples, 0.02%)</title><rect x="956.1" y="885" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="959.10" y="895.5" ></text>
</g>
<g >
<title>std::function&lt;void  (10,021,052 samples, 0.05%)</title><rect x="833.9" y="853" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="836.86" y="863.5" ></text>
</g>
<g >
<title>__fdget_pos (2,856,335 samples, 0.01%)</title><rect x="436.9" y="757" width="0.2" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="439.91" y="767.5" ></text>
</g>
<g >
<title>allocate_slab (9,005,412 samples, 0.05%)</title><rect x="296.7" y="885" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="299.74" y="895.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,033,721 samples, 0.01%)</title><rect x="398.1" y="1077" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="401.09" y="1087.5" ></text>
</g>
<g >
<title>__GI___readv (894,377,022 samples, 4.60%)</title><rect x="342.6" y="1125" width="54.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="345.63" y="1135.5" >__GI_..</text>
</g>
<g >
<title>try_charge_memcg (1,915,887 samples, 0.01%)</title><rect x="322.2" y="885" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="325.18" y="895.5" ></text>
</g>
<g >
<title>webserver::HttpServer::onConnect (4,926,315 samples, 0.03%)</title><rect x="922.6" y="1029" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="925.64" y="1039.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__not_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__not_&lt;std::is_convertible&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;, char const*&gt; &gt; &gt;::value, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator=&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (26,733,067 samples, 0.14%)</title><rect x="493.7" y="885" width="1.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="496.66" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (1,936,482 samples, 0.01%)</title><rect x="497.4" y="837" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="500.39" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (6,844,463 samples, 0.04%)</title><rect x="164.1" y="581" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="167.14" y="591.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (7,636,878 samples, 0.04%)</title><rect x="591.3" y="965" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="594.28" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_addr (4,000,110 samples, 0.02%)</title><rect x="867.0" y="1173" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="869.97" y="1183.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_put_node (4,826,483 samples, 0.02%)</title><rect x="613.7" y="901" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="616.69" y="911.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5,770,325 samples, 0.03%)</title><rect x="103.5" y="901" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="106.47" y="911.5" ></text>
</g>
<g >
<title>__release_sock (455,963,924 samples, 2.35%)</title><rect x="629.1" y="773" width="27.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="632.10" y="783.5" >_..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt;::_Tuple_impl (2,061,731 samples, 0.01%)</title><rect x="113.6" y="725" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="116.57" y="735.5" ></text>
</g>
<g >
<title>webserver::sockets::shutDownWrite (5,873,207 samples, 0.03%)</title><rect x="1181.3" y="1141" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1184.25" y="1151.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (88,152,650 samples, 0.45%)</title><rect x="65.9" y="965" width="5.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="68.90" y="975.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (2,494,922 samples, 0.01%)</title><rect x="786.7" y="501" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="789.68" y="511.5" ></text>
</g>
<g >
<title>do_readv (2,867,916 samples, 0.01%)</title><rect x="395.8" y="1061" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="398.75" y="1071.5" ></text>
</g>
<g >
<title>std::function&lt;void  (37,547,649 samples, 0.19%)</title><rect x="244.8" y="949" width="2.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="247.84" y="959.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runInLoop (638,006,483 samples, 3.28%)</title><rect x="130.8" y="773" width="38.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="133.82" y="783.5" >web..</text>
</g>
<g >
<title>__destroy_inode (87,227,416 samples, 0.45%)</title><rect x="945.3" y="805" width="5.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="948.35" y="815.5" ></text>
</g>
<g >
<title>inet_csk_destroy_sock (187,376,152 samples, 0.96%)</title><rect x="969.1" y="821" width="11.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="972.05" y="831.5" ></text>
</g>
<g >
<title>__fdget (10,645,553 samples, 0.05%)</title><rect x="1041.1" y="853" width="0.7" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1044.12" y="863.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (23,503,456 samples, 0.12%)</title><rect x="346.3" y="1077" width="1.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="349.33" y="1087.5" ></text>
</g>
<g >
<title>skb_free_head (5,928,212 samples, 0.03%)</title><rect x="653.2" y="677" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="656.16" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (1,789,270 samples, 0.01%)</title><rect x="824.2" y="949" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="827.23" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (9,530,898 samples, 0.05%)</title><rect x="206.5" y="901" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="209.46" y="911.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::removeChannel (153,875,383 samples, 0.79%)</title><rect x="1061.1" y="965" width="9.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1064.08" y="975.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (1,933,717 samples, 0.01%)</title><rect x="841.8" y="1109" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="844.79" y="1119.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt;::_M_head (2,943,601 samples, 0.02%)</title><rect x="124.1" y="677" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="127.14" y="687.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (10,849,575 samples, 0.06%)</title><rect x="119.8" y="645" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="122.83" y="655.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (11,820,428 samples, 0.06%)</title><rect x="86.8" y="917" width="0.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="89.79" y="927.5" ></text>
</g>
<g >
<title>skb_free_head (3,979,362 samples, 0.02%)</title><rect x="1154.7" y="677" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1157.72" y="687.5" ></text>
</g>
<g >
<title>webserver::Logger::Logger (5,631,327 samples, 0.03%)</title><rect x="339.4" y="1125" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="342.37" y="1135.5" ></text>
</g>
<g >
<title>webserver::Channel* const&amp; std::__get_helper&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (3,928,342 samples, 0.02%)</title><rect x="842.0" y="1045" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="844.96" y="1055.5" ></text>
</g>
<g >
<title>__close (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="1013" width="0.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1023.36" y="1023.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::~_Vector_base (2,993,494 samples, 0.02%)</title><rect x="1017.0" y="997" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1019.98" y="1007.5" ></text>
</g>
<g >
<title>_copy_from_user (1,866,728 samples, 0.01%)</title><rect x="152.7" y="565" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="155.73" y="575.5" ></text>
</g>
<g >
<title>__copy_skb_header (2,018,032 samples, 0.01%)</title><rect x="1162.6" y="917" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1165.58" y="927.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (1,892,783 samples, 0.01%)</title><rect x="1068.0" y="869" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1071.01" y="879.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (1,759,253 samples, 0.01%)</title><rect x="802.1" y="645" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="805.11" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (5,801,079 samples, 0.03%)</title><rect x="429.4" y="901" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="432.45" y="911.5" ></text>
</g>
<g >
<title>___slab_alloc (8,829,421 samples, 0.05%)</title><rect x="147.8" y="501" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="150.84" y="511.5" ></text>
</g>
<g >
<title>file_close_fd (5,913,525 samples, 0.03%)</title><rect x="1001.5" y="933" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1004.47" y="943.5" ></text>
</g>
<g >
<title>detach_if_pending (1,999,219 samples, 0.01%)</title><rect x="802.3" y="645" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="805.27" y="655.5" ></text>
</g>
<g >
<title>read_tsc (9,765,677 samples, 0.05%)</title><rect x="796.3" y="725" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="799.32" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (3,908,739 samples, 0.02%)</title><rect x="397.1" y="1093" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="400.08" y="1103.5" ></text>
</g>
<g >
<title>boost::any::~any (3,954,793 samples, 0.02%)</title><rect x="114.6" y="693" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="117.57" y="703.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::Poller*, false&gt;::_M_head (1,986,007 samples, 0.01%)</title><rect x="169.1" y="629" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="172.10" y="639.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (5,894,301 samples, 0.03%)</title><rect x="202.9" y="901" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="205.93" y="911.5" ></text>
</g>
<g >
<title>std::function&lt;void  (15,585,021 samples, 0.08%)</title><rect x="1059.2" y="1109" width="0.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1062.16" y="1119.5" ></text>
</g>
<g >
<title>webserver::HttpServer::onConnect (141,909,219 samples, 0.73%)</title><rect x="115.0" y="693" width="8.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="118.05" y="703.5" ></text>
</g>
<g >
<title>do_syscall_64 (132,927,472 samples, 0.68%)</title><rect x="231.3" y="917" width="8.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="234.30" y="927.5" ></text>
</g>
<g >
<title>__kfree_skb (11,816,450 samples, 0.06%)</title><rect x="642.3" y="693" width="0.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="645.26" y="703.5" ></text>
</g>
<g >
<title>webserver::Channel::setREvent (5,740,648 samples, 0.03%)</title><rect x="880.3" y="1285" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="883.27" y="1295.5" ></text>
</g>
<g >
<title>int&amp; std::__get_helper&lt;0ul, int&amp;&amp;&gt; (1,913,419 samples, 0.01%)</title><rect x="249.9" y="1013" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="252.85" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1,895,812 samples, 0.01%)</title><rect x="575.1" y="869" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="578.14" y="879.5" ></text>
</g>
<g >
<title>tcp_validate_incoming (2,010,378 samples, 0.01%)</title><rect x="656.7" y="741" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="659.68" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_ptr (5,723,111 samples, 0.03%)</title><rect x="198.9" y="917" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="201.89" y="927.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runPendingFunctions (4,848,816 samples, 0.02%)</title><rect x="1189.7" y="1317" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1192.65" y="1327.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (31,778,397 samples, 0.16%)</title><rect x="580.0" y="933" width="1.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="583.00" y="943.5" ></text>
</g>
<g >
<title>tcp_stream_memory_free (1,920,125 samples, 0.01%)</title><rect x="821.1" y="773" width="0.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="824.11" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (46,765,048 samples, 0.24%)</title><rect x="608.4" y="933" width="2.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="611.37" y="943.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (22,941,696 samples, 0.12%)</title><rect x="245.1" y="917" width="1.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="248.07" y="927.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (4,940,271 samples, 0.03%)</title><rect x="1015.2" y="933" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1018.24" y="943.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (6,497,943 samples, 0.03%)</title><rect x="907.6" y="869" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="910.64" y="879.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,946,370 samples, 0.01%)</title><rect x="270.1" y="901" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="273.15" y="911.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (2,913,701 samples, 0.02%)</title><rect x="300.3" y="901" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="303.28" y="911.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (1,985,497 samples, 0.01%)</title><rect x="942.7" y="837" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="945.70" y="847.5" ></text>
</g>
<g >
<title>operator new (2,858,980 samples, 0.01%)</title><rect x="873.1" y="1221" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="876.05" y="1231.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runInLoop (1,070,893,207 samples, 5.51%)</title><rect x="106.4" y="981" width="65.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="109.37" y="991.5" >webserv..</text>
</g>
<g >
<title>_raw_spin_unlock (2,000,520 samples, 0.01%)</title><rect x="684.7" y="501" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="687.69" y="511.5" ></text>
</g>
<g >
<title>webserver::TcpServer*&amp; std::_Mu&lt;webserver::TcpServer*, false, false&gt;::operator (2,966,809 samples, 0.02%)</title><rect x="250.6" y="1029" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="253.62" y="1039.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (4,806,110 samples, 0.02%)</title><rect x="1178.0" y="1045" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1180.98" y="1055.5" ></text>
</g>
<g >
<title>d_instantiate (54,145,586 samples, 0.28%)</title><rect x="322.7" y="965" width="3.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="325.72" y="975.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (5,951,727 samples, 0.03%)</title><rect x="693.9" y="389" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="696.89" y="399.5" ></text>
</g>
<g >
<title>idr_find (20,341,394 samples, 0.10%)</title><rect x="463.6" y="565" width="1.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="466.57" y="575.5" ></text>
</g>
<g >
<title>__fdget (8,656,881 samples, 0.04%)</title><rect x="19.8" y="1205" width="0.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="22.80" y="1215.5" ></text>
</g>
<g >
<title>ip_rcv_core (15,684,556 samples, 0.08%)</title><rect x="776.2" y="405" width="0.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="779.17" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_begin (3,085,915 samples, 0.02%)</title><rect x="594.8" y="917" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="597.84" y="927.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1,990,606 samples, 0.01%)</title><rect x="823.4" y="917" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="826.43" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt;::_Tuple_impl (2,028,395 samples, 0.01%)</title><rect x="896.8" y="1045" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="899.79" y="1055.5" ></text>
</g>
<g >
<title>webserver::Poller* const&amp; std::__get_helper&lt;0ul, webserver::Poller*, std::default_delete&lt;webserver::Poller&gt; &gt; (3,752,799 samples, 0.02%)</title><rect x="1025.0" y="1045" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1027.96" y="1055.5" ></text>
</g>
<g >
<title>validate_xmit_xfrm (2,961,351 samples, 0.02%)</title><rect x="1160.2" y="773" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1163.21" y="783.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (797,048,237 samples, 4.10%)</title><rect x="435.5" y="821" width="48.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="438.52" y="831.5" >entr..</text>
</g>
<g >
<title>std::function&lt;void  (7,315,732,841 samples, 37.67%)</title><rect x="397.3" y="1125" width="444.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="400.32" y="1135.5" >std::function&lt;void </text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::_M_ptr (1,933,757 samples, 0.01%)</title><rect x="37.0" y="1253" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="40.04" y="1263.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_right (1,948,261 samples, 0.01%)</title><rect x="158.3" y="565" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="161.31" y="575.5" ></text>
</g>
<g >
<title>memset@plt (2,992,611 samples, 0.02%)</title><rect x="155.3" y="613" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="158.33" y="623.5" ></text>
</g>
<g >
<title>rb_insert_color (1,855,492 samples, 0.01%)</title><rect x="1166.3" y="933" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1169.28" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (6,930,187 samples, 0.04%)</title><rect x="760.2" y="245" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="763.21" y="255.5" ></text>
</g>
<g >
<title>tcp_wfree (3,039,500 samples, 0.02%)</title><rect x="789.8" y="549" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="792.83" y="559.5" ></text>
</g>
<g >
<title>tcp_urg (5,876,052 samples, 0.03%)</title><rect x="773.8" y="325" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="776.76" y="335.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (189,657,142 samples, 0.98%)</title><rect x="910.6" y="901" width="11.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="913.59" y="911.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (12,578,025 samples, 0.06%)</title><rect x="93.7" y="901" width="0.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="96.68" y="911.5" ></text>
</g>
<g >
<title>webserver::TimeStamp&amp;&amp; std::forward&lt;webserver::TimeStamp&gt; (2,788,315 samples, 0.01%)</title><rect x="401.0" y="997" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="403.97" y="1007.5" ></text>
</g>
<g >
<title>apparmor_socket_recvmsg (20,681,787 samples, 0.11%)</title><rect x="388.2" y="949" width="1.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="391.18" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (10,683,265 samples, 0.06%)</title><rect x="584.8" y="965" width="0.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="587.85" y="975.5" ></text>
</g>
<g >
<title>tcp_release_cb (1,929,646 samples, 0.01%)</title><rect x="183.9" y="805" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="186.87" y="815.5" ></text>
</g>
<g >
<title>try_charge_memcg (69,633,765 samples, 0.36%)</title><rect x="273.1" y="949" width="4.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="276.10" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (44,021,644 samples, 0.23%)</title><rect x="588.4" y="965" width="2.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="591.37" y="975.5" ></text>
</g>
<g >
<title>webserver::MutexLock::lock (2,990,933 samples, 0.02%)</title><rect x="854.6" y="1093" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="857.64" y="1103.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,816,606 samples, 0.01%)</title><rect x="504.4" y="837" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="507.37" y="847.5" ></text>
</g>
<g >
<title>memset@plt (1,982,005 samples, 0.01%)</title><rect x="512.9" y="837" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="515.88" y="847.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (1,195,315,474 samples, 6.15%)</title><rect x="1091.2" y="949" width="72.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1094.15" y="959.5" >__tcp_tr..</text>
</g>
<g >
<title>__queue_work.part.0 (2,896,717 samples, 0.01%)</title><rect x="340.3" y="789" width="0.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="343.31" y="799.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (13,338,626,489 samples, 68.68%)</title><rect x="49.1" y="1173" width="810.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="52.06" y="1183.5" >std::__invoke_result&lt;void </text>
</g>
<g >
<title>__x64_sys_getsockname (6,794,270 samples, 0.03%)</title><rect x="220.3" y="901" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="223.33" y="911.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (10,766,368 samples, 0.06%)</title><rect x="893.4" y="1125" width="0.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="896.36" y="1135.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;webserver::TcpConnection&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::insert (169,844,213 samples, 0.87%)</title><rect x="89.7" y="981" width="10.4" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="92.75" y="991.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, webserver::Channel*, false&gt;::_Head_base&lt;webserver::Channel*&amp;&gt; (3,009,805 samples, 0.02%)</title><rect x="1058.8" y="1029" width="0.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1061.80" y="1039.5" ></text>
</g>
<g >
<title>skb_release_head_state (2,179,902 samples, 0.01%)</title><rect x="784.0" y="485" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="786.98" y="495.5" ></text>
</g>
<g >
<title>operator delete (8,924,776 samples, 0.05%)</title><rect x="195.9" y="901" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="198.94" y="911.5" ></text>
</g>
<g >
<title>tcp_mstamp_refresh (16,552,974 samples, 0.09%)</title><rect x="653.6" y="725" width="1.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="656.64" y="735.5" ></text>
</g>
<g >
<title>kfree (22,781,572 samples, 0.12%)</title><rect x="994.2" y="757" width="1.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="997.23" y="767.5" ></text>
</g>
<g >
<title>net_rx_action (1,633,530,433 samples, 8.41%)</title><rect x="684.9" y="501" width="99.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="687.87" y="511.5" >net_rx_action</text>
</g>
<g >
<title>__tz_convert (5,803,950 samples, 0.03%)</title><rect x="418.1" y="901" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="421.10" y="911.5" ></text>
</g>
<g >
<title>sock_close (4,761,239 samples, 0.02%)</title><rect x="1000.4" y="917" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1003.37" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_head (2,935,889 samples, 0.02%)</title><rect x="1021.6" y="1045" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1024.62" y="1055.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::deallocate (3,850,851 samples, 0.02%)</title><rect x="1063.0" y="853" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1065.95" y="863.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (11,820,418 samples, 0.06%)</title><rect x="253.3" y="1061" width="0.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="256.31" y="1071.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2,011,065 samples, 0.01%)</title><rect x="500.8" y="853" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="503.80" y="863.5" ></text>
</g>
<g >
<title>operator new (3,015,988 samples, 0.02%)</title><rect x="849.5" y="1077" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="852.49" y="1087.5" ></text>
</g>
<g >
<title>tcp_write_queue_purge (2,026,168 samples, 0.01%)</title><rect x="980.3" y="805" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="983.31" y="815.5" ></text>
</g>
<g >
<title>__inode_wait_for_writeback (12,417,994 samples, 0.06%)</title><rect x="952.2" y="805" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="955.19" y="815.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~tuple (10,675,641 samples, 0.05%)</title><rect x="928.2" y="981" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="931.16" y="991.5" ></text>
</g>
<g >
<title>qdisc_pkt_len_init (2,936,120 samples, 0.02%)</title><rect x="734.9" y="101" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="737.85" y="111.5" ></text>
</g>
<g >
<title>__kfree_skb (36,767,127 samples, 0.19%)</title><rect x="651.3" y="709" width="2.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="654.29" y="719.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::Acceptor*&gt;::_M_head (2,830,341 samples, 0.01%)</title><rect x="859.5" y="1157" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="862.50" y="1167.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::_Tuple_impl&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;, void&gt; (17,648,938 samples, 0.09%)</title><rect x="903.2" y="949" width="1.1" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="906.24" y="959.5" ></text>
</g>
<g >
<title>inet_sock_destruct (17,571,407 samples, 0.09%)</title><rect x="987.6" y="773" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="990.63" y="783.5" ></text>
</g>
<g >
<title>_copy_to_user (2,983,327 samples, 0.02%)</title><rect x="259.3" y="997" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="262.26" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (5,807,098 samples, 0.03%)</title><rect x="607.1" y="869" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="610.07" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_mbegin (1,869,325 samples, 0.01%)</title><rect x="549.3" y="885" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="552.30" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_end (2,993,544 samples, 0.02%)</title><rect x="1048.7" y="901" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1051.73" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header (2,945,464 samples, 0.02%)</title><rect x="120.3" y="613" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="123.31" y="623.5" ></text>
</g>
<g >
<title>tcp_ack_update_window.isra.0 (5,804,618 samples, 0.03%)</title><rect x="639.2" y="709" width="0.4" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="642.21" y="719.5" ></text>
</g>
<g >
<title>sk_setsockopt (100,901,695 samples, 0.52%)</title><rect x="181.6" y="837" width="6.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="184.56" y="847.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (13,599,703 samples, 0.07%)</title><rect x="410.8" y="949" width="0.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="413.82" y="959.5" ></text>
</g>
<g >
<title>tcp_mstamp_refresh (3,875,694 samples, 0.02%)</title><rect x="386.9" y="901" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="389.86" y="911.5" ></text>
</g>
<g >
<title>boost::any::any&lt;webserver::HttpParser&gt; (1,911,218 samples, 0.01%)</title><rect x="114.5" y="693" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="117.46" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (25,731,205 samples, 0.13%)</title><rect x="1049.4" y="885" width="1.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1052.39" y="895.5" ></text>
</g>
<g >
<title>tcp_urg (2,029,270 samples, 0.01%)</title><rect x="773.2" y="309" width="0.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="776.19" y="319.5" ></text>
</g>
<g >
<title>security_file_release (2,002,547 samples, 0.01%)</title><rect x="1000.3" y="917" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1003.25" y="927.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,930,722 samples, 0.01%)</title><rect x="1119.9" y="517" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1122.86" y="527.5" ></text>
</g>
<g >
<title>__sk_mem_reclaim (70,484,127 samples, 0.36%)</title><rect x="643.0" y="693" width="4.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="645.98" y="703.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt; &gt;::type&amp; std::get&lt;1ul, webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt; (3,983,231 samples, 0.02%)</title><rect x="897.4" y="1061" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="900.38" y="1071.5" ></text>
</g>
<g >
<title>webserver::Socket::accept (1,412,040,779 samples, 7.27%)</title><rect x="251.5" y="1125" width="85.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="254.50" y="1135.5" >webserver:..</text>
</g>
<g >
<title>tcp_clean_rtx_queue.constprop.0 (162,712,365 samples, 0.84%)</title><rect x="639.7" y="709" width="9.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="642.69" y="719.5" ></text>
</g>
<g >
<title>refill_stock (4,885,785 samples, 0.03%)</title><rect x="817.6" y="725" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="820.57" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_Vector_impl_data::_Vector_impl_data (2,972,522 samples, 0.02%)</title><rect x="218.8" y="917" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="221.78" y="927.5" ></text>
</g>
<g >
<title>__netif_rx (9,900,036 samples, 0.05%)</title><rect x="784.9" y="549" width="0.7" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="787.95" y="559.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;webserver::HttpParser&gt;::~holder (17,065,620 samples, 0.09%)</title><rect x="1006.1" y="997" width="1.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1009.15" y="1007.5" ></text>
</g>
<g >
<title>webserver::TimeStamp&amp;&amp; std::forward&lt;webserver::TimeStamp&gt; (1,919,268 samples, 0.01%)</title><rect x="841.3" y="1093" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="844.31" y="1103.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (6,051,762 samples, 0.03%)</title><rect x="762.0" y="293" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="765.05" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&amp; std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (2,013,252 samples, 0.01%)</title><rect x="559.8" y="901" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="562.77" y="911.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (10,633,819 samples, 0.05%)</title><rect x="761.2" y="293" width="0.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="764.23" y="303.5" ></text>
</g>
<g >
<title>boost::typeindex::stl_type_index::equal (10,868,427 samples, 0.06%)</title><rect x="526.7" y="933" width="0.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="529.69" y="943.5" ></text>
</g>
<g >
<title>webserver::HttpParser::freshBodyTypeStatus (6,540,681 samples, 0.03%)</title><rect x="544.1" y="965" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="547.09" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::__normal_iterator (2,872,818 samples, 0.01%)</title><rect x="869.1" y="1269" width="0.1" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="872.06" y="1279.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::TcpConnection (1,130,844,496 samples, 5.82%)</title><rect x="174.0" y="981" width="68.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="177.04" y="991.5" >webserv..</text>
</g>
<g >
<title>ldsem_down_read (3,930,349 samples, 0.02%)</title><rect x="482.7" y="677" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="485.68" y="687.5" ></text>
</g>
<g >
<title>inet_csk_destroy_sock (2,829,096 samples, 0.01%)</title><rect x="773.6" y="293" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="776.58" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (7,864,485 samples, 0.04%)</title><rect x="107.3" y="901" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="110.31" y="911.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::toFormattedString[abi:cxx11] (2,864,291 samples, 0.01%)</title><rect x="1180.3" y="1093" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1183.27" y="1103.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (8,392,690 samples, 0.04%)</title><rect x="687.6" y="469" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="690.61" y="479.5" ></text>
</g>
<g >
<title>__virt_addr_valid (14,453,183 samples, 0.07%)</title><rect x="663.7" y="709" width="0.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="666.72" y="719.5" ></text>
</g>
<g >
<title>malloc (3,853,605 samples, 0.02%)</title><rect x="585.3" y="917" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="588.26" y="927.5" ></text>
</g>
<g >
<title>drain_stock (25,969,979 samples, 0.13%)</title><rect x="380.5" y="837" width="1.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="383.51" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_lower_bound (8,998,663 samples, 0.05%)</title><rect x="1066.3" y="901" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1069.30" y="911.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::TcpServer*, false&gt;::_Head_base&lt;webserver::TcpServer*&gt; (1,916,639 samples, 0.01%)</title><rect x="903.4" y="933" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="906.35" y="943.5" ></text>
</g>
<g >
<title>char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (32,916,315 samples, 0.17%)</title><rect x="210.7" y="885" width="2.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="213.65" y="895.5" ></text>
</g>
<g >
<title>tcp_try_rmem_schedule (105,909,498 samples, 0.55%)</title><rect x="1142.1" y="517" width="6.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1145.07" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (40,502,598 samples, 0.21%)</title><rect x="85.0" y="965" width="2.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="88.04" y="975.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::readerBegin (3,762,848 samples, 0.02%)</title><rect x="525.6" y="981" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="528.64" y="991.5" ></text>
</g>
<g >
<title>x64_sys_call (186,339,389 samples, 0.96%)</title><rect x="178.3" y="917" width="11.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="181.32" y="927.5" ></text>
</g>
<g >
<title>tcp_data_ready (1,940,098 samples, 0.01%)</title><rect x="1148.5" y="533" width="0.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1151.51" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (2,970,285 samples, 0.02%)</title><rect x="399.7" y="1045" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="402.73" y="1055.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt;::operator (5,993,912 samples, 0.03%)</title><rect x="545.5" y="901" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="548.54" y="911.5" ></text>
</g>
<g >
<title>operator new (3,851,239 samples, 0.02%)</title><rect x="831.4" y="837" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="834.42" y="847.5" ></text>
</g>
<g >
<title>std::__weak_count&lt; (2,002,998 samples, 0.01%)</title><rect x="103.1" y="917" width="0.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="106.11" y="927.5" ></text>
</g>
<g >
<title>__refill_stock (47,020,427 samples, 0.24%)</title><rect x="768.7" y="197" width="2.8" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="771.69" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (162,611,564 samples, 0.84%)</title><rect x="1060.8" y="997" width="9.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1063.78" y="1007.5" ></text>
</g>
<g >
<title>inet_label_sock_perm (5,987,005 samples, 0.03%)</title><rect x="238.4" y="805" width="0.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="241.41" y="815.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (1,957,053 samples, 0.01%)</title><rect x="401.5" y="1045" width="0.2" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="404.54" y="1055.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (2,808,207 samples, 0.01%)</title><rect x="1046.5" y="949" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1049.48" y="959.5" ></text>
</g>
<g >
<title>tcp_rate_check_app_limited (1,996,956 samples, 0.01%)</title><rect x="657.9" y="789" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="660.94" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_drop_node (22,617,835 samples, 0.12%)</title><rect x="574.8" y="901" width="1.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="577.84" y="911.5" ></text>
</g>
<g >
<title>remove_wait_queue (1,963,385 samples, 0.01%)</title><rect x="1045.1" y="853" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1048.10" y="863.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (6,961,582 samples, 0.04%)</title><rect x="521.2" y="917" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="524.19" y="927.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::_M_ptr (6,718,655 samples, 0.03%)</title><rect x="1024.8" y="1077" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1027.78" y="1087.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (4,041,788 samples, 0.02%)</title><rect x="159.7" y="565" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="162.68" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (2,012,621 samples, 0.01%)</title><rect x="119.2" y="645" width="0.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="122.18" y="655.5" ></text>
</g>
<g >
<title>__virt_addr_valid (12,353,332 samples, 0.06%)</title><rect x="373.9" y="821" width="0.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="376.95" y="831.5" ></text>
</g>
<g >
<title>try_to_wake_up (117,098,445 samples, 0.60%)</title><rect x="465.9" y="533" width="7.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="468.87" y="543.5" ></text>
</g>
<g >
<title>__sk_mem_reduce_allocated (70,484,127 samples, 0.36%)</title><rect x="643.0" y="677" width="4.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="645.98" y="687.5" ></text>
</g>
<g >
<title>__rcu_read_lock (1,968,411 samples, 0.01%)</title><rect x="986.4" y="773" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="989.40" y="783.5" ></text>
</g>
<g >
<title>ip_skb_dst_mtu (1,917,121 samples, 0.01%)</title><rect x="792.3" y="629" width="0.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="795.32" y="639.5" ></text>
</g>
<g >
<title>operator new (5,879,740 samples, 0.03%)</title><rect x="197.7" y="917" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="200.72" y="927.5" ></text>
</g>
<g >
<title>process_backlog (762,622,650 samples, 3.93%)</title><rect x="1105.8" y="693" width="46.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1108.84" y="703.5" >proc..</text>
</g>
<g >
<title>__GI___libc_write (7,700,093 samples, 0.04%)</title><rect x="12.2" y="1333" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="15.19" y="1343.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (5,034,829 samples, 0.03%)</title><rect x="153.3" y="613" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="156.26" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (63,098,518 samples, 0.32%)</title><rect x="831.8" y="917" width="3.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="834.77" y="927.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (1,933,400 samples, 0.01%)</title><rect x="151.8" y="517" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="154.79" y="527.5" ></text>
</g>
<g >
<title>__import_iovec (14,928,084 samples, 0.08%)</title><rect x="389.7" y="997" width="0.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="392.74" y="1007.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (1,849,316 samples, 0.01%)</title><rect x="395.6" y="1045" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="398.64" y="1055.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_addr (6,718,698 samples, 0.03%)</title><rect x="157.8" y="517" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="160.84" y="527.5" ></text>
</g>
<g >
<title>security_file_permission (11,559,988 samples, 0.06%)</title><rect x="623.0" y="821" width="0.7" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="625.97" y="831.5" ></text>
</g>
<g >
<title>webserver::HttpParser::HttpParser (3,853,670 samples, 0.02%)</title><rect x="114.8" y="693" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="117.81" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (2,025,492 samples, 0.01%)</title><rect x="595.7" y="917" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="598.74" y="927.5" ></text>
</g>
<g >
<title>operator delete (3,029,948 samples, 0.02%)</title><rect x="883.4" y="1221" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="886.36" y="1231.5" ></text>
</g>
<g >
<title>skb_rbtree_purge (1,962,862 samples, 0.01%)</title><rect x="1131.0" y="501" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1134.04" y="511.5" ></text>
</g>
<g >
<title>malloc (7,684,718 samples, 0.04%)</title><rect x="827.2" y="901" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="830.18" y="911.5" ></text>
</g>
<g >
<title>rb_erase (15,689,799 samples, 0.08%)</title><rect x="1044.1" y="853" width="0.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1047.09" y="863.5" ></text>
</g>
<g >
<title>release_sock (8,858,807 samples, 0.05%)</title><rect x="626.2" y="805" width="0.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="629.20" y="815.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,846,910 samples, 0.01%)</title><rect x="914.2" y="741" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="917.22" y="751.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (52,137,876 samples, 0.27%)</title><rect x="731.3" y="101" width="3.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="734.33" y="111.5" ></text>
</g>
<g >
<title>mod_objcg_state (5,024,034 samples, 0.03%)</title><rect x="151.2" y="485" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="154.20" y="495.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (8,595,815 samples, 0.04%)</title><rect x="687.1" y="469" width="0.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="690.09" y="479.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,963,764 samples, 0.02%)</title><rect x="305.8" y="949" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="308.80" y="959.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (47,178,172 samples, 0.24%)</title><rect x="470.1" y="517" width="2.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="473.12" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,975,439 samples, 0.01%)</title><rect x="829.4" y="933" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="832.35" y="943.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp; std::__get_helper&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (4,818,098 samples, 0.02%)</title><rect x="124.0" y="693" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="127.03" y="703.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::eventOfChannel (3,737,490 samples, 0.02%)</title><rect x="154.0" y="629" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="156.98" y="639.5" ></text>
</g>
<g >
<title>malloc (1,779,950 samples, 0.01%)</title><rect x="243.9" y="853" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="246.92" y="863.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::__sv_wrapper::__sv_wrapper (3,001,257 samples, 0.02%)</title><rect x="577.4" y="965" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="580.39" y="975.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (252,852,868 samples, 1.30%)</title><rect x="745.8" y="261" width="15.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="748.80" y="271.5" ></text>
</g>
<g >
<title>webserver::Channel::hasEvent (5,986,314 samples, 0.03%)</title><rect x="40.2" y="1301" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="43.20" y="1311.5" ></text>
</g>
<g >
<title>vfs_write (3,344,362,413 samples, 17.22%)</title><rect x="620.2" y="853" width="203.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="623.25" y="863.5" >vfs_write</text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, false&gt;::_Head_base (2,917,735 samples, 0.02%)</title><rect x="400.1" y="1013" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="403.14" y="1023.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,981,524 samples, 0.02%)</title><rect x="950.5" y="789" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="953.47" y="799.5" ></text>
</g>
<g >
<title>__cond_resched (1,987,059 samples, 0.01%)</title><rect x="135.4" y="533" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="138.40" y="543.5" ></text>
</g>
<g >
<title>security_sock_rcv_skb (1,891,834 samples, 0.01%)</title><rect x="1114.3" y="565" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1117.31" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1,976,256 samples, 0.01%)</title><rect x="516.3" y="885" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="519.29" y="895.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (3,011,009 samples, 0.02%)</title><rect x="1079.4" y="997" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1082.37" y="1007.5" ></text>
</g>
<g >
<title>errseq_sample (4,953,674 samples, 0.03%)</title><rect x="326.0" y="965" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="329.01" y="975.5" ></text>
</g>
<g >
<title>enqueue_timer (3,938,115 samples, 0.02%)</title><rect x="800.8" y="629" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="803.77" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_equal_to_iter::operator (1,983,590 samples, 0.01%)</title><rect x="535.5" y="917" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="538.50" y="927.5" ></text>
</g>
<g >
<title>webserver::TcpConnection*&amp; std::_Mu&lt;webserver::TcpConnection*, false, false&gt;::operator (3,799,469 samples, 0.02%)</title><rect x="861.0" y="1173" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="864.00" y="1183.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::erase (2,987,476 samples, 0.02%)</title><rect x="1061.4" y="949" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1064.38" y="959.5" ></text>
</g>
<g >
<title>ep_ptable_queue_proc (3,021,021 samples, 0.02%)</title><rect x="140.1" y="485" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="143.12" y="495.5" ></text>
</g>
<g >
<title>iterate_tty_write (617,231,191 samples, 3.18%)</title><rect x="444.1" y="693" width="37.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="447.09" y="703.5" >ite..</text>
</g>
<g >
<title>std::function&lt;void  (3,246,855,530 samples, 16.72%)</title><rect x="53.6" y="1125" width="197.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="56.65" y="1135.5" >std::function&lt;void </text>
</g>
<g >
<title>_raw_spin_unlock_bh (2,032,813 samples, 0.01%)</title><rect x="279.6" y="965" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="282.61" y="975.5" ></text>
</g>
<g >
<title>__memcpy (1,989,430 samples, 0.01%)</title><rect x="322.5" y="949" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="325.48" y="959.5" ></text>
</g>
<g >
<title>inet_twsk_deschedule_put (3,921,855 samples, 0.02%)</title><rect x="711.1" y="341" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="714.09" y="351.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_noprof (4,786,707 samples, 0.02%)</title><rect x="722.4" y="229" width="0.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="725.37" y="239.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (1,942,377 samples, 0.01%)</title><rect x="565.6" y="933" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="568.60" y="943.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (10,723,016 samples, 0.06%)</title><rect x="666.2" y="741" width="0.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="669.20" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (4,766,491 samples, 0.02%)</title><rect x="43.4" y="1221" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="46.36" y="1231.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;webserver::TcpConnection*,  (4,795,145 samples, 0.02%)</title><rect x="1020.1" y="1061" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1023.06" y="1071.5" ></text>
</g>
<g >
<title>__put_partials (2,858,849 samples, 0.01%)</title><rect x="991.5" y="725" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="994.55" y="735.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (10,675,641 samples, 0.05%)</title><rect x="928.2" y="997" width="0.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="931.16" y="1007.5" ></text>
</g>
<g >
<title>tty_write (688,518,398 samples, 3.54%)</title><rect x="441.7" y="725" width="41.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="444.65" y="735.5" >tty..</text>
</g>
<g >
<title>std::_Any_data::_M_access (1,923,759 samples, 0.01%)</title><rect x="86.5" y="901" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="89.49" y="911.5" ></text>
</g>
<g >
<title>webserver::Channel* const&amp; std::__get_helper&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (2,908,189 samples, 0.01%)</title><rect x="199.1" y="885" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="202.06" y="895.5" ></text>
</g>
<g >
<title>webserver::Poller*&amp; std::__get_helper&lt;0ul, webserver::Poller*, webserver::Channel*&gt; (3,960,587 samples, 0.02%)</title><rect x="169.1" y="645" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="172.10" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;char&gt;::__value, void&gt;::__type std::__fill_a1&lt;char&gt; (3,006,762 samples, 0.02%)</title><rect x="211.2" y="837" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="214.19" y="847.5" ></text>
</g>
<g >
<title>mod_objcg_state (4,923,702 samples, 0.03%)</title><rect x="1036.6" y="805" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1039.56" y="815.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt;::_Iter_equals_val (1,921,318 samples, 0.01%)</title><rect x="545.0" y="917" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="547.95" y="927.5" ></text>
</g>
<g >
<title>mod_memcg_state (14,519,428 samples, 0.07%)</title><rect x="1142.9" y="453" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1145.87" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_get_Tp_allocator (5,867,168 samples, 0.03%)</title><rect x="215.0" y="885" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="218.01" y="895.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__sp_compatible_with&lt;void*, void*&gt;::value, std::__weak_ptr&lt;void,  (2,025,380 samples, 0.01%)</title><rect x="169.7" y="805" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="172.70" y="815.5" ></text>
</g>
<g >
<title>page_counter_uncharge (10,681,340 samples, 0.05%)</title><rect x="276.5" y="885" width="0.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="279.51" y="895.5" ></text>
</g>
<g >
<title>mem_cgroup_charge_skmem (91,762,347 samples, 0.47%)</title><rect x="1142.8" y="469" width="5.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1145.81" y="479.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::function&lt;void  (3,924,565 samples, 0.02%)</title><rect x="881.8" y="1285" width="0.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="884.80" y="1295.5" ></text>
</g>
<g >
<title>__memcg_slab_free_hook (13,528,039 samples, 0.07%)</title><rect x="959.0" y="885" width="0.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="962.02" y="895.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (19,271,535 samples, 0.10%)</title><rect x="749.1" y="181" width="1.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="752.06" y="191.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (1,889,906 samples, 0.01%)</title><rect x="1052.8" y="901" width="0.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1055.81" y="911.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,971,673 samples, 0.02%)</title><rect x="335.7" y="1029" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="338.74" y="1039.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_lower_bound (40,142,774 samples, 0.21%)</title><rect x="916.9" y="805" width="2.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="919.91" y="815.5" ></text>
</g>
<g >
<title>__queue_work (4,445,472 samples, 0.02%)</title><rect x="1180.9" y="789" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1183.92" y="799.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::getHeaderValue[abi:cxx11] (106,610,076 samples, 0.55%)</title><rect x="576.9" y="981" width="6.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="579.86" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (2,013,666 samples, 0.01%)</title><rect x="596.4" y="917" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="599.35" y="927.5" ></text>
</g>
<g >
<title>loopback_xmit (2,010,670 samples, 0.01%)</title><rect x="790.0" y="565" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="793.02" y="575.5" ></text>
</g>
<g >
<title>default_wake_function (10,925,855 samples, 0.06%)</title><rect x="1129.0" y="437" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1131.96" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,907,918 samples, 0.01%)</title><rect x="882.0" y="1285" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="885.04" y="1295.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (199,409,111 samples, 1.03%)</title><rect x="113.2" y="757" width="12.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="116.16" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__iter_equal_to_iter (2,969,942 samples, 0.02%)</title><rect x="532.8" y="949" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="535.83" y="959.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::~vector (2,914,001 samples, 0.02%)</title><rect x="1016.6" y="1013" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1019.56" y="1023.5" ></text>
</g>
<g >
<title>_dl_start_user (2,656,065 samples, 0.01%)</title><rect x="12.7" y="1381" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="15.71" y="1391.5" ></text>
</g>
<g >
<title>process_output_block (8,335,382 samples, 0.04%)</title><rect x="1180.7" y="853" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1183.68" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (13,743,167 samples, 0.07%)</title><rect x="602.6" y="949" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="605.56" y="959.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (4,811,698 samples, 0.02%)</title><rect x="654.8" y="725" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="657.80" y="735.5" ></text>
</g>
<g >
<title>iterate_tty_write (9,772,824 samples, 0.05%)</title><rect x="339.9" y="901" width="0.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="342.89" y="911.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (2,977,086 samples, 0.02%)</title><rect x="466.3" y="501" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="469.34" y="511.5" ></text>
</g>
<g >
<title>rcu_core_si (6,048,797 samples, 0.03%)</title><rect x="784.1" y="501" width="0.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="787.11" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (6,451,591 samples, 0.03%)</title><rect x="95.5" y="949" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="98.49" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_erase_aux (57,245,912 samples, 0.29%)</title><rect x="1062.2" y="917" width="3.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1065.25" y="927.5" ></text>
</g>
<g >
<title>__tcp_send_ack.part.0 (2,852,426 samples, 0.01%)</title><rect x="720.0" y="293" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="723.02" y="303.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,832,865 samples, 0.01%)</title><rect x="140.3" y="485" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="143.30" y="495.5" ></text>
</g>
<g >
<title>refill_obj_stock (5,767,394 samples, 0.03%)</title><rect x="959.5" y="869" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="962.49" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (4,728,663 samples, 0.02%)</title><rect x="1006.3" y="949" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1009.32" y="959.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_base (5,768,039 samples, 0.03%)</title><rect x="879.8" y="1269" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="882.80" y="1279.5" ></text>
</g>
<g >
<title>sk_reset_timer (9,782,876 samples, 0.05%)</title><rect x="805.7" y="709" width="0.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="808.65" y="719.5" ></text>
</g>
<g >
<title>do_softirq.part.0 (1,674,755,904 samples, 8.62%)</title><rect x="683.1" y="549" width="101.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="686.14" y="559.5" >do_softirq.p..</text>
</g>
<g >
<title>webserver::HttpParser::HttpParser (25,800,340 samples, 0.13%)</title><rect x="115.5" y="645" width="1.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="118.53" y="655.5" ></text>
</g>
<g >
<title>security_socket_getsockname (31,126,010 samples, 0.16%)</title><rect x="226.2" y="853" width="1.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="229.21" y="863.5" ></text>
</g>
<g >
<title>netif_rx_internal (11,568,757 samples, 0.06%)</title><rect x="733.0" y="53" width="0.7" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="735.98" y="63.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (5,783,817 samples, 0.03%)</title><rect x="235.2" y="837" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="238.20" y="847.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::HttpRequest (6,848,919 samples, 0.04%)</title><rect x="122.5" y="581" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="125.54" y="591.5" ></text>
</g>
<g >
<title>_int_free (1,934,247 samples, 0.01%)</title><rect x="914.3" y="725" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="917.28" y="735.5" ></text>
</g>
<g >
<title>__tcp_close (3,790,052 samples, 0.02%)</title><rect x="965.4" y="853" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="968.42" y="863.5" ></text>
</g>
<g >
<title>_int_free (4,734,685 samples, 0.02%)</title><rect x="409.5" y="965" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="412.53" y="975.5" ></text>
</g>
<g >
<title>stream_open (5,769,072 samples, 0.03%)</title><rect x="330.1" y="997" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="333.10" y="1007.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3,054,295 samples, 0.02%)</title><rect x="594.2" y="901" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="597.18" y="911.5" ></text>
</g>
<g >
<title>pty_write (26,910,101 samples, 0.14%)</title><rect x="452.8" y="645" width="1.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="455.82" y="655.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (3,829,637 samples, 0.02%)</title><rect x="1167.6" y="853" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1170.58" y="863.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (4,878,244,686 samples, 25.12%)</title><rect x="886.8" y="1237" width="296.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="889.81" y="1247.5" >void std::__invoke_impl&lt;void, std::_Bin..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_destroy_node (7,822,648 samples, 0.04%)</title><rect x="913.3" y="773" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="916.27" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::~_Rb_tree_impl (1,931,698 samples, 0.01%)</title><rect x="614.8" y="933" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="617.83" y="943.5" ></text>
</g>
<g >
<title>webserver::Channel::runWithGuard (13,461,907,584 samples, 69.31%)</title><rect x="43.7" y="1285" width="817.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="46.65" y="1295.5" >webserver::Channel::runWithGuard</text>
</g>
<g >
<title>_copy_from_iter (3,028,571 samples, 0.02%)</title><rect x="443.9" y="693" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="446.91" y="703.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::_Any_data&amp;&gt;::type&amp;&amp; std::move&lt;std::_Any_data&amp;&gt; (2,554,185 samples, 0.01%)</title><rect x="244.3" y="917" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="247.32" y="927.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl_data::_Vector_impl_data (2,841,553 samples, 0.01%)</title><rect x="880.0" y="1253" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="882.97" y="1263.5" ></text>
</g>
<g >
<title>sock_write_iter (5,408,330 samples, 0.03%)</title><rect x="619.9" y="853" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="622.86" y="863.5" ></text>
</g>
<g >
<title>webserver::Channel* const&amp; std::__get_helper&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (3,944,592 samples, 0.02%)</title><rect x="1021.6" y="1061" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1024.56" y="1071.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,047,657 samples, 0.02%)</title><rect x="389.5" y="981" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="392.49" y="991.5" ></text>
</g>
<g >
<title>operator new (1,890,117 samples, 0.01%)</title><rect x="852.0" y="981" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="855.03" y="991.5" ></text>
</g>
<g >
<title>tcp_poll (2,030,729 samples, 0.01%)</title><rect x="146.4" y="501" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="149.39" y="511.5" ></text>
</g>
<g >
<title>tick_nohz_handler (2,000,143 samples, 0.01%)</title><rect x="476.2" y="517" width="0.1" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="479.18" y="527.5" ></text>
</g>
<g >
<title>__fdget (14,555,106 samples, 0.07%)</title><rect x="135.5" y="533" width="0.9" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="138.53" y="543.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (8,052,159 samples, 0.04%)</title><rect x="221.0" y="901" width="0.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="224.05" y="911.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt;, false&gt;::~_Head_base (2,907,205 samples, 0.01%)</title><rect x="902.3" y="933" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="905.29" y="943.5" ></text>
</g>
<g >
<title>skb_clone (11,843,122 samples, 0.06%)</title><rect x="793.8" y="709" width="0.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="796.80" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (3,980,502 samples, 0.02%)</title><rect x="595.2" y="917" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="598.20" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node::operator (39,844,600 samples, 0.21%)</title><rect x="501.9" y="837" width="2.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="504.95" y="847.5" ></text>
</g>
<g >
<title>__slab_free (3,014,768 samples, 0.02%)</title><rect x="992.5" y="757" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="995.45" y="767.5" ></text>
</g>
<g >
<title>std::function&lt;void  (3,917,221 samples, 0.02%)</title><rect x="615.4" y="965" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="618.42" y="975.5" ></text>
</g>
<g >
<title>webserver::TcpServer::newConnection (3,065,298,599 samples, 15.78%)</title><rect x="62.9" y="997" width="186.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="65.91" y="1007.5" >webserver::TcpServer::ne..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (3,807,947 samples, 0.02%)</title><rect x="1186.8" y="1221" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1189.81" y="1231.5" ></text>
</g>
<g >
<title>__wake_up (10,694,453 samples, 0.06%)</title><rect x="446.5" y="677" width="0.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="449.46" y="687.5" ></text>
</g>
<g >
<title>xas_load (2,921,010 samples, 0.02%)</title><rect x="302.7" y="885" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="305.68" y="895.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (1,112,164,023 samples, 5.73%)</title><rect x="1094.1" y="917" width="67.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1097.13" y="927.5" >__ip_qu..</text>
</g>
<g >
<title>mem_cgroup_charge_skmem (78,700,444 samples, 0.41%)</title><rect x="816.2" y="741" width="4.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="819.15" y="751.5" ></text>
</g>
<g >
<title>remove_entity_load_avg (3,968,555 samples, 0.02%)</title><rect x="755.4" y="149" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="758.45" y="159.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (7,149,307,177 samples, 36.81%)</title><rect x="402.8" y="1013" width="434.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="405.78" y="1023.5" >void std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (2,991,262 samples, 0.02%)</title><rect x="499.3" y="821" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="502.31" y="831.5" ></text>
</g>
<g >
<title>sock_rfree (10,290,817 samples, 0.05%)</title><rect x="362.3" y="933" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="365.25" y="943.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,917,046 samples, 0.02%)</title><rect x="84.9" y="805" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="87.87" y="815.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (1,790,270 samples, 0.01%)</title><rect x="961.1" y="901" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="964.06" y="911.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::TcpServer*, std::_Placeholder&lt;1&gt; &gt; (4,802,022 samples, 0.02%)</title><rect x="250.2" y="1029" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="253.20" y="1039.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::send (3,451,625,415 samples, 17.77%)</title><rect x="615.3" y="981" width="209.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="618.31" y="991.5" >webserver::TcpConnection::s..</text>
</g>
<g >
<title>__raw_spin_lock_irqsave (19,271,535 samples, 0.10%)</title><rect x="749.1" y="165" width="1.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="752.06" y="175.5" ></text>
</g>
<g >
<title>napi_consume_skb (46,007,992 samples, 0.24%)</title><rect x="1152.2" y="709" width="2.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1155.17" y="719.5" ></text>
</g>
<g >
<title>__overflow (1,865,835 samples, 0.01%)</title><rect x="432.5" y="885" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="435.45" y="895.5" ></text>
</g>
<g >
<title>_IO_fwrite (5,800,739 samples, 0.03%)</title><rect x="431.0" y="885" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="433.96" y="895.5" ></text>
</g>
<g >
<title>_atomic_dec_and_lock (4,854,474 samples, 0.02%)</title><rect x="942.2" y="837" width="0.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="945.23" y="847.5" ></text>
</g>
<g >
<title>__sock_release (1,934,046 samples, 0.01%)</title><rect x="935.6" y="901" width="0.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="938.64" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (3,774,570 samples, 0.02%)</title><rect x="580.6" y="901" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="583.59" y="911.5" ></text>
</g>
<g >
<title>release_sock (10,240,229 samples, 0.05%)</title><rect x="279.7" y="981" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="282.73" y="991.5" ></text>
</g>
<g >
<title>setup_object (3,046,908 samples, 0.02%)</title><rect x="297.1" y="853" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="300.10" y="863.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (38,763,758 samples, 0.20%)</title><rect x="1185.0" y="1269" width="2.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1187.98" y="1279.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,959,163 samples, 0.01%)</title><rect x="925.3" y="1125" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="928.32" y="1135.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (1,890,782 samples, 0.01%)</title><rect x="787.5" y="469" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="790.53" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2,923,320 samples, 0.02%)</title><rect x="613.5" y="885" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="616.46" y="895.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt;::_M_head (2,831,759 samples, 0.01%)</title><rect x="923.5" y="997" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="926.46" y="1007.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (4,633,193 samples, 0.02%)</title><rect x="78.6" y="949" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="81.60" y="959.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator* (1,900,767 samples, 0.01%)</title><rect x="863.0" y="1285" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="866.02" y="1295.5" ></text>
</g>
<g >
<title>void  (5,804,614 samples, 0.03%)</title><rect x="191.9" y="949" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="194.89" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (36,691,748 samples, 0.19%)</title><rect x="82.8" y="917" width="2.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="85.81" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree_key_compare&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_key_compare (1,853,978 samples, 0.01%)</title><rect x="570.6" y="917" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="573.61" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::~_Rb_tree_impl (2,003,700 samples, 0.01%)</title><rect x="1006.9" y="901" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1009.88" y="911.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5,864,546 samples, 0.03%)</title><rect x="593.2" y="917" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="596.17" y="927.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::setMessageCallback (32,209,056 samples, 0.17%)</title><rect x="247.1" y="981" width="2.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="250.12" y="991.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (8,826,774 samples, 0.05%)</title><rect x="894.4" y="1109" width="0.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="897.42" y="1119.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator (3,897,623 samples, 0.02%)</title><rect x="867.2" y="1205" width="0.3" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="870.22" y="1215.5" ></text>
</g>
<g >
<title>__strlen_avx2 (5,930,946 samples, 0.03%)</title><rect x="418.8" y="885" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="421.81" y="895.5" ></text>
</g>
<g >
<title>__ep_remove (167,084,550 samples, 0.86%)</title><rect x="1031.0" y="853" width="10.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1033.96" y="863.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (27,392,269 samples, 0.14%)</title><rect x="195.3" y="949" width="1.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="198.35" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1,992,550 samples, 0.01%)</title><rect x="107.0" y="933" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="109.97" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,727,100 samples, 0.01%)</title><rect x="447.0" y="661" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="450.01" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (21,461,326 samples, 0.11%)</title><rect x="592.2" y="933" width="1.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="595.23" y="943.5" ></text>
</g>
<g >
<title>apparmor_inode_alloc_security (3,815,412 samples, 0.02%)</title><rect x="290.1" y="933" width="0.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="293.05" y="943.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (6,518,240 samples, 0.03%)</title><rect x="607.9" y="949" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="610.85" y="959.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,932,633 samples, 0.01%)</title><rect x="846.2" y="1093" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="849.18" y="1103.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (4,892,724 samples, 0.03%)</title><rect x="122.5" y="549" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="125.54" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (8,391,407 samples, 0.04%)</title><rect x="1050.3" y="853" width="0.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1053.33" y="863.5" ></text>
</g>
<g >
<title>webserver::HttpServer*&amp; std::__get_helper&lt;0ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt; &gt; (2,998,893 samples, 0.02%)</title><rect x="923.8" y="1029" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="926.81" y="1039.5" ></text>
</g>
<g >
<title>net_rx_action (2,984,138 samples, 0.02%)</title><rect x="784.6" y="517" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="787.65" y="527.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (7,791,965 samples, 0.04%)</title><rect x="953.7" y="805" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="956.67" y="815.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,924,117 samples, 0.02%)</title><rect x="1004.2" y="949" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1007.19" y="959.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_noprof (5,976,981 samples, 0.03%)</title><rect x="722.7" y="245" width="0.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="725.66" y="255.5" ></text>
</g>
<g >
<title>webserver::HttpParser* boost::any_cast&lt;webserver::HttpParser&gt; (41,239,369 samples, 0.21%)</title><rect x="526.4" y="981" width="2.5" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="529.39" y="991.5" ></text>
</g>
<g >
<title>select_task_rq_fair (71,677,473 samples, 0.37%)</title><rect x="750.8" y="165" width="4.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="753.80" y="175.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (440,592,875 samples, 2.27%)</title><rect x="1027.3" y="981" width="26.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1030.29" y="991.5" >s..</text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (2,983,248 samples, 0.02%)</title><rect x="246.6" y="933" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="249.59" y="943.5" ></text>
</g>
<g >
<title>std::_Placeholder&lt;1&gt; const&amp; std::forward&lt;std::_Placeholder&lt;1&gt; const&amp;&gt; (2,016,060 samples, 0.01%)</title><rect x="74.0" y="933" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="77.04" y="943.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (3,705,669 samples, 0.02%)</title><rect x="1040.8" y="805" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1043.78" y="815.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (9,726,382 samples, 0.05%)</title><rect x="867.9" y="1221" width="0.6" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="870.88" y="1231.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (3,959,668 samples, 0.02%)</title><rect x="864.0" y="1253" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="867.01" y="1263.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::max&lt;unsigned long&gt; (2,948,005 samples, 0.02%)</title><rect x="217.9" y="917" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="220.90" y="927.5" ></text>
</g>
<g >
<title>skb_release_data (13,515,514 samples, 0.07%)</title><rect x="652.7" y="693" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="655.70" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,735,509,972 samples, 8.94%)</title><rect x="1073.0" y="1109" width="105.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1076.01" y="1119.5" >entry_SYSCAL..</text>
</g>
<g >
<title>apparmor_socket_sendmsg (10,388,559 samples, 0.05%)</title><rect x="624.9" y="821" width="0.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="627.90" y="831.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp; std::__get_helper&lt;1ul, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; (4,582,307 samples, 0.02%)</title><rect x="838.6" y="997" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="841.56" y="1007.5" ></text>
</g>
<g >
<title>x64_sys_call (252,905,669 samples, 1.30%)</title><rect x="19.3" y="1253" width="15.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="22.27" y="1263.5" ></text>
</g>
<g >
<title>std::function&lt;void  (486,905,376 samples, 2.51%)</title><rect x="1025.9" y="1077" width="29.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1028.91" y="1087.5" >st..</text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~tuple (7,804,775 samples, 0.04%)</title><rect x="906.6" y="901" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="909.58" y="911.5" ></text>
</g>
<g >
<title>__cond_resched (2,850,747 samples, 0.01%)</title><rect x="295.0" y="933" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="297.98" y="943.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr&lt;webserver::TcpConnection, void&gt; (3,902,072 samples, 0.02%)</title><rect x="61.6" y="997" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="64.55" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_get_Node_allocator (2,887,070 samples, 0.01%)</title><rect x="167.1" y="517" width="0.2" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="170.14" y="527.5" ></text>
</g>
<g >
<title>__sys_shutdown (1,681,895,123 samples, 8.66%)</title><rect x="1075.3" y="1045" width="102.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1078.34" y="1055.5" >__sys_shutdown</text>
</g>
<g >
<title>__try_to_del_timer_sync (1,899,238 samples, 0.01%)</title><rect x="711.2" y="293" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="714.22" y="303.5" ></text>
</g>
<g >
<title>net_rx_action (849,641,658 samples, 4.37%)</title><rect x="1103.6" y="725" width="51.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1106.58" y="735.5" >net_r..</text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (1,854,664 samples, 0.01%)</title><rect x="1067.4" y="869" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1070.43" y="879.5" ></text>
</g>
<g >
<title>tcp_set_state (1,955,106 samples, 0.01%)</title><rect x="1142.0" y="517" width="0.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1144.95" y="527.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::eventOfChannel (2,032,713 samples, 0.01%)</title><rect x="168.6" y="613" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="171.62" y="623.5" ></text>
</g>
<g >
<title>slab_update_freelist.isra.0 (1,911,602 samples, 0.01%)</title><rect x="995.4" y="725" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="998.38" y="735.5" ></text>
</g>
<g >
<title>select_task_rq (4,897,337 samples, 0.03%)</title><rect x="465.6" y="533" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="468.57" y="543.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,951,147 samples, 0.01%)</title><rect x="1022.2" y="1109" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1025.21" y="1119.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (98,104,618 samples, 0.51%)</title><rect x="419.8" y="901" width="5.9" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="422.79" y="911.5" ></text>
</g>
<g >
<title>vfs_write (741,519,938 samples, 3.82%)</title><rect x="438.4" y="741" width="45.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="441.43" y="751.5" >vfs_..</text>
</g>
<g >
<title>ip_route_output_flow (1,907,041 samples, 0.01%)</title><rect x="774.8" y="309" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="777.75" y="319.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (6,796,914 samples, 0.03%)</title><rect x="524.4" y="981" width="0.4" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="527.38" y="991.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (3,741,792 samples, 0.02%)</title><rect x="927.5" y="1013" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="930.45" y="1023.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (2,021,702 samples, 0.01%)</title><rect x="1129.5" y="405" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1132.50" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (28,077,962 samples, 0.14%)</title><rect x="1013.3" y="901" width="1.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1016.30" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (3,021,277 samples, 0.02%)</title><rect x="595.3" y="901" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="598.26" y="911.5" ></text>
</g>
<g >
<title>refill_obj_stock (2,032,588 samples, 0.01%)</title><rect x="303.9" y="885" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="306.85" y="895.5" ></text>
</g>
<g >
<title>add_wait_queue (7,729,896 samples, 0.04%)</title><rect x="451.8" y="661" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="454.78" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (1,576,317,710 samples, 8.12%)</title><rect x="925.1" y="1141" width="95.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="928.14" y="1151.5" >std::shared..</text>
</g>
<g >
<title>__dentry_kill (5,852,294 samples, 0.03%)</title><rect x="935.2" y="901" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="938.16" y="911.5" ></text>
</g>
<g >
<title>mutex_lock (11,905,219 samples, 0.06%)</title><rect x="1043.1" y="853" width="0.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1046.13" y="863.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (84,381,937 samples, 0.43%)</title><rect x="784.9" y="565" width="5.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="787.89" y="575.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (3,552,930 samples, 0.02%)</title><rect x="244.3" y="933" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="247.26" y="943.5" ></text>
</g>
<g >
<title>tcp_stream_alloc_skb (145,090,148 samples, 0.75%)</title><rect x="812.3" y="773" width="8.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="815.30" y="783.5" ></text>
</g>
<g >
<title>tcp_shutdown (1,499,583,259 samples, 7.72%)</title><rect x="1083.3" y="1013" width="91.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1086.32" y="1023.5" >tcp_shutdown</text>
</g>
<g >
<title>webserver::EventThreadPool::getNextLoop (36,904,114 samples, 0.19%)</title><rect x="171.4" y="981" width="2.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="174.43" y="991.5" ></text>
</g>
<g >
<title>std::function&lt;void  (21,631,618 samples, 0.11%)</title><rect x="847.2" y="1109" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="850.23" y="1119.5" ></text>
</g>
<g >
<title>malloc (1,926,172 samples, 0.01%)</title><rect x="851.6" y="1013" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="854.62" y="1023.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1,913,928 samples, 0.01%)</title><rect x="581.7" y="885" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="584.71" y="895.5" ></text>
</g>
<g >
<title>_raw_spin_lock (5,808,471 samples, 0.03%)</title><rect x="1109.4" y="581" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1112.39" y="591.5" ></text>
</g>
<g >
<title>wake_up_process (123,995,851 samples, 0.64%)</title><rect x="465.6" y="549" width="7.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="468.57" y="559.5" ></text>
</g>
<g >
<title>webserver::MutexLock::lock (8,756,177 samples, 0.05%)</title><rect x="855.2" y="1077" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="858.23" y="1087.5" ></text>
</g>
<g >
<title>get_next_ino (10,644,184 samples, 0.05%)</title><rect x="260.3" y="997" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="263.34" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_key (1,942,768 samples, 0.01%)</title><rect x="95.1" y="949" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="98.13" y="959.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,057,859 samples, 0.02%)</title><rect x="1074.5" y="1077" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1077.50" y="1087.5" ></text>
</g>
<g >
<title>x64_sys_call (114,306,657 samples, 0.59%)</title><rect x="232.4" y="901" width="7.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="235.43" y="911.5" ></text>
</g>
<g >
<title>tcp_inbound_hash (5,681,084 samples, 0.03%)</title><rect x="1115.7" y="565" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1118.73" y="575.5" ></text>
</g>
<g >
<title> (2,935,462 samples, 0.02%)</title><rect x="404.8" y="981" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="407.84" y="991.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (1,923,827 samples, 0.01%)</title><rect x="780.1" y="485" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="783.08" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::get (3,918,054 samples, 0.02%)</title><rect x="827.9" y="933" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="830.89" y="943.5" ></text>
</g>
<g >
<title>net_rx_action (3,822,016 samples, 0.02%)</title><rect x="1155.3" y="741" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1158.34" y="751.5" ></text>
</g>
<g >
<title>jiffies_to_usecs (4,635,164 samples, 0.02%)</title><rect x="795.7" y="725" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="798.69" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_getpeername (110,553,657 samples, 0.57%)</title><rect x="232.5" y="885" width="6.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="235.54" y="895.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;webserver::TcpConnection,  (2,935,462 samples, 0.02%)</title><rect x="404.8" y="997" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="407.84" y="1007.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInLoopThread (6,693,454 samples, 0.03%)</title><rect x="173.3" y="965" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="176.27" y="975.5" ></text>
</g>
<g >
<title>std::_Placeholder&lt;2&gt;&amp; std::__get_helper&lt;2ul, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (2,008,020 samples, 0.01%)</title><rect x="840.0" y="1013" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="843.01" y="1023.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~tuple (3,800,935 samples, 0.02%)</title><rect x="72.5" y="965" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="75.51" y="975.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (17,065,438 samples, 0.09%)</title><rect x="918.3" y="789" width="1.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="921.32" y="799.5" ></text>
</g>
<g >
<title>void std::__fill_a&lt;char*, char&gt; (11,666,953 samples, 0.06%)</title><rect x="211.4" y="837" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="214.37" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (5,683,444 samples, 0.03%)</title><rect x="919.0" y="773" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="922.01" y="783.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (4,871,706 samples, 0.03%)</title><rect x="89.4" y="933" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="92.39" y="943.5" ></text>
</g>
<g >
<title>tty_write (10,781,732 samples, 0.06%)</title><rect x="339.8" y="933" width="0.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="342.83" y="943.5" ></text>
</g>
<g >
<title> (3,035,635 samples, 0.02%)</title><rect x="61.8" y="981" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="64.85" y="991.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (1,037,593,596 samples, 5.34%)</title><rect x="108.2" y="901" width="63.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="111.15" y="911.5" >void s..</text>
</g>
<g >
<title>std::tuple_element&lt;2ul, std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; &gt;::type&amp;&amp; std::get&lt;2ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; (3,908,174 samples, 0.02%)</title><rect x="839.0" y="1013" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="841.95" y="1023.5" ></text>
</g>
<g >
<title>operator new (3,044,903 samples, 0.02%)</title><rect x="421.9" y="853" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="424.93" y="863.5" ></text>
</g>
<g >
<title>mutex_unlock (6,974,332 samples, 0.04%)</title><rect x="33.9" y="1189" width="0.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="36.94" y="1199.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (3,730,971 samples, 0.02%)</title><rect x="1067.3" y="885" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1070.31" y="895.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3,013,959 samples, 0.02%)</title><rect x="243.4" y="901" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="246.39" y="911.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (13,404,403,257 samples, 69.01%)</title><rect x="47.0" y="1221" width="814.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="50.03" y="1231.5" >void std::__invoke_impl&lt;void, std::_Bind&lt;void </text>
</g>
<g >
<title>tty_write (6,655,170 samples, 0.03%)</title><rect x="438.0" y="741" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="441.03" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (2,915,833 samples, 0.02%)</title><rect x="906.9" y="821" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="909.88" y="831.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_put_node (6,972,603 samples, 0.04%)</title><rect x="614.1" y="885" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="617.11" y="895.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (474,047,296 samples, 2.44%)</title><rect x="896.0" y="1093" width="28.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="899.01" y="1103.5" >vo..</text>
</g>
<g >
<title>enqueue_timer (7,762,652 samples, 0.04%)</title><rect x="186.5" y="741" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="189.52" y="751.5" ></text>
</g>
<g >
<title>__refill_stock (3,975,175 samples, 0.02%)</title><rect x="820.6" y="693" width="0.3" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="823.64" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, bool&gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (102,876,435 samples, 0.53%)</title><rect x="498.6" y="869" width="6.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="501.64" y="879.5" ></text>
</g>
<g >
<title>xa_load (18,415,603 samples, 0.09%)</title><rect x="301.6" y="885" width="1.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="304.56" y="895.5" ></text>
</g>
<g >
<title>void  (2,033,628 samples, 0.01%)</title><rect x="74.8" y="965" width="0.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="77.79" y="975.5" ></text>
</g>
<g >
<title>__mod_memcg_state (28,053,452 samples, 0.14%)</title><rect x="378.1" y="853" width="1.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="381.11" y="863.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int&amp;&amp;&gt;::_Tuple_impl&lt;int&gt; (4,915,139 samples, 0.03%)</title><rect x="58.2" y="1013" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="61.17" y="1023.5" ></text>
</g>
<g >
<title>__ip_local_out (3,956,042 samples, 0.02%)</title><rect x="675.0" y="661" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="677.97" y="671.5" ></text>
</g>
<g >
<title>page_counter_try_charge (28,281,850 samples, 0.15%)</title><rect x="766.8" y="213" width="1.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="769.79" y="223.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (4,956,259 samples, 0.03%)</title><rect x="208.4" y="917" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="211.45" y="927.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (5,903,732 samples, 0.03%)</title><rect x="155.7" y="613" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="158.69" y="623.5" ></text>
</g>
<g >
<title>queue_work_on (2,896,717 samples, 0.01%)</title><rect x="340.3" y="821" width="0.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="343.31" y="831.5" ></text>
</g>
<g >
<title>rcu_core (6,048,797 samples, 0.03%)</title><rect x="784.1" y="485" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="787.11" y="495.5" ></text>
</g>
<g >
<title>webserver::Channel::tie (3,964,541 samples, 0.02%)</title><rect x="169.6" y="821" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="172.64" y="831.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (203,371,314 samples, 1.05%)</title><rect x="112.9" y="773" width="12.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="115.92" y="783.5" ></text>
</g>
<g >
<title>process_output_block (1,831,114 samples, 0.01%)</title><rect x="479.6" y="677" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="482.65" y="687.5" ></text>
</g>
<g >
<title>sk_stop_timer (6,842,554 samples, 0.04%)</title><rect x="977.2" y="773" width="0.4" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="980.22" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (32,383,379 samples, 0.17%)</title><rect x="76.6" y="981" width="2.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="79.63" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_destroy_node (4,769,922 samples, 0.02%)</title><rect x="613.3" y="901" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="616.34" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (15,737,522 samples, 0.08%)</title><rect x="577.8" y="965" width="0.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="580.76" y="975.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (2,025,441 samples, 0.01%)</title><rect x="558.7" y="837" width="0.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="561.67" y="847.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (53,774,908 samples, 0.28%)</title><rect x="1155.6" y="789" width="3.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1158.63" y="799.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, false&gt;::_M_head (1,823,265 samples, 0.01%)</title><rect x="838.3" y="965" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="841.33" y="975.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1,777,943 samples, 0.01%)</title><rect x="824.1" y="933" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="827.06" y="943.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::pair (7,889,583 samples, 0.04%)</title><rect x="98.2" y="885" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="101.17" y="895.5" ></text>
</g>
<g >
<title>webserver::EventLoop::isInLoopThread (3,838,747 samples, 0.02%)</title><rect x="615.7" y="965" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="618.72" y="975.5" ></text>
</g>
<g >
<title>security_file_free (15,796,163 samples, 0.08%)</title><rect x="961.2" y="901" width="0.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="964.17" y="911.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (11,698,020 samples, 0.06%)</title><rect x="906.3" y="917" width="0.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="909.34" y="927.5" ></text>
</g>
<g >
<title>webserver::EventLoop::queueInLoop (131,518,784 samples, 0.68%)</title><rect x="848.7" y="1109" width="8.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="851.66" y="1119.5" ></text>
</g>
<g >
<title>aa_file_perm (5,990,409 samples, 0.03%)</title><rect x="623.3" y="789" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="626.30" y="799.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,931,443 samples, 0.01%)</title><rect x="586.6" y="949" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="589.59" y="959.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (3,162,750,819 samples, 16.28%)</title><rect x="58.7" y="1045" width="192.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="61.70" y="1055.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator++ (1,931,853 samples, 0.01%)</title><rect x="584.6" y="965" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="587.61" y="975.5" ></text>
</g>
<g >
<title>make_kuid (4,954,109 samples, 0.03%)</title><rect x="290.6" y="933" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="293.64" y="943.5" ></text>
</g>
<g >
<title>call_function_single_prep_ipi (2,007,029 samples, 0.01%)</title><rect x="757.7" y="165" width="0.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="760.67" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (1,883,145 samples, 0.01%)</title><rect x="592.7" y="869" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="595.65" y="879.5" ></text>
</g>
<g >
<title>malloc (7,770,234 samples, 0.04%)</title><rect x="502.3" y="757" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="505.34" y="767.5" ></text>
</g>
<g >
<title>ep_insert (247,174,110 samples, 1.27%)</title><rect x="136.9" y="533" width="15.0" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="139.89" y="543.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (19,962,551 samples, 0.10%)</title><rect x="883.2" y="1237" width="1.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="886.23" y="1247.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (2,952,440 samples, 0.02%)</title><rect x="908.2" y="853" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="911.22" y="863.5" ></text>
</g>
<g >
<title>kmem_cache_free (49,617,047 samples, 0.26%)</title><rect x="988.8" y="773" width="3.0" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="991.76" y="783.5" ></text>
</g>
<g >
<title>page_counter_try_charge (27,978,829 samples, 0.14%)</title><rect x="1145.1" y="437" width="1.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1148.07" y="447.5" ></text>
</g>
<g >
<title>__mod_memcg_state (18,902,132 samples, 0.10%)</title><rect x="1171.8" y="933" width="1.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1174.81" y="943.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::~__new_allocator (1,961,837 samples, 0.01%)</title><rect x="1019.0" y="965" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1022.02" y="975.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::sendInLoop (3,433,096,617 samples, 17.68%)</title><rect x="616.4" y="965" width="208.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="619.43" y="975.5" >webserver::TcpConnection::s..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;true&gt;::__destroy&lt;char*&gt; (2,717,633 samples, 0.01%)</title><rect x="1019.2" y="981" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1022.25" y="991.5" ></text>
</g>
<g >
<title>refill_stock (4,923,440 samples, 0.03%)</title><rect x="315.5" y="885" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="318.55" y="895.5" ></text>
</g>
<g >
<title>__tty_buffer_request_room (5,853,126 samples, 0.03%)</title><rect x="459.2" y="597" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="462.17" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Rb_tree_impl (2,056,303 samples, 0.01%)</title><rect x="570.4" y="917" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="573.43" y="927.5" ></text>
</g>
<g >
<title>__call_rcu_common (4,822,042 samples, 0.02%)</title><rect x="949.1" y="773" width="0.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="952.12" y="783.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3,792,901 samples, 0.02%)</title><rect x="229.6" y="949" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="232.64" y="959.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (2,022,778 samples, 0.01%)</title><rect x="322.4" y="917" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="325.36" y="927.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (71,083,812 samples, 0.37%)</title><rect x="554.8" y="901" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="557.82" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_iterator (3,734,132 samples, 0.02%)</title><rect x="592.9" y="917" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="595.89" y="927.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2,983,912 samples, 0.02%)</title><rect x="495.8" y="885" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="498.82" y="895.5" ></text>
</g>
<g >
<title>bit_waitqueue (3,949,481 samples, 0.02%)</title><rect x="952.9" y="805" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="955.94" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_S_key (3,979,823 samples, 0.02%)</title><rect x="1052.2" y="901" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1055.22" y="911.5" ></text>
</g>
<g >
<title>__memcpy (4,814,320 samples, 0.02%)</title><rect x="458.6" y="613" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="461.60" y="623.5" ></text>
</g>
<g >
<title>__tcp_select_window (4,043,814 samples, 0.02%)</title><rect x="1093.7" y="933" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1096.65" y="943.5" ></text>
</g>
<g >
<title>mod_memcg_state (2,039,785 samples, 0.01%)</title><rect x="940.1" y="789" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="943.05" y="799.5" ></text>
</g>
<g >
<title>std::function&lt;void  (19,193,684 samples, 0.10%)</title><rect x="1023.6" y="1093" width="1.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1026.61" y="1103.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::~shared_ptr (3,891,393 samples, 0.02%)</title><rect x="906.8" y="837" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="909.82" y="847.5" ></text>
</g>
<g >
<title>operator new (4,798,087 samples, 0.02%)</title><rect x="87.0" y="901" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="90.03" y="911.5" ></text>
</g>
<g >
<title>kmem_cache_free (3,979,362 samples, 0.02%)</title><rect x="1154.7" y="661" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1157.72" y="671.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3,015,641 samples, 0.02%)</title><rect x="88.3" y="949" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="91.34" y="959.5" ></text>
</g>
<g >
<title> (3,757,499 samples, 0.02%)</title><rect x="1047.7" y="917" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1050.67" y="927.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (3,550,531 samples, 0.02%)</title><rect x="825.9" y="949" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="828.90" y="959.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::sendInLoop (6,808,237 samples, 0.04%)</title><rect x="825.0" y="981" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="828.01" y="991.5" ></text>
</g>
<g >
<title>calc_wheel_index (1,926,485 samples, 0.01%)</title><rect x="1168.0" y="869" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1170.99" y="879.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,030,881 samples, 0.01%)</title><rect x="906.2" y="917" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="909.22" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~_Tuple_impl (5,812,420 samples, 0.03%)</title><rect x="906.7" y="869" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="909.70" y="879.5" ></text>
</g>
<g >
<title>std::default_delete&lt;webserver::Channel&gt;::operator (68,168,767 samples, 0.35%)</title><rect x="1011.4" y="997" width="4.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1014.40" y="1007.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;void  (1,996,757 samples, 0.01%)</title><rect x="902.9" y="965" width="0.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="905.89" y="975.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::~ConnBuffer (46,902,410 samples, 0.24%)</title><rect x="1016.7" y="1013" width="2.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1019.74" y="1023.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (1,991,941 samples, 0.01%)</title><rect x="899.5" y="1013" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="902.49" y="1023.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_get_Tp_allocator (2,964,448 samples, 0.02%)</title><rect x="1017.7" y="981" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1020.70" y="991.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,923,419 samples, 0.03%)</title><rect x="891.7" y="1141" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="894.69" y="1151.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (3,045,464 samples, 0.02%)</title><rect x="607.2" y="853" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="610.24" y="863.5" ></text>
</g>
<g >
<title>std::function&lt;void  (21,192,964 samples, 0.11%)</title><rect x="1187.8" y="1221" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1190.82" y="1231.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,958,962,497 samples, 25.53%)</title><rect x="882.3" y="1285" width="301.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="885.27" y="1295.5" >std::function&lt;void </text>
</g>
<g >
<title>webserver::TimeStamp&amp;&amp; std::forward&lt;webserver::TimeStamp&amp;&amp;&gt; (1,948,472 samples, 0.01%)</title><rect x="839.3" y="1013" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="842.31" y="1023.5" ></text>
</g>
<g >
<title>d_set_d_op (8,612,038 samples, 0.04%)</title><rect x="317.3" y="933" width="0.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="320.33" y="943.5" ></text>
</g>
<g >
<title>operator new (1,951,974 samples, 0.01%)</title><rect x="826.9" y="933" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="829.89" y="943.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::get (7,613,197 samples, 0.04%)</title><rect x="198.8" y="933" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="201.77" y="943.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (2,972,273 samples, 0.02%)</title><rect x="98.5" y="853" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="101.47" y="863.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::nameString[abi:cxx11] (10,663,283 samples, 0.05%)</title><rect x="920.6" y="837" width="0.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="923.65" y="847.5" ></text>
</g>
<g >
<title>__mod_memcg_state (3,984,846 samples, 0.02%)</title><rect x="303.6" y="869" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="306.61" y="879.5" ></text>
</g>
<g >
<title>operator new (2,849,682 samples, 0.01%)</title><rect x="605.4" y="917" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="608.41" y="927.5" ></text>
</g>
<g >
<title>do_epoll_wait (247,036,950 samples, 1.27%)</title><rect x="19.4" y="1221" width="15.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="22.39" y="1231.5" ></text>
</g>
<g >
<title>skb_release_data (35,250,995 samples, 0.18%)</title><rect x="1152.8" y="693" width="2.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1155.82" y="703.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (2,018,839 samples, 0.01%)</title><rect x="224.3" y="837" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="227.26" y="847.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::__normal_iterator (2,992,776 samples, 0.02%)</title><rect x="37.7" y="1285" width="0.2" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="40.70" y="1295.5" ></text>
</g>
<g >
<title>webserver::Channel::enableReading (708,613,076 samples, 3.65%)</title><rect x="126.6" y="821" width="43.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="129.59" y="831.5" >webs..</text>
</g>
<g >
<title>tcp_rearm_rto.part.0 (26,430,752 samples, 0.14%)</title><rect x="1166.7" y="917" width="1.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1169.69" y="927.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, webserver::TcpConnection*&gt;::_M_head (1,915,409 samples, 0.01%)</title><rect x="860.0" y="1141" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="863.04" y="1151.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::data (2,023,058 samples, 0.01%)</title><rect x="412.2" y="981" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="415.18" y="991.5" ></text>
</g>
<g >
<title>ip_queue_xmit (2,913,500 samples, 0.02%)</title><rect x="1163.9" y="949" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1166.90" y="959.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (3,938,199 samples, 0.02%)</title><rect x="208.0" y="885" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="211.02" y="895.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, webserver::Channel*, false&gt;::_M_head (1,885,052 samples, 0.01%)</title><rect x="126.4" y="709" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="129.42" y="719.5" ></text>
</g>
<g >
<title>consume_obj_stock (3,804,030 samples, 0.02%)</title><rect x="303.4" y="885" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="306.38" y="895.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, bool&gt; std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; (119,730,318 samples, 0.62%)</title><rect x="161.0" y="597" width="7.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="163.99" y="607.5" ></text>
</g>
<g >
<title>_int_malloc (1,922,116 samples, 0.01%)</title><rect x="245.4" y="853" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="248.42" y="863.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt; std::forward_as_tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, webserver::ConnBuffer*, webserver::TimeStamp&gt; (25,107,855 samples, 0.13%)</title><rect x="399.9" y="1045" width="1.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="402.91" y="1055.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel (15,782,203 samples, 0.08%)</title><rect x="975.7" y="789" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="978.73" y="799.5" ></text>
</g>
<g >
<title>__refill_stock (23,586,957 samples, 0.12%)</title><rect x="1147.0" y="421" width="1.4" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1149.95" y="431.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (746,058,332 samples, 3.84%)</title><rect x="1106.6" y="661" width="45.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1109.62" y="671.5" >__ne..</text>
</g>
<g >
<title>__mutex_init (2,007,967 samples, 0.01%)</title><rect x="309.0" y="949" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="311.98" y="959.5" ></text>
</g>
<g >
<title>__tty_insert_flip_string_flags (2,968,208 samples, 0.02%)</title><rect x="453.9" y="613" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="456.87" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::max_size (2,879,318 samples, 0.01%)</title><rect x="878.9" y="1253" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="881.92" y="1263.5" ></text>
</g>
<g >
<title>ip_local_out (1,947,144,088 samples, 10.03%)</title><rect x="674.8" y="677" width="118.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="677.79" y="687.5" >ip_local_out</text>
</g>
<g >
<title>webserver::HttpParser* boost::any_cast&lt;webserver::HttpParser&gt; (1,949,039 samples, 0.01%)</title><rect x="405.4" y="997" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="408.44" y="1007.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (2,024,630 samples, 0.01%)</title><rect x="881.9" y="1269" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="884.92" y="1279.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (483,710,411 samples, 2.49%)</title><rect x="895.4" y="1109" width="29.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="898.42" y="1119.5" >st..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_key (1,998,267 samples, 0.01%)</title><rect x="501.6" y="821" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="504.58" y="831.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (1,931,139 samples, 0.01%)</title><rect x="772.5" y="309" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="775.53" y="319.5" ></text>
</g>
<g >
<title>operator new (1,965,574 samples, 0.01%)</title><rect x="848.3" y="1061" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="851.31" y="1071.5" ></text>
</g>
<g >
<title>__napi_poll (772,511,407 samples, 3.98%)</title><rect x="1105.2" y="709" width="47.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1108.24" y="719.5" >__na..</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (19,093,920 samples, 0.10%)</title><rect x="430.2" y="901" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="433.22" y="911.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,023,631 samples, 0.01%)</title><rect x="900.3" y="981" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="903.34" y="991.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (6,884,302 samples, 0.04%)</title><rect x="564.0" y="949" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="567.02" y="959.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (1,956,233 samples, 0.01%)</title><rect x="374.7" y="837" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="377.70" y="847.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (3,980,890 samples, 0.02%)</title><rect x="12.2" y="1317" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="15.19" y="1327.5" ></text>
</g>
<g >
<title>process_backlog (1,889,715 samples, 0.01%)</title><rect x="1155.0" y="709" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1157.97" y="719.5" ></text>
</g>
<g >
<title>llist_add_batch (22,395,836 samples, 0.12%)</title><rect x="757.8" y="165" width="1.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="760.79" y="175.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt;::tuple&lt;true, true&gt; (6,596,184 samples, 0.03%)</title><rect x="200.1" y="917" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="203.08" y="927.5" ></text>
</g>
<g >
<title>inet_csk_clear_xmit_timers (22,587,187 samples, 0.12%)</title><rect x="976.7" y="789" width="1.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="979.69" y="799.5" ></text>
</g>
<g >
<title>woken_wake_function (6,887,927 samples, 0.04%)</title><rect x="760.7" y="245" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="763.75" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (8,811,466 samples, 0.05%)</title><rect x="611.9" y="933" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="614.91" y="943.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (9,849,042 samples, 0.05%)</title><rect x="1184.3" y="1269" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1187.32" y="1279.5" ></text>
</g>
<g >
<title>webserver::sockets::getPeerAddr (9,593,119 samples, 0.05%)</title><rect x="241.0" y="949" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="243.99" y="959.5" ></text>
</g>
<g >
<title>__x64_sys_setsockopt (3,746,101 samples, 0.02%)</title><rect x="177.7" y="917" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="180.67" y="927.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8,546,479 samples, 0.04%)</title><rect x="206.5" y="885" width="0.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="209.52" y="895.5" ></text>
</g>
<g >
<title>malloc (2,849,682 samples, 0.01%)</title><rect x="605.4" y="901" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="608.41" y="911.5" ></text>
</g>
<g >
<title>sched_clock_cpu (5,071,503 samples, 0.03%)</title><rect x="1139.6" y="389" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1142.62" y="399.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,780,480 samples, 0.02%)</title><rect x="1178.4" y="1109" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1181.45" y="1119.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (7,271,034,396 samples, 37.44%)</title><rect x="399.1" y="1061" width="441.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="402.10" y="1071.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title> (1,789,270 samples, 0.01%)</title><rect x="824.2" y="933" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="827.23" y="943.5" ></text>
</g>
<g >
<title>__get_user_4 (3,005,409 samples, 0.02%)</title><rect x="257.5" y="997" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="260.52" y="1007.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (16,375,010 samples, 0.08%)</title><rect x="243.1" y="933" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="246.09" y="943.5" ></text>
</g>
<g >
<title>sock_alloc (329,127,929 samples, 1.69%)</title><rect x="286.8" y="997" width="20.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="289.76" y="1007.5" ></text>
</g>
<g >
<title>operator new (2,962,286 samples, 0.02%)</title><rect x="830.5" y="885" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="833.53" y="895.5" ></text>
</g>
<g >
<title>validate_xmit_skb (17,690,393 samples, 0.09%)</title><rect x="790.6" y="565" width="1.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="793.62" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (1,990,740 samples, 0.01%)</title><rect x="911.4" y="853" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="914.41" y="863.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (19,462,292 samples, 0.10%)</title><rect x="343.1" y="1109" width="1.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="346.05" y="1119.5" ></text>
</g>
<g >
<title>webserver::Logger::Logger (4,777,795 samples, 0.02%)</title><rect x="1180.2" y="1109" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1183.15" y="1119.5" ></text>
</g>
<g >
<title>boost::any::operator= (33,640,341 samples, 0.17%)</title><rect x="121.6" y="661" width="2.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="124.63" y="671.5" ></text>
</g>
<g >
<title> (5,930,553 samples, 0.03%)</title><rect x="827.8" y="949" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="830.77" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8,863,551 samples, 0.05%)</title><rect x="847.7" y="1061" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="850.65" y="1071.5" ></text>
</g>
<g >
<title>operator delete (3,832,791 samples, 0.02%)</title><rect x="518.8" y="917" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="521.82" y="927.5" ></text>
</g>
<g >
<title>tcp_set_keepalive (61,018,676 samples, 0.31%)</title><rect x="184.0" y="821" width="3.7" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="186.99" y="831.5" ></text>
</g>
<g >
<title>security_socket_shutdown (3,502,871 samples, 0.02%)</title><rect x="1177.6" y="1045" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1180.65" y="1055.5" ></text>
</g>
<g >
<title>std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::size (1,849,366 samples, 0.01%)</title><rect x="879.1" y="1253" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="882.10" y="1263.5" ></text>
</g>
<g >
<title>rcu_core_si (2,002,360 samples, 0.01%)</title><rect x="476.3" y="517" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="479.31" y="527.5" ></text>
</g>
<g >
<title>locks_remove_file (3,943,123 samples, 0.02%)</title><rect x="960.4" y="901" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="963.42" y="911.5" ></text>
</g>
<g >
<title>inet_sendmsg (3,997,566 samples, 0.02%)</title><rect x="622.4" y="837" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="625.43" y="847.5" ></text>
</g>
<g >
<title>bool boost::typeindex::operator==&lt;boost::typeindex::stl_type_index, std::type_info&gt; (17,753,172 samples, 0.09%)</title><rect x="526.5" y="965" width="1.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="529.51" y="975.5" ></text>
</g>
<g >
<title>webserver::TcpServer*&amp; std::__get_helper&lt;0ul, webserver::TcpServer*, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; (1,980,707 samples, 0.01%)</title><rect x="921.6" y="869" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="924.65" y="879.5" ></text>
</g>
<g >
<title>sock_poll (63,234,827 samples, 0.33%)</title><rect x="28.5" y="1157" width="3.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="31.49" y="1167.5" ></text>
</g>
<g >
<title>webserver::Channel*&amp; std::__get_helper&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (3,701,670 samples, 0.02%)</title><rect x="1011.1" y="965" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1014.12" y="975.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (2,932,583 samples, 0.02%)</title><rect x="565.0" y="901" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="568.03" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (38,979,838 samples, 0.20%)</title><rect x="502.0" y="821" width="2.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="505.00" y="831.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (9,707,949 samples, 0.05%)</title><rect x="513.2" y="853" width="0.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="516.23" y="863.5" ></text>
</g>
<g >
<title>memcpy@plt (1,995,099 samples, 0.01%)</title><rect x="920.9" y="821" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="923.88" y="831.5" ></text>
</g>
<g >
<title>cubictcp_cong_avoid (4,917,298 samples, 0.03%)</title><rect x="637.4" y="709" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="640.36" y="719.5" ></text>
</g>
<g >
<title>__tcp_close (226,143,728 samples, 1.16%)</title><rect x="966.9" y="837" width="13.7" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="969.88" y="847.5" ></text>
</g>
<g >
<title>kmalloc_reserve (3,695,581 samples, 0.02%)</title><rect x="815.2" y="757" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="818.24" y="767.5" ></text>
</g>
<g >
<title>lock_sock_nested (2,009,920 samples, 0.01%)</title><rect x="272.1" y="965" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="275.10" y="975.5" ></text>
</g>
<g >
<title>__xfrm_policy_check2.constprop.0 (9,813,826 samples, 0.05%)</title><rect x="710.1" y="341" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="713.13" y="351.5" ></text>
</g>
<g >
<title>sk_reset_timer (24,461,971 samples, 0.13%)</title><rect x="1166.8" y="901" width="1.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1169.81" y="911.5" ></text>
</g>
<g >
<title>ipv4_dst_check (2,871,058 samples, 0.01%)</title><rect x="674.6" y="661" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="677.61" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;webserver::Channel**, std::vector&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt; &gt;::operator* (3,035,935 samples, 0.02%)</title><rect x="15.3" y="1301" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="18.32" y="1311.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::~TcpConnection (9,017,091 samples, 0.05%)</title><rect x="1020.4" y="1029" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1023.36" y="1039.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rdx (2,033,600 samples, 0.01%)</title><rect x="457.0" y="645" width="0.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="459.95" y="655.5" ></text>
</g>
<g >
<title>x64_sys_call (793,884,867 samples, 4.09%)</title><rect x="347.8" y="1077" width="48.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="350.75" y="1087.5" >x64_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (1,961,047 samples, 0.01%)</title><rect x="505.5" y="869" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="508.45" y="879.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (13,240,925 samples, 0.07%)</title><rect x="496.0" y="885" width="0.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="499.00" y="895.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer::retrieveTo (4,864,130 samples, 0.03%)</title><rect x="525.9" y="981" width="0.3" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="528.87" y="991.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (24,835,055 samples, 0.13%)</title><rect x="882.9" y="1269" width="1.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="885.94" y="1279.5" ></text>
</g>
<g >
<title>tcp_close (525,630,908 samples, 2.71%)</title><rect x="965.9" y="853" width="32.0" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="968.94" y="863.5" >tc..</text>
</g>
<g >
<title>lock_sock_nested (17,851,673 samples, 0.09%)</title><rect x="359.7" y="933" width="1.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="362.69" y="943.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (4,024,758 samples, 0.02%)</title><rect x="997.6" y="837" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1000.63" y="847.5" ></text>
</g>
<g >
<title>loopback_xmit (59,713,342 samples, 0.31%)</title><rect x="785.6" y="549" width="3.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="788.61" y="559.5" ></text>
</g>
<g >
<title>release_sock (13,639,722 samples, 0.07%)</title><rect x="1078.7" y="1013" width="0.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1081.72" y="1023.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (2,879,614 samples, 0.01%)</title><rect x="665.8" y="741" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="668.79" y="751.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;webserver::Channel&gt;, true&gt;::_M_head (7,838,984 samples, 0.04%)</title><rect x="1015.9" y="933" width="0.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1018.90" y="943.5" ></text>
</g>
<g >
<title>apparmor_file_permission (10,566,240 samples, 0.05%)</title><rect x="623.0" y="805" width="0.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="626.03" y="815.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3,738,302 samples, 0.02%)</title><rect x="918.4" y="757" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="921.37" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_drop_node (1,986,478 samples, 0.01%)</title><rect x="912.9" y="805" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="915.86" y="815.5" ></text>
</g>
<g >
<title>__getsockopt (1,922,851 samples, 0.01%)</title><rect x="339.1" y="1125" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="342.14" y="1135.5" ></text>
</g>
<g >
<title>webserver::Channel::update (550,627,370 samples, 2.84%)</title><rect x="1022.0" y="1125" width="33.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1025.03" y="1135.5" >we..</text>
</g>
<g >
<title>default_wake_function (3,005,417 samples, 0.02%)</title><rect x="1133.0" y="453" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1136.01" y="463.5" ></text>
</g>
<g >
<title>mod_timer (4,671,235 samples, 0.02%)</title><rect x="1170.6" y="917" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1173.58" y="927.5" ></text>
</g>
<g >
<title>__fdget (7,736,268 samples, 0.04%)</title><rect x="1176.9" y="1013" width="0.4" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1179.87" y="1023.5" ></text>
</g>
<g >
<title>std::tuple&lt;webserver::TcpConnection*&gt;::tuple&lt;webserver::TcpConnection*, true, true&gt; (1,921,424 samples, 0.01%)</title><rect x="847.1" y="1077" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="850.05" y="1087.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;::~tuple (8,720,413 samples, 0.04%)</title><rect x="84.5" y="885" width="0.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="87.51" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (11,752,597 samples, 0.06%)</title><rect x="834.6" y="901" width="0.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="837.65" y="911.5" ></text>
</g>
<g >
<title>webserver::HttpServer::onMessage (7,091,719,576 samples, 36.51%)</title><rect x="406.3" y="997" width="430.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="409.28" y="1007.5" >webserver::HttpServer::onMessage</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (5,937,914 samples, 0.03%)</title><rect x="873.6" y="1221" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="876.64" y="1231.5" ></text>
</g>
<g >
<title>pty_write_room (5,995,713 samples, 0.03%)</title><rect x="477.3" y="629" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="480.33" y="639.5" ></text>
</g>
<g >
<title>_int_free (2,959,586 samples, 0.02%)</title><rect x="612.6" y="949" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="615.62" y="959.5" ></text>
</g>
<g >
<title>calc_wheel_index (2,000,671 samples, 0.01%)</title><rect x="1123.2" y="469" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1126.16" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header (2,056,303 samples, 0.01%)</title><rect x="570.4" y="901" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="573.43" y="911.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,018,488 samples, 0.01%)</title><rect x="613.7" y="885" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="616.74" y="895.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::shared_ptr&lt;webserver::TcpConnection&gt;, false&gt;::_Head_base (16,335,420 samples, 0.08%)</title><rect x="907.6" y="885" width="1.0" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="910.59" y="895.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_S_right (3,958,266 samples, 0.02%)</title><rect x="95.3" y="949" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="98.25" y="959.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (19,118,399 samples, 0.10%)</title><rect x="245.3" y="885" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="248.30" y="895.5" ></text>
</g>
<g >
<title>mod_timer (1,824,890 samples, 0.01%)</title><rect x="799.6" y="677" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="802.58" y="687.5" ></text>
</g>
<g >
<title>apparmor_sock_graft (23,482,538 samples, 0.12%)</title><rect x="262.2" y="949" width="1.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="265.15" y="959.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (3,986,711 samples, 0.02%)</title><rect x="1007.4" y="1013" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1010.36" y="1023.5" ></text>
</g>
<g >
<title>[unknown] (31,944,768 samples, 0.16%)</title><rect x="10.8" y="1381" width="1.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.77" y="1391.5" ></text>
</g>
<g >
<title>sk_forced_mem_schedule (26,759,338 samples, 0.14%)</title><rect x="1171.6" y="981" width="1.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1174.57" y="991.5" ></text>
</g>
<g >
<title>page_counter_try_charge (6,001,370 samples, 0.03%)</title><rect x="304.3" y="869" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="307.34" y="879.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::handleClose (4,771,882 samples, 0.02%)</title><rect x="338.8" y="1141" width="0.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="341.85" y="1151.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (4,924,630 samples, 0.03%)</title><rect x="550.2" y="885" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="553.19" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (146,344,970 samples, 0.75%)</title><rect x="209.4" y="949" width="8.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="212.41" y="959.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl&amp;&gt;::type&amp;&amp; std::move&lt;std::_Vector_base&lt;webserver::Channel*, std::allocator&lt;webserver::Channel*&gt; &gt;::_Vector_impl&amp;&gt; (1,994,896 samples, 0.01%)</title><rect x="38.2" y="1253" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="41.24" y="1263.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (8,658,951 samples, 0.04%)</title><rect x="157.7" y="549" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="160.72" y="559.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;webserver::TcpConnection&gt;::shared_from_this (6,459,427 samples, 0.03%)</title><rect x="111.4" y="821" width="0.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="114.44" y="831.5" ></text>
</g>
<g >
<title>rb_erase (8,778,391 samples, 0.05%)</title><rect x="637.7" y="709" width="0.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="640.72" y="719.5" ></text>
</g>
<g >
<title>__put_user_nocheck_4 (7,702,593 samples, 0.04%)</title><rect x="222.4" y="853" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="225.37" y="863.5" ></text>
</g>
<g >
<title>__alloc_skb (35,945,343 samples, 0.19%)</title><rect x="720.8" y="261" width="2.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="723.84" y="271.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (1,926,037 samples, 0.01%)</title><rect x="1058.0" y="1045" width="0.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1061.04" y="1055.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_deallocate (16,700,048 samples, 0.09%)</title><rect x="1017.9" y="965" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1020.94" y="975.5" ></text>
</g>
<g >
<title>ep_poll (231,136,582 samples, 1.19%)</title><rect x="20.3" y="1205" width="14.1" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="23.33" y="1215.5" ></text>
</g>
<g >
<title>x64_sys_call (768,506,139 samples, 3.96%)</title><rect x="436.9" y="789" width="46.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="439.91" y="799.5" >x64_..</text>
</g>
<g >
<title>std::ostream::flush (11,769,970 samples, 0.06%)</title><rect x="522.0" y="917" width="0.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="525.05" y="927.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (1,804,565,628 samples, 9.29%)</title><rect x="414.0" y="933" width="109.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="416.97" y="943.5" >void std::__i..</text>
</g>
<g >
<title>ep_done_scan (12,510,003 samples, 0.06%)</title><rect x="26.3" y="1173" width="0.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="29.28" y="1183.5" ></text>
</g>
<g >
<title>__timer_delete_sync (1,899,238 samples, 0.01%)</title><rect x="711.2" y="309" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="714.22" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; const*, std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt; &gt;::base (2,025,089 samples, 0.01%)</title><rect x="172.5" y="949" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="175.46" y="959.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::get (7,944,106 samples, 0.04%)</title><rect x="1071.9" y="1109" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1074.92" y="1119.5" ></text>
</g>
<g >
<title>webserver::Acceptor::acceptableCallback (3,742,581 samples, 0.02%)</title><rect x="859.1" y="1157" width="0.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="862.10" y="1167.5" ></text>
</g>
<g >
<title>__memcpy (7,673,434 samples, 0.04%)</title><rect x="453.3" y="613" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="456.35" y="623.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;void  (3,934,694 samples, 0.02%)</title><rect x="128.1" y="741" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="131.07" y="751.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (11,595,843 samples, 0.06%)</title><rect x="129.4" y="693" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="132.45" y="703.5" ></text>
</g>
<g >
<title>try_to_wake_up (193,107,897 samples, 0.99%)</title><rect x="748.1" y="197" width="11.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="751.12" y="207.5" ></text>
</g>
<g >
<title>security_file_permission (9,794,009 samples, 0.05%)</title><rect x="394.9" y="1013" width="0.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="397.87" y="1023.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (5,867,534 samples, 0.03%)</title><rect x="848.2" y="1093" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="851.19" y="1103.5" ></text>
</g>
<g >
<title>sock_alloc_inode (7,778,985 samples, 0.04%)</title><rect x="306.3" y="965" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="309.28" y="975.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (3,887,589 samples, 0.02%)</title><rect x="583.5" y="965" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="586.51" y="975.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,851,213 samples, 0.02%)</title><rect x="848.3" y="1077" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="851.25" y="1087.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;void&gt;::shared_ptr (1,972,224 samples, 0.01%)</title><rect x="42.2" y="1285" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="45.23" y="1295.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (1,940,947 samples, 0.01%)</title><rect x="1066.7" y="885" width="0.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1069.73" y="895.5" ></text>
</g>
<g >
<title>apparmor_socket_getsockname (24,149,548 samples, 0.12%)</title><rect x="226.6" y="837" width="1.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="229.63" y="847.5" ></text>
</g>
<g >
<title>inet_getname (29,872,993 samples, 0.15%)</title><rect x="281.5" y="997" width="1.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="284.54" y="1007.5" ></text>
</g>
<g >
<title>__init_rwsem (4,861,249 samples, 0.03%)</title><rect x="287.7" y="949" width="0.3" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="290.68" y="959.5" ></text>
</g>
<g >
<title>webserver::HttpRequest::resolveVersion (3,882,855 samples, 0.02%)</title><rect x="565.9" y="949" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="568.93" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_to_string_view (3,939,745 samples, 0.02%)</title><rect x="192.4" y="965" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="195.42" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (6,616,770 samples, 0.03%)</title><rect x="591.3" y="949" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="594.35" y="959.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (10,875,079 samples, 0.06%)</title><rect x="864.4" y="1269" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="867.43" y="1279.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (6,790,683 samples, 0.03%)</title><rect x="426.2" y="901" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="429.16" y="911.5" ></text>
</g>
<g >
<title>x64_sys_call (1,185,965,293 samples, 6.11%)</title><rect x="932.3" y="965" width="72.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="935.32" y="975.5" >x64_sys_..</text>
</g>
<g >
<title>_raw_write_unlock_bh (3,963,160 samples, 0.02%)</title><rect x="968.8" y="821" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="971.81" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::data (3,949,543 samples, 0.02%)</title><rect x="532.3" y="965" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="535.28" y="975.5" ></text>
</g>
<g >
<title>read_tsc (5,949,147 samples, 0.03%)</title><rect x="772.8" y="293" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="775.77" y="303.5" ></text>
</g>
<g >
<title>netif_skb_features (4,856,846 samples, 0.03%)</title><rect x="1159.6" y="773" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1162.61" y="783.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (4,856,910 samples, 0.03%)</title><rect x="847.8" y="1029" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="850.83" y="1039.5" ></text>
</g>
<g >
<title>aa_inet_sock_perm (15,889,122 samples, 0.08%)</title><rect x="1175.6" y="997" width="1.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1178.62" y="1007.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::get_allocator (1,954,486 samples, 0.01%)</title><rect x="429.3" y="901" width="0.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="432.33" y="911.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;webserver::TcpConnection,  (15,644,281 samples, 0.08%)</title><rect x="103.2" y="917" width="1.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="106.23" y="927.5" ></text>
</g>
<g >
<title>check_stack_object (1,764,623 samples, 0.01%)</title><rect x="236.9" y="805" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="239.91" y="815.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (12,526,304 samples, 0.06%)</title><rect x="827.0" y="933" width="0.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="830.01" y="943.5" ></text>
</g>
<g >
<title>ip_local_out (163,767,474 samples, 0.84%)</title><rect x="726.6" y="213" width="10.0" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="729.62" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_valptr (2,823,580 samples, 0.01%)</title><rect x="1057.9" y="1045" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1060.87" y="1055.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (23,207,467 samples, 0.12%)</title><rect x="907.2" y="965" width="1.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="910.17" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_left (2,954,719 samples, 0.02%)</title><rect x="610.1" y="901" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="613.09" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (2,947,721 samples, 0.02%)</title><rect x="612.1" y="917" width="0.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="615.09" y="927.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,227,027,453 samples, 6.32%)</title><rect x="930.1" y="997" width="74.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="933.13" y="1007.5" >entry_SY..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,946,370 samples, 0.01%)</title><rect x="270.1" y="949" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="273.15" y="959.5" ></text>
</g>
<g >
<title>lock_sock_nested (4,786,064 samples, 0.02%)</title><rect x="282.4" y="981" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="285.43" y="991.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::~HttpResponse (42,059,596 samples, 0.22%)</title><rect x="612.4" y="981" width="2.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="615.44" y="991.5" ></text>
</g>
<g >
<title>apparmor_sk_free_security (25,203,217 samples, 0.13%)</title><rect x="992.6" y="757" width="1.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="995.64" y="767.5" ></text>
</g>
<g >
<title>mntput (6,629,946 samples, 0.03%)</title><rect x="960.7" y="901" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="963.66" y="911.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;, false&gt;::_M_head (2,831,759 samples, 0.01%)</title><rect x="923.5" y="981" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="926.46" y="991.5" ></text>
</g>
<g >
<title>tcp_grow_window (2,899,416 samples, 0.01%)</title><rect x="761.9" y="293" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="764.87" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_readv (13,850,718 samples, 0.07%)</title><rect x="345.4" y="1077" width="0.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="348.37" y="1087.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;webserver::http::Version&gt; &gt;, std::is_move_constructible&lt;webserver::http::Version&gt;, std::is_move_assignable&lt;webserver::http::Version&gt; &gt;::value, void&gt;::type std::swap&lt;webserver::http::Version&gt; (4,953,388 samples, 0.03%)</title><rect x="571.8" y="949" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="574.84" y="959.5" ></text>
</g>
<g >
<title>handle_softirqs (1,667,876,076 samples, 8.59%)</title><rect x="683.3" y="517" width="101.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="686.32" y="527.5" >handle_softi..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (7,869,135 samples, 0.04%)</title><rect x="850.7" y="1061" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="853.66" y="1071.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4,801,416 samples, 0.02%)</title><rect x="408.8" y="981" width="0.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="411.83" y="991.5" ></text>
</g>
<g >
<title>sock_def_readable (37,034,005 samples, 0.19%)</title><rect x="1128.0" y="501" width="2.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1130.95" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt; __gnu_cxx::__ops::__iter_comp_iter&lt;char const*&gt; (3,914,120 samples, 0.02%)</title><rect x="533.3" y="933" width="0.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="536.29" y="943.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt;, false&gt;::_Head_base&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (1,959,444 samples, 0.01%)</title><rect x="73.6" y="917" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="76.62" y="927.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (3,196,341,419 samples, 16.46%)</title><rect x="56.7" y="1061" width="194.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="59.72" y="1071.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (3,940,892 samples, 0.02%)</title><rect x="1052.6" y="885" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1055.58" y="895.5" ></text>
</g>
<g >
<title>__mod_memcg_state (16,338,395 samples, 0.08%)</title><rect x="763.7" y="213" width="1.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="766.73" y="223.5" ></text>
</g>
<g >
<title>bpf_sk_storage_free (7,865,650 samples, 0.04%)</title><rect x="995.7" y="789" width="0.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="998.73" y="799.5" ></text>
</g>
<g >
<title>page_counter_uncharge (2,939,781 samples, 0.02%)</title><rect x="305.0" y="821" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="307.98" y="831.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1,952,957 samples, 0.01%)</title><rect x="606.4" y="917" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="609.35" y="927.5" ></text>
</g>
<g >
<title>tcp_cleanup_congestion_control (3,915,674 samples, 0.02%)</title><rect x="979.8" y="789" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="982.78" y="799.5" ></text>
</g>
<g >
<title>vfs_write (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="933" width="0.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1183.50" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Rb_tree_impl (3,957,168 samples, 0.02%)</title><rect x="116.4" y="597" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="119.42" y="607.5" ></text>
</g>
<g >
<title>malloc (3,044,903 samples, 0.02%)</title><rect x="421.9" y="837" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="424.93" y="847.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (3,004,120 samples, 0.02%)</title><rect x="196.8" y="869" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="199.83" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (39,155,024 samples, 0.20%)</title><rect x="852.2" y="1061" width="2.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="855.21" y="1071.5" ></text>
</g>
<g >
<title>__check_object_size.part.0 (20,409,175 samples, 0.11%)</title><rect x="445.1" y="661" width="1.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="448.10" y="671.5" ></text>
</g>
<g >
<title>tcp_options_write (1,887,182 samples, 0.01%)</title><rect x="802.9" y="725" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="805.93" y="735.5" ></text>
</g>
<g >
<title>tcp_sendmsg (3,204,299,691 samples, 16.50%)</title><rect x="626.8" y="805" width="194.7" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="629.80" y="815.5" >tcp_sendmsg</text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.2.5 (5,703,975 samples, 0.03%)</title><rect x="484.9" y="853" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="487.90" y="863.5" ></text>
</g>
<g >
<title>destroy_inode (118,235,929 samples, 0.61%)</title><rect x="944.9" y="821" width="7.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="947.89" y="831.5" ></text>
</g>
<g >
<title>__sk_destruct (179,042,490 samples, 0.92%)</title><rect x="984.8" y="789" width="10.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="987.80" y="799.5" ></text>
</g>
<g >
<title>tcp_shutdown (3,003,698 samples, 0.02%)</title><rect x="1177.3" y="1029" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1180.34" y="1039.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,841,233 samples, 0.02%)</title><rect x="247.9" y="901" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="250.91" y="911.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (1,945,011 samples, 0.01%)</title><rect x="931.7" y="965" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="934.72" y="975.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (20,925,877 samples, 0.11%)</title><rect x="883.2" y="1253" width="1.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="886.17" y="1263.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::toFormattedString[abi:cxx11] (183,023,170 samples, 0.94%)</title><rect x="506.8" y="901" width="11.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="509.76" y="911.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (5,843,900 samples, 0.03%)</title><rect x="854.9" y="1077" width="0.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="857.88" y="1087.5" ></text>
</g>
<g >
<title>close@plt (2,937,202 samples, 0.02%)</title><rect x="1007.2" y="1013" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1010.18" y="1023.5" ></text>
</g>
<g >
<title>webserver::HttpParser::~HttpParser (12,898,585 samples, 0.07%)</title><rect x="118.0" y="629" width="0.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="121.04" y="639.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_bh (8,276,902 samples, 0.04%)</title><rect x="360.3" y="917" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="363.27" y="927.5" ></text>
</g>
<g >
<title>tcp_ack_update_rtt (15,547,565 samples, 0.08%)</title><rect x="648.3" y="693" width="0.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="651.26" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr (1,920,333 samples, 0.01%)</title><rect x="98.7" y="885" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="101.65" y="895.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;void  (1,880,666 samples, 0.01%)</title><rect x="202.4" y="933" width="0.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="205.41" y="943.5" ></text>
</g>
<g >
<title>webserver::EventLoop::isInLoopThread (1,908,026 samples, 0.01%)</title><rect x="922.3" y="981" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="925.34" y="991.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int const, webserver::Channel*&gt;, std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_Alloc_node&gt; (54,052,475 samples, 0.28%)</title><rect x="164.6" y="581" width="3.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="167.56" y="591.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (1,960,421 samples, 0.01%)</title><rect x="664.6" y="725" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="667.60" y="735.5" ></text>
</g>
<g >
<title>std::function&lt;void  (16,692,569 samples, 0.09%)</title><rect x="205.1" y="933" width="1.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="208.05" y="943.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (4,920,471 samples, 0.03%)</title><rect x="895.1" y="1093" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="898.13" y="1103.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;webserver::TcpConnection*,  (1,530,279,420 samples, 7.88%)</title><rect x="926.8" y="1045" width="93.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="929.80" y="1055.5" >std::_Sp_co..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_get_node (2,001,328 samples, 0.01%)</title><rect x="165.1" y="549" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="168.06" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_getpeername (2,027,635 samples, 0.01%)</title><rect x="231.7" y="901" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="234.72" y="911.5" ></text>
</g>
<g >
<title>dst_release (1,923,679 samples, 0.01%)</title><rect x="1127.3" y="517" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1130.30" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2,975,378 samples, 0.02%)</title><rect x="503.8" y="789" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="506.83" y="799.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::at (31,478,442 samples, 0.16%)</title><rect x="605.9" y="949" width="2.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="608.94" y="959.5" ></text>
</g>
<g >
<title>process_echoes (11,584,449 samples, 0.06%)</title><rect x="455.0" y="661" width="0.8" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="458.05" y="671.5" ></text>
</g>
<g >
<title>security_socket_getsockname (2,020,274 samples, 0.01%)</title><rect x="228.9" y="869" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="231.93" y="879.5" ></text>
</g>
<g >
<title>webserver::HttpResponse::HttpResponse (1,915,320 samples, 0.01%)</title><rect x="406.0" y="997" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="408.98" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_put_node (5,786,487 samples, 0.03%)</title><rect x="1062.8" y="869" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1065.83" y="879.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,976,624 samples, 0.02%)</title><rect x="125.9" y="789" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="128.93" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; const*, std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt; &gt;::__normal_iterator (4,009,848 samples, 0.02%)</title><rect x="172.2" y="949" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="175.22" y="959.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1,984,415 samples, 0.01%)</title><rect x="414.4" y="917" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="417.39" y="927.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr (1,884,173 samples, 0.01%)</title><rect x="910.8" y="869" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="913.77" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (8,832,812 samples, 0.05%)</title><rect x="120.0" y="629" width="0.5" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="122.95" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,948,988 samples, 0.01%)</title><rect x="908.3" y="837" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="911.28" y="847.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type&amp; std::get&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (2,215,941 samples, 0.01%)</title><rect x="199.9" y="901" width="0.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="202.94" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (4,725,593 samples, 0.02%)</title><rect x="579.2" y="949" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="582.25" y="959.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (8,754,467 samples, 0.05%)</title><rect x="10.9" y="1221" width="0.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.89" y="1231.5" ></text>
</g>
<g >
<title>operator new (4,900,939 samples, 0.03%)</title><rect x="89.1" y="933" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="92.09" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;webserver::TcpConnection,  (3,986,110 samples, 0.02%)</title><rect x="125.9" y="805" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="128.87" y="815.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,909,486 samples, 0.01%)</title><rect x="885.4" y="1221" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="888.40" y="1231.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (1,982,742 samples, 0.01%)</title><rect x="398.6" y="1077" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="401.62" y="1087.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2,023,456 samples, 0.01%)</title><rect x="331.3" y="997" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="334.28" y="1007.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_begin (1,837,216 samples, 0.01%)</title><rect x="916.7" y="805" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="919.74" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (7,944,106 samples, 0.04%)</title><rect x="1071.9" y="1141" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1074.92" y="1151.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (8,615,333 samples, 0.04%)</title><rect x="609.5" y="885" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="612.50" y="895.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_M_ptr (6,003,269 samples, 0.03%)</title><rect x="866.9" y="1189" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="869.85" y="1199.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1,891,129 samples, 0.01%)</title><rect x="550.4" y="869" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="553.38" y="879.5" ></text>
</g>
<g >
<title>___slab_alloc (12,872,483 samples, 0.07%)</title><rect x="296.5" y="917" width="0.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="299.50" y="927.5" ></text>
</g>
<g >
<title>tcp_ack (1,947,632 samples, 0.01%)</title><rect x="1116.6" y="549" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1119.61" y="559.5" ></text>
</g>
<g >
<title>call_function_single_prep_ipi (10,845,607 samples, 0.06%)</title><rect x="756.3" y="149" width="0.7" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="759.34" y="159.5" ></text>
</g>
<g >
<title>move_addr_to_user (2,030,839 samples, 0.01%)</title><rect x="239.0" y="869" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="242.02" y="879.5" ></text>
</g>
<g >
<title>[unknown] (1,971,826 samples, 0.01%)</title><rect x="10.8" y="1349" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.77" y="1359.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;webserver::TcpConnection&gt;::shared_from_this (12,769,042 samples, 0.07%)</title><rect x="892.0" y="1141" width="0.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="894.99" y="1151.5" ></text>
</g>
<g >
<title>webserver::TcpServer*&amp; std::forward&lt;webserver::TcpServer*&amp;&gt; (3,938,727 samples, 0.02%)</title><rect x="249.1" y="1013" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="252.14" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt; &gt;::_M_put_node (10,625,028 samples, 0.05%)</title><rect x="913.7" y="773" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="916.75" y="783.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, true&gt; (3,021,512 samples, 0.02%)</title><rect x="1068.8" y="901" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1071.78" y="911.5" ></text>
</g>
<g >
<title>webserver::EpollPoller::hasChannel (34,133,310 samples, 0.18%)</title><rect x="1056.4" y="1109" width="2.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1059.38" y="1119.5" ></text>
</g>
<g >
<title>std::map&lt;int, webserver::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::insert (125,618,482 samples, 0.65%)</title><rect x="160.6" y="613" width="7.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="163.63" y="623.5" ></text>
</g>
<g >
<title>dnotify_flush (3,901,322 samples, 0.02%)</title><rect x="1002.3" y="917" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1005.25" y="927.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator (1,982,198 samples, 0.01%)</title><rect x="160.9" y="597" width="0.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="163.87" y="607.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; &gt;::type&amp; std::get&lt;1ul, webserver::HttpServer*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt; &gt; (2,018,985 samples, 0.01%)</title><rect x="839.8" y="1029" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="842.78" y="1039.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;::shared_ptr&lt;webserver::TcpConnection, void&gt; (6,459,427 samples, 0.03%)</title><rect x="111.4" y="805" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="114.44" y="815.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (4,866,505,731 samples, 25.06%)</title><rect x="887.5" y="1205" width="295.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="890.53" y="1215.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1,962,412 samples, 0.01%)</title><rect x="112.4" y="789" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="115.44" y="799.5" ></text>
</g>
<g >
<title>do_syscall_64 (147,348,782 samples, 0.76%)</title><rect x="220.2" y="917" width="9.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="223.22" y="927.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (8,782,556 samples, 0.05%)</title><rect x="196.5" y="901" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="199.48" y="911.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,883,336 samples, 0.02%)</title><rect x="632.8" y="725" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="635.83" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, webserver::Channel*&gt;&amp;&amp; std::forward&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; (1,848,444 samples, 0.01%)</title><rect x="167.4" y="517" width="0.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="170.37" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; const*, std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt; &gt;::base (2,618,600 samples, 0.01%)</title><rect x="172.6" y="933" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="175.64" y="943.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,008,375 samples, 0.02%)</title><rect x="578.5" y="949" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="581.53" y="959.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::TcpConnection*&gt; &gt;::type&amp; std::get&lt;0ul, webserver::TcpConnection*&gt; (3,933,103 samples, 0.02%)</title><rect x="887.3" y="1205" width="0.2" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="890.29" y="1215.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Poller, std::default_delete&lt;webserver::Poller&gt; &gt;::_M_ptr (1,920,027 samples, 0.01%)</title><rect x="36.9" y="1269" width="0.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="39.86" y="1279.5" ></text>
</g>
<g >
<title>__check_object_size.part.0 (2,779,216 samples, 0.01%)</title><rect x="236.8" y="821" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="239.84" y="831.5" ></text>
</g>
<g >
<title>drain_stock (4,923,440 samples, 0.03%)</title><rect x="315.5" y="853" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="318.55" y="863.5" ></text>
</g>
<g >
<title>inode_init_always (3,969,049 samples, 0.02%)</title><rect x="306.0" y="965" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="309.04" y="975.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::operator (3,022,499 samples, 0.02%)</title><rect x="535.7" y="901" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="538.67" y="911.5" ></text>
</g>
<g >
<title>d_flags_for_inode (3,009,496 samples, 0.02%)</title><rect x="323.6" y="933" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="326.55" y="943.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,905,853 samples, 0.01%)</title><rect x="734.3" y="85" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="737.33" y="95.5" ></text>
</g>
<g >
<title>tcp_set_state (7,660,109 samples, 0.04%)</title><rect x="1141.2" y="501" width="0.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1144.25" y="511.5" ></text>
</g>
<g >
<title>__libc_start_call_main (19,374,306,767 samples, 99.75%)</title><rect x="12.9" y="1349" width="1177.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.87" y="1359.5" >__libc_start_call_main</text>
</g>
<g >
<title>__local_bh_enable_ip (1,927,384 samples, 0.01%)</title><rect x="225.1" y="805" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="228.09" y="815.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1,971,826 samples, 0.01%)</title><rect x="10.8" y="1317" width="0.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="13.77" y="1327.5" ></text>
</g>
<g >
<title>void std::enable_shared_from_this&lt;webserver::TcpConnection&gt;::_M_weak_assign&lt;webserver::TcpConnection&gt; (19,501,955 samples, 0.10%)</title><rect x="103.0" y="933" width="1.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="106.00" y="943.5" ></text>
</g>
<g >
<title>mod_timer (21,523,508 samples, 0.11%)</title><rect x="1166.9" y="885" width="1.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1169.92" y="895.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (3,214,009,043 samples, 16.55%)</title><rect x="55.6" y="1093" width="195.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="58.64" y="1103.5" >std::enable_if&lt;is_invocab..</text>
</g>
<g >
<title>std::_Bind&lt;void  (3,927,276 samples, 0.02%)</title><rect x="885.1" y="1237" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="888.10" y="1247.5" ></text>
</g>
<g >
<title>security_sock_graft (6,783,959 samples, 0.03%)</title><rect x="280.4" y="981" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="283.35" y="991.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (1,995,068 samples, 0.01%)</title><rect x="905.6" y="965" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="908.61" y="975.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, bool&gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (129,162,081 samples, 0.67%)</title><rect x="552.0" y="917" width="7.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="555.04" y="927.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_equals_iter&lt;char const*&gt;::operator (45,191,682 samples, 0.23%)</title><rect x="537.3" y="885" width="2.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="540.31" y="895.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3,925,880 samples, 0.02%)</title><rect x="148.0" y="437" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="150.96" y="447.5" ></text>
</g>
<g >
<title>webserver::Socket::getPeerAddr (183,784,221 samples, 0.95%)</title><rect x="230.4" y="965" width="11.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="233.41" y="975.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (985,719,481 samples, 5.08%)</title><rect x="714.3" y="341" width="59.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="717.28" y="351.5" >tcp_v4..</text>
</g>
<g >
<title>wake_up_process (2,955,787 samples, 0.02%)</title><rect x="1180.9" y="741" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1183.92" y="751.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;webserver::Channel*&gt;::deallocate (6,957,524 samples, 0.04%)</title><rect x="873.6" y="1237" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="876.58" y="1247.5" ></text>
</g>
<g >
<title>std::tuple&lt;&gt; std::forward_as_tuple&lt;&gt; (1,955,552 samples, 0.01%)</title><rect x="47.2" y="1205" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="50.20" y="1215.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (2,682,739,088 samples, 13.81%)</title><rect x="658.2" y="789" width="163.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="661.24" y="799.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, void  (1,811,456,745 samples, 9.33%)</title><rect x="413.6" y="949" width="110.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="416.61" y="959.5" >std::enable_i..</text>
</g>
<g >
<title>tcp_data_queue (4,879,352 samples, 0.03%)</title><rect x="1117.3" y="549" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1120.33" y="559.5" ></text>
</g>
<g >
<title>__netif_rx (22,362,714 samples, 0.12%)</title><rect x="1156.5" y="757" width="1.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1159.48" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, void&gt; (2,892,022 samples, 0.01%)</title><rect x="410.0" y="981" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="412.99" y="991.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (1,925,870 samples, 0.01%)</title><rect x="315.8" y="933" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="318.85" y="943.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (1,893,370 samples, 0.01%)</title><rect x="595.1" y="901" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="598.09" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_to_string_view (1,960,396 samples, 0.01%)</title><rect x="545.9" y="949" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="548.90" y="959.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;webserver::TcpConnection&gt; &gt; &gt;::operator (2,910,075 samples, 0.01%)</title><rect x="89.8" y="965" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="92.81" y="975.5" ></text>
</g>
<g >
<title>operator new (4,961,208 samples, 0.03%)</title><rect x="517.4" y="853" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="520.40" y="863.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (2,832,306 samples, 0.01%)</title><rect x="847.0" y="1093" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="850.00" y="1103.5" ></text>
</g>
<g >
<title>webserver::EventLoop::assertInChannelHandling (3,911,111 samples, 0.02%)</title><rect x="846.5" y="1125" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="849.46" y="1135.5" ></text>
</g>
<g >
<title>[[vdso]] (1,984,462 samples, 0.01%)</title><rect x="506.4" y="885" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="509.35" y="895.5" ></text>
</g>
<g >
<title>webserver::Acceptor::acceptableCallback (4,711,612,472 samples, 24.26%)</title><rect x="51.4" y="1141" width="286.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="54.39" y="1151.5" >webserver::Acceptor::acceptableCallback</text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.2.5 (14,413,353 samples, 0.07%)</title><rect x="434.3" y="837" width="0.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="437.34" y="847.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (5,768,879 samples, 0.03%)</title><rect x="160.0" y="581" width="0.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="162.99" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;webserver::EventThread, std::default_delete&lt;webserver::EventThread&gt; &gt; &gt; &gt;::end (1,820,622 samples, 0.01%)</title><rect x="172.9" y="949" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="175.86" y="959.5" ></text>
</g>
<g >
<title>onRequest (1,716,900,966 samples, 8.84%)</title><rect x="414.5" y="917" width="104.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="417.51" y="927.5" >onRequest</text>
</g>
<g >
<title>__put_user_nocheck_8 (16,616,341 samples, 0.09%)</title><rect x="21.8" y="1189" width="1.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="24.82" y="1199.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::operator (2,014,822 samples, 0.01%)</title><rect x="1051.3" y="885" width="0.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1054.31" y="895.5" ></text>
</g>
<g >
<title>rcu_core (2,002,360 samples, 0.01%)</title><rect x="476.3" y="501" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="479.31" y="511.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::shutdownWriteInLoop (1,810,394,159 samples, 9.32%)</title><rect x="1071.6" y="1157" width="110.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1074.62" y="1167.5" >webserver::Tc..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_mbegin (2,080,950 samples, 0.01%)</title><rect x="594.9" y="901" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="597.90" y="911.5" ></text>
</g>
<g >
<title>lock_sock_nested (6,852,050 samples, 0.04%)</title><rect x="981.6" y="837" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="984.58" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::_M_lower_bound (15,682,340 samples, 0.08%)</title><rect x="1057.2" y="1061" width="1.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1060.20" y="1071.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (3,677,691 samples, 0.02%)</title><rect x="608.0" y="933" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="611.02" y="943.5" ></text>
</g>
<g >
<title>tcp_mtu_probe (2,030,071 samples, 0.01%)</title><rect x="802.8" y="725" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="805.80" y="735.5" ></text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.2.5 (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="1061" width="0.8" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1183.50" y="1071.5" ></text>
</g>
<g >
<title>irq_exit_rcu (2,989,351 samples, 0.02%)</title><rect x="476.3" y="565" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="479.31" y="575.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (2,032,580 samples, 0.01%)</title><rect x="232.3" y="901" width="0.1" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="235.31" y="911.5" ></text>
</g>
<g >
<title>skb_csum_hwoffload_help (2,028,574 samples, 0.01%)</title><rect x="1159.9" y="773" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1162.91" y="783.5" ></text>
</g>
<g >
<title>__ip_finish_output (1,043,602,481 samples, 5.37%)</title><rect x="1097.7" y="853" width="63.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1100.70" y="863.5" >__ip_f..</text>
</g>
<g >
<title>operator new (3,017,923 samples, 0.02%)</title><rect x="869.3" y="1269" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="872.35" y="1279.5" ></text>
</g>
<g >
<title>boost::any::swap (2,018,259 samples, 0.01%)</title><rect x="123.4" y="645" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="126.37" y="655.5" ></text>
</g>
<g >
<title>void  (4,796,609 samples, 0.02%)</title><rect x="1182.7" y="1189" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1185.66" y="1199.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (7,664,836 samples, 0.04%)</title><rect x="231.8" y="901" width="0.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="234.84" y="911.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::~__new_allocator (1,871,580 samples, 0.01%)</title><rect x="518.7" y="885" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="521.71" y="895.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (19,543,652 samples, 0.10%)</title><rect x="83.0" y="901" width="1.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="85.99" y="911.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (3,954,204 samples, 0.02%)</title><rect x="739.1" y="309" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="742.12" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (2,910,382 samples, 0.01%)</title><rect x="78.0" y="965" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="80.96" y="975.5" ></text>
</g>
<g >
<title>xa_load (9,845,302 samples, 0.05%)</title><rect x="320.8" y="885" width="0.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="323.77" y="895.5" ></text>
</g>
<g >
<title>lock_sock_nested (3,843,633 samples, 0.02%)</title><rect x="224.4" y="837" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="227.44" y="847.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (4,892,724 samples, 0.03%)</title><rect x="122.5" y="565" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="125.54" y="575.5" ></text>
</g>
<g >
<title>__GI___libc_write (817,772,848 samples, 4.21%)</title><rect x="435.2" y="837" width="49.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="438.22" y="847.5" >__GI_..</text>
</g>
<g >
<title>__rcu_read_lock (1,859,028 samples, 0.01%)</title><rect x="736.8" y="229" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="739.75" y="239.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core.constprop.0 (2,014,818 samples, 0.01%)</title><rect x="690.3" y="437" width="0.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="693.30" y="447.5" ></text>
</g>
<g >
<title>webserver::Socket::setKeepAlive (5,713,675 samples, 0.03%)</title><rect x="241.6" y="965" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="244.57" y="975.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::~__new_allocator (2,024,801 samples, 0.01%)</title><rect x="410.4" y="981" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="413.40" y="991.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1,954,693 samples, 0.01%)</title><rect x="179.6" y="853" width="0.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="182.57" y="863.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (7,874,613 samples, 0.04%)</title><rect x="847.7" y="1045" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="850.71" y="1055.5" ></text>
</g>
<g >
<title>process_backlog (1,511,904,386 samples, 7.78%)</title><rect x="688.2" y="469" width="91.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="691.17" y="479.5" >process_ba..</text>
</g>
<g >
<title>std::function&lt;void  (41,547,038 samples, 0.21%)</title><rect x="244.6" y="965" width="2.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="247.60" y="975.5" ></text>
</g>
<g >
<title>malloc (4,798,087 samples, 0.02%)</title><rect x="87.0" y="885" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="90.03" y="895.5" ></text>
</g>
<g >
<title>page_counter_uncharge (26,788,499 samples, 0.14%)</title><rect x="645.2" y="597" width="1.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="648.22" y="607.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::~__new_allocator (2,958,437 samples, 0.02%)</title><rect x="520.4" y="917" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="523.36" y="927.5" ></text>
</g>
<g >
<title>tcp_delack_max (5,928,952 samples, 0.03%)</title><rect x="1120.0" y="517" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1122.98" y="527.5" ></text>
</g>
<g >
<title>__fput_sync (7,755,950 samples, 0.04%)</title><rect x="932.4" y="949" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="935.38" y="959.5" ></text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.2.5 (4,875,371 samples, 0.03%)</title><rect x="432.9" y="869" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="435.91" y="879.5" ></text>
</g>
<g >
<title>validate_xmit_skb (18,602,924 samples, 0.10%)</title><rect x="1159.3" y="789" width="1.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1162.26" y="799.5" ></text>
</g>
<g >
<title>rw_verify_area (16,386,575 samples, 0.08%)</title><rect x="622.7" y="837" width="1.0" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="625.67" y="847.5" ></text>
</g>
<g >
<title>webserver::TimeStamp::TimeStamp (3,832,164 samples, 0.02%)</title><rect x="858.9" y="1109" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="861.86" y="1119.5" ></text>
</g>
<g >
<title>_copy_from_iter (2,032,206 samples, 0.01%)</title><rect x="662.1" y="773" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="665.12" y="783.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;bool  (2,002,947 samples, 0.01%)</title><rect x="208.3" y="901" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="211.32" y="911.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (2,912,981 samples, 0.01%)</title><rect x="779.3" y="453" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="782.31" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::operator (6,968,868 samples, 0.04%)</title><rect x="126.2" y="821" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="129.16" y="831.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::TcpConnection*&gt; &gt;::type&amp; std::get&lt;0ul, webserver::TcpConnection*&gt; (1,984,266 samples, 0.01%)</title><rect x="47.9" y="1189" width="0.1" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="50.89" y="1199.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, webserver::Channel*, std::default_delete&lt;webserver::Channel&gt; &gt; (3,803,581 samples, 0.02%)</title><rect x="199.0" y="901" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="202.00" y="911.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;webserver::TcpConnection&gt;&amp; std::forward&lt;std::shared_ptr&lt;webserver::TcpConnection&gt;&amp;&gt; (3,963,626 samples, 0.02%)</title><rect x="101.3" y="981" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="104.28" y="991.5" ></text>
</g>
<g >
<title>ksys_write (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="949" width="0.8" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1183.50" y="959.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, webserver::ConnBuffer*&amp;&amp;, false&gt;::_M_head (3,651,225 samples, 0.02%)</title><rect x="838.6" y="965" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="841.61" y="975.5" ></text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.2.5 (12,303,038 samples, 0.06%)</title><rect x="1180.5" y="1045" width="0.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1183.50" y="1055.5" ></text>
</g>
<g >
<title>bpf_sk_storage_free (1,981,432 samples, 0.01%)</title><rect x="986.9" y="773" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="989.92" y="783.5" ></text>
</g>
<g >
<title>__slab_free (6,570,570 samples, 0.03%)</title><rect x="995.1" y="741" width="0.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="998.09" y="751.5" ></text>
</g>
<g >
<title>epoll_wait (319,563,092 samples, 1.65%)</title><rect x="16.0" y="1301" width="19.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="19.02" y="1311.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (2,019,573 samples, 0.01%)</title><rect x="394.4" y="965" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="397.39" y="975.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_drop_node (1,976,338 samples, 0.01%)</title><rect x="574.2" y="917" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="577.19" y="927.5" ></text>
</g>
<g >
<title>__mod_timer (29,066,123 samples, 0.15%)</title><rect x="1121.1" y="469" width="1.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1124.15" y="479.5" ></text>
</g>
<g >
<title>_int_free (7,156,218 samples, 0.04%)</title><rect x="884.0" y="1189" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="886.96" y="1199.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (14,689,041 samples, 0.08%)</title><rect x="1064.7" y="901" width="0.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1067.73" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;webserver::EventThreadPool, std::default_delete&lt;webserver::EventThreadPool&gt; &gt;::operator (3,035,635 samples, 0.02%)</title><rect x="61.8" y="997" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="64.85" y="1007.5" ></text>
</g>
<g >
<title>skb_free_head (14,454,284 samples, 0.07%)</title><rect x="782.5" y="453" width="0.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="785.50" y="463.5" ></text>
</g>
<g >
<title>aa_inet_sock_perm (5,783,477 samples, 0.03%)</title><rect x="1175.2" y="1013" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1178.21" y="1023.5" ></text>
</g>
<g >
<title>begin_current_label_crit_section (3,898,910 samples, 0.02%)</title><rect x="227.6" y="805" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="230.57" y="815.5" ></text>
</g>
<g >
<title>sk_reset_timer (51,140,800 samples, 0.26%)</title><rect x="799.7" y="677" width="3.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="802.70" y="687.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,993,237 samples, 0.01%)</title><rect x="1055.6" y="1125" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1058.61" y="1135.5" ></text>
</g>
<g >
<title>default_send_IPI_single_phys (8,999,513 samples, 0.05%)</title><rect x="757.1" y="133" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="760.12" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;::_Rb_tree_iterator (7,918,073 samples, 0.04%)</title><rect x="864.5" y="1237" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="867.55" y="1247.5" ></text>
</g>
<g >
<title>char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (4,784,277 samples, 0.02%)</title><rect x="212.8" y="901" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="215.77" y="911.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, webserver::ConnBuffer*&amp;&amp;, webserver::TimeStamp&amp;&amp;&gt;::_Tuple_impl&lt;webserver::ConnBuffer*, webserver::TimeStamp, void&gt; (6,742,109 samples, 0.03%)</title><rect x="400.4" y="997" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="403.44" y="1007.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;webserver::Channel, std::default_delete&lt;webserver::Channel&gt; &gt;::_M_deleter (13,837,782 samples, 0.07%)</title><rect x="1015.7" y="981" width="0.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1018.66" y="991.5" ></text>
</g>
<g >
<title>__wake_up_common (14,189,344 samples, 0.07%)</title><rect x="1128.8" y="469" width="0.8" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1131.76" y="479.5" ></text>
</g>
<g >
<title>tcp_ack_update_rtt (5,056,452 samples, 0.03%)</title><rect x="638.9" y="709" width="0.3" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="641.91" y="719.5" ></text>
</g>
<g >
<title>mntput (15,690,543 samples, 0.08%)</title><rect x="999.2" y="917" width="1.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1002.24" y="927.5" ></text>
</g>
<g >
<title>__queue_work (227,398,278 samples, 1.17%)</title><rect x="462.3" y="597" width="13.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="465.26" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (227,768,689 samples, 1.17%)</title><rect x="176.3" y="949" width="13.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="179.35" y="959.5" ></text>
</g>
<g >
<title>__rcu_read_lock (2,792,613 samples, 0.01%)</title><rect x="1161.7" y="917" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1164.70" y="927.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (3,861,648 samples, 0.02%)</title><rect x="1078.0" y="1013" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1080.96" y="1023.5" ></text>
</g>
<g >
<title>__tty_insert_flip_string_flags (7,375,317 samples, 0.04%)</title><rect x="459.1" y="613" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="462.07" y="623.5" ></text>
</g>
<g >
<title>__wake_up_common (30,904,352 samples, 0.16%)</title><rect x="1080.5" y="981" width="1.8" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1083.45" y="991.5" ></text>
</g>
<g >
<title>std::_Bind_helper&lt;std::__or_&lt;std::is_integral&lt;std::decay&lt;void  (34,134,035 samples, 0.18%)</title><rect x="902.5" y="997" width="2.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="905.53" y="1007.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (2,990,450 samples, 0.02%)</title><rect x="980.7" y="837" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="983.73" y="847.5" ></text>
</g>
<g >
<title>__raw_read_lock_irqsave (1,766,998 samples, 0.01%)</title><rect x="1082.1" y="933" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1085.10" y="943.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (239,466,415 samples, 1.23%)</title><rect x="723.1" y="261" width="14.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="726.08" y="271.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (5,517,347 samples, 0.03%)</title><rect x="187.2" y="709" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="190.18" y="719.5" ></text>
</g>
<g >
<title>x64_sys_call (268,955,234 samples, 1.38%)</title><rect x="1029.6" y="901" width="16.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1032.60" y="911.5" ></text>
</g>
<g >
<title>webserver::ConnBuffer*&amp;&amp; std::forward&lt;webserver::ConnBuffer*&gt; (2,776,569 samples, 0.01%)</title><rect x="841.1" y="1093" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="844.14" y="1103.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (6,728,230 samples, 0.03%)</title><rect x="1023.9" y="1045" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1026.91" y="1055.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (3,014,355 samples, 0.02%)</title><rect x="361.5" y="901" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="364.48" y="911.5" ></text>
</g>
<g >
<title>kick_pool (2,955,787 samples, 0.02%)</title><rect x="1180.9" y="757" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1183.92" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::data (8,922,872 samples, 0.05%)</title><rect x="540.8" y="933" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="543.82" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1,947,083 samples, 0.01%)</title><rect x="577.2" y="965" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="580.21" y="975.5" ></text>
</g>
<g >
<title>woken_wake_function (5,046,789 samples, 0.03%)</title><rect x="1140.8" y="469" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1143.76" y="479.5" ></text>
</g>
<g >
<title>hrtimer_active (8,933,341 samples, 0.05%)</title><rect x="975.2" y="789" width="0.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="978.18" y="799.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (2,997,134 samples, 0.02%)</title><rect x="559.9" y="917" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="562.89" y="927.5" ></text>
</g>
<g >
<title>epoll_wait@plt (2,031,147 samples, 0.01%)</title><rect x="35.4" y="1301" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="38.44" y="1311.5" ></text>
</g>
<g >
<title>call_rcu (4,840,837 samples, 0.02%)</title><rect x="950.9" y="805" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="953.89" y="815.5" ></text>
</g>
<g >
<title>__refill_stock (1,915,887 samples, 0.01%)</title><rect x="322.2" y="853" width="0.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="325.18" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (4,967,096 samples, 0.03%)</title><rect x="498.2" y="853" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="501.16" y="863.5" ></text>
</g>
<g >
<title>__sys_setsockopt (176,567,793 samples, 0.91%)</title><rect x="178.9" y="885" width="10.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="181.86" y="895.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (14,629,207 samples, 0.08%)</title><rect x="1156.9" y="725" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1159.95" y="735.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::_Bind&lt;void  (4,841,233 samples, 0.02%)</title><rect x="247.9" y="885" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="250.91" y="895.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (4,814,034 samples, 0.02%)</title><rect x="349.1" y="1029" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="352.14" y="1039.5" ></text>
</g>
<g >
<title>webserver::http::methodToString[abi:cxx11] (15,442,720 samples, 0.08%)</title><rect x="517.9" y="901" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="520.88" y="911.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::_Any_data&amp;&gt;::type&amp;&amp; std::move&lt;std::_Any_data&amp;&gt; (3,849,348 samples, 0.02%)</title><rect x="204.0" y="901" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="207.03" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_end (1,939,112 samples, 0.01%)</title><rect x="555.3" y="885" width="0.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="558.29" y="895.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,557,530,552 samples, 8.02%)</title><rect x="925.7" y="1109" width="94.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="928.73" y="1119.5" >std::__shar..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (1,934,835 samples, 0.01%)</title><rect x="119.7" y="645" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="122.71" y="655.5" ></text>
</g>
<g >
<title>webserver::TcpConnection::setContext (36,582,418 samples, 0.19%)</title><rect x="121.4" y="677" width="2.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="124.45" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,781,732 samples, 0.06%)</title><rect x="339.8" y="1013" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="342.83" y="1023.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, webserver::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, webserver::Channel*&gt; &gt; &gt;::end (3,959,832 samples, 0.02%)</title><rect x="1056.7" y="1077" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1059.67" y="1087.5" ></text>
</g>
<g >
<title>webserver::EventLoop::runInLoop (178,282,191 samples, 0.92%)</title><rect x="1060.3" y="1109" width="10.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1063.31" y="1119.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (1,964,426 samples, 0.01%)</title><rect x="895.3" y="1077" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="898.31" y="1087.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::function&lt;void  (1,919,832 samples, 0.01%)</title><rect x="834.5" y="885" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="837.53" y="895.5" ></text>
</g>
<g >
<title>call_function_single_prep_ipi (5,955,510 samples, 0.03%)</title><rect x="1137.7" y="373" width="0.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1140.74" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (6,813,051 samples, 0.04%)</title><rect x="519.9" y="917" width="0.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="522.94" y="927.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; &gt;::type&amp;&amp; std::get&lt;0ul, std::shared_ptr&lt;webserver::TcpConnection&gt; const&amp;&gt; (6,809,410 samples, 0.04%)</title><rect x="923.3" y="1029" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="926.34" y="1039.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@plt (1,999,181 samples, 0.01%)</title><rect x="856.2" y="1077" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="859.17" y="1087.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (1,937,439 samples, 0.01%)</title><rect x="549.0" y="917" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="552.00" y="927.5" ></text>
</g>
<g >
<title>tcp_done (2,860,318 samples, 0.01%)</title><rect x="656.2" y="677" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="659.21" y="687.5" ></text>
</g>
<g >
<title>radix_tree_lookup (18,341,153 samples, 0.09%)</title><rect x="463.7" y="549" width="1.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="466.69" y="559.5" ></text>
</g>
</g>
</svg>
